USE [CCMS]
GO


/****** Object:  StoredProcedure [dbo].[CMS_Location_GetDetailList]    Script Date: 03/03/2013 12:12:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Nov-12
-- Description:	Add detail to Location table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Location_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM LOCATION_HIST 
				WHERE IS_AUTH=0			
				ORDER BY IS_AUTH,LOCATION_CODE;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM LOCATION
						WHERE STATUS ='L'					
						ORDER BY LOCATION_CODE
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN STATUS = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM LOCATION
						WHERE STATUS in ('L','D')					
						ORDER BY LOCATION_CODE
				END;
		END;
	   
END

GO



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Mar-13
-- Description:	Get detail of holiday
-- =============================================
CREATE PROCEDURE [dbo].[CMS_Holiday_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM HOLIDAY_HIST 
				WHERE IS_AUTH=0			
				ORDER BY IS_AUTH,HOLI_DAY;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM HOLIDAY
						WHERE STATUS ='L'					
						ORDER BY HOLI_DAY
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN STATUS = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM HOLIDAY
						WHERE STATUS in ('L','D')					
						ORDER BY HOLI_DAY
				END;
		END;
	   
END

Go


GRANT EXECUTE ON [dbo].[CMS_Holiday_GetDetailList] TO [ccms_sp_only]

GO

GRANT EXECUTE ON [dbo].CMS_Holiday_Add TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Mar-13
-- Description:	Get detail of holiday by month year
-- =============================================
CREATE PROCEDURE [dbo].[CMS_Holiday_GetDetailListByMonth]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit,
	@P_MONTH	numeric(2,0),
	@P_YEAR		numeric(4,0)
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM HOLIDAY_HIST 
				WHERE IS_AUTH=0
				AND MONTH(HOLI_DAY)= @P_MONTH AND YEAR(HOLI_DAY) =@P_YEAR
				ORDER BY IS_AUTH,HOLI_DAY;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM HOLIDAY
						WHERE STATUS ='L'
						AND MONTH(HOLI_DAY)= @P_MONTH AND YEAR(HOLI_DAY) =@P_YEAR
						ORDER BY HOLI_DAY
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN STATUS = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM HOLIDAY
						WHERE STATUS in ('L','D')
						AND MONTH(HOLI_DAY)= @P_MONTH AND YEAR(HOLI_DAY) =@P_YEAR
						ORDER BY HOLI_DAY
				END;
		END;
	   
END

Go

GRANT EXECUTE ON [dbo].[CMS_Holiday_GetDetailListByMonth] TO [ccms_sp_only]

GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Mar-13
-- Description:	Get detail of Holiday table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_Holiday_GetDetail]	
	@HOLI_DAY	datetime,	
	@MOD_NO		int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT HOLI_DAY 
			   FROM HOLIDAY WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
			FROM HOLIDAY 
			WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
			FROM HOLIDAY_HIST
			WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO = @MOD_NO
		END
END


GO


GRANT EXECUTE ON [dbo].[CMS_Holiday_GetDetail] TO [ccms_sp_only]

GO







-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Mar-13
-- Description:	Get Total # of modification of holiday table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_Holiday_GetMaxMod]	
	@HOLI_DAY	datetime
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM HOLIDAY_HIST 
		WHERE HOLI_DAY=@HOLI_DAY AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM HOLIDAY 
				WHERE HOLI_DAY=@HOLI_DAY;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END

GO


GRANT EXECUTE ON [dbo].[CMS_Holiday_GetMaxMod] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Mar-13
-- Description:	Authorize record to holiday table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_Holiday_Auth]	
	@HOLI_DAY		datetime,	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@HOLI_TYPE		varchar(20),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@AUTH_BY		varchar(20),
			@AUTH_DATETIME	datetime,
			@AUTH_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			

	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT HOLI_DAY from HOLIDAY_HIST 
			  WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@HOLI_TYPE=HOLI_TYPE,				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM HOLIDAY_HIST 
				WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO HOLIDAY_HIST 
				SELECT *,1 FROM HOLIDAY
				WHERE HOLI_DAY=@HOLI_DAY;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE HOLIDAY_HIST
				SET [STATUS] = 'O' 
				WHERE HOLI_DAY=@HOLI_DAY 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE HOLIDAY
				SET HOLI_TYPE=@HOLI_TYPE,				
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE HOLI_DAY=@HOLI_DAY;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE HOLIDAY_HIST WHERE HOLI_DAY=@HOLI_DAY
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO HOLIDAY
				SELECT HOLI_DAY, HOLI_TYPE,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM HOLIDAY_HIST
					WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE HOLIDAY_HIST WHERE HOLI_DAY=@HOLI_DAY
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

		COMMIT TRANSACTION
		
		SELECT @ErrorVar1 = @@error;
		
		IF @ErrorVar1 = 0
			BEGIN		
				RETURN 0;
			END
		ELSE
			BEGIN
				RETURN 1;
			END

    
END


GO

GRANT EXECUTE ON [dbo].[CMS_Holiday_Auth] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 04-Mar-13
-- Description:	update detail to holiday table
-- =============================================

CREATE PROCEDURE [dbo].[CMS_Holiday_Update]	
	@HOLI_DAY	datetime,
	@HOLI_TYPE 	varchar(20),	
	@MOD_NO		int,
	@RET_MOD_NO	int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT HOLI_DAY FROM HOLIDAY 
				WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE HOLIDAY_HIST WHERE HOLI_DAY=@HOLI_DAY AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO HOLIDAY_HIST(HOLI_DAY, HOLI_TYPE,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@HOLI_DAY, @HOLI_TYPE,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END				

			COMMIT TRANSACTION;
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT HOLI_DAY from HOLIDAY_HIST 
						WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE HOLIDAY_HIST WHERE HOLI_DAY=@HOLI_DAY AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					INSERT INTO HOLIDAY_HIST(HOLI_DAY, HOLI_TYPE,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@HOLI_DAY, @HOLI_TYPE,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;
					
					COMMIT TRANSACTION;
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END

		END
    
END

GO


GRANT EXECUTE ON [dbo].[CMS_Holiday_Update] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 04-Mar-13
-- Description:	Remove record from holiday table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_Holiday_Remove]	
	@HOLI_DAY	datetime,	
	@MOD_NO		int,
	@RET_MOD_NO	int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@HOLI_TYPE 		varchar(20),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar		int; 
			

	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT HOLI_DAY from HOLIDAY 
			  WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@HOLI_TYPE=HOLI_TYPE,				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM HOLIDAY 
				WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE HOLIDAY_HIST WHERE HOLI_DAY=@HOLI_DAY AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				HOLIDAY_HIST (HOLI_DAY, HOLI_TYPE,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@HOLI_DAY, @HOLI_TYPE, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT HOLI_DAY from HOLIDAY_HIST 
					  WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE HOLIDAY_HIST
						WHERE HOLI_DAY=@HOLI_DAY AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END

GO

GRANT EXECUTE ON [dbo].[CMS_Holiday_Remove] TO [ccms_sp_only]

GO


ALTER TABLE dbo.CCHECK ADD
	REMINDER_DATE datetime NULL,
	REMINDER_NO numeric(3, 0) NULL,
	RTN_CODE varchar(2) null
GO

ALTER TABLE dbo.CCHECK_HIST ADD
	REMINDER_DATE datetime NULL,
	REMINDER_NO numeric(3, 0) NULL,
	RTN_CODE	varchar(2) NULL
GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 06-Mar-13
-- Description: Reminder Process for CitiAnywhere Check
-- =============================================

CREATE PROCEDURE [dbo].[CMS_Process_ReminderCitiAny]	
AS
BEGIN	
	DECLARE 
		@ErrorVar		INT,
		@v_D_CODE		varchar(12),
		@v_SLNO			numeric(3,0),
		@maxNONZONE_REF	numeric(7,0);
		
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	DECLARE tmpcursor1 CURSOR FOR
		SELECT DISTINCT ct.D_CODE FROM CCHECKTOTAL as ct INNER JOIN CCHECK as cc 
			ON ct.D_CODE=cc.D_CODE AND ct.MOD_NO=cc.MOD_NO
			WHERE cc.RTN_STATUS ='O' AND cc.REMINDER_DATE is null
			AND ct.[STATUS]='L';

	OPEN tmpcursor1;
	FETCH NEXT FROM tmpcursor1 
        INTO @v_D_CODE;

	WHILE @@FETCH_STATUS=0 
 	BEGIN

		DELETE CCHECKTOTAL_HIST
			WHERE D_CODE=@v_D_CODE AND IS_AUTH=0;

		INSERT INTO CCHECKTOTAL_HIST
			SELECT *,1 FROM CCHECKTOTAL WHERE D_CODE=@v_D_CODE;

		UPDATE CCHECKTOTAL_HIST
			SET [STATUS]='O'
			WHERE D_CODE=@v_D_CODE AND [STATUS]='L';

		UPDATE CCHECKTOTAL
			SET MOD_NO=MOD_NO+1,
				INPUT_BY=substring(suser_name(),charindex('\',suser_name())+1,20),	
				INPUT_DATETIME=GETDATE(),INPUT_FROM=HOST_NAME(),
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME()
			WHERE D_CODE=@v_D_CODE;
		
		DELETE CCHECK_HIST
			WHERE D_CODE=@v_D_CODE AND IS_AUTH=0;

		INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
			CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, CHECK_DATE, 
			CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, 
			CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, IS_AUTH, REMINDER_DATE, 
			REMINDER_NO, RTN_CODE)
			SELECT SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
			CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, CHECK_DATE, 
			CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, 
			CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO,1, REMINDER_DATE, 
			REMINDER_NO , RTN_CODE
			FROM CCHECK	
			WHERE D_CODE=@v_D_CODE
		
		UPDATE CCHECK
			SET MOD_NO=MOD_NO+1 
			WHERE D_CODE=@v_D_CODE

		FETCH NEXT FROM tmpcursor1 
				INTO @v_D_CODE;

	END

	CLOSE tmpcursor1;	
	DEALLOCATE tmpcursor1;
----2----------------------
	SELECT @maxNONZONE_REF=ISNULL(MAX(NONZONE_REF),0) FROM CCHECK
		WHERE NONZONE_REF IS NOT NULL;
		
		
	DECLARE tmpcursor2 CURSOR FOR
		SELECT DISTINCT ct.D_CODE,cc.SLNO
			FROM CCHECKTOTAL as ct INNER JOIN CCHECK as cc 
			ON ct.D_CODE=cc.D_CODE AND ct.MOD_NO=cc.MOD_NO
			WHERE cc.RTN_STATUS ='O' AND cc.REMINDER_DATE is null
			AND ct.[STATUS]='L';

	OPEN tmpcursor2;
	FETCH NEXT FROM tmpcursor2 
        INTO @v_D_CODE,@v_SLNO;

	WHILE @@FETCH_STATUS=0 
 	BEGIN
		SELECT @maxNONZONE_REF=@maxNONZONE_REF+1;

		UPDATE CCHECK
			SET NONZONE_REF=RIGHT('0000000' + convert(varchar,@maxNONZONE_REF), 7),
			REMINDER_DATE=CONVERT(datetime,CONVERT(varchar(12), GETDATE())),
			REMINDER_NO=1
			WHERE D_CODE=@v_D_CODE AND SLNO=@v_SLNO;

		INSERT NCOLLECTION(NONZONE_REF, 
			REF_DATE, 
			INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
			AUTH_BY, AUTH_DATETIME, AUTH_FROM, 
			MOD_NO, RTN_STATUS, [STATUS])
			VALUES(RIGHT('0000000' + convert(varchar,@maxNONZONE_REF), 7),
			CONVERT(datetime,CONVERT(varchar(12), GETDATE())),
			substring(suser_name(),charindex('\',suser_name())+1,20),
			GETDATE(),HOST_NAME(),
			substring(suser_name(),charindex('\',suser_name())+1,20),
			GETDATE(),HOST_NAME(),
			1,'O','L');


		FETCH NEXT FROM tmpcursor2 
        INTO @v_D_CODE,@v_SLNO;

	END

	CLOSE tmpcursor2;	
	DEALLOCATE tmpcursor2;

--3--------------------------------

	DECLARE tmpcursor3 CURSOR FOR
		SELECT DISTINCT ct.D_CODE FROM CCHECKTOTAL as ct INNER JOIN CCHECK as cc 
			ON ct.D_CODE=cc.D_CODE AND ct.MOD_NO=cc.MOD_NO
			WHERE cc.RTN_STATUS ='O' AND DATEDIFF(dd,cc.REMINDER_DATE,GETDATE())>30
			AND ct.[STATUS]='L';

	OPEN tmpcursor3;
	FETCH NEXT FROM tmpcursor3 
        INTO @v_D_CODE;

	WHILE @@FETCH_STATUS=0 
 	BEGIN

		DELETE CCHECKTOTAL_HIST
			WHERE D_CODE=@v_D_CODE AND IS_AUTH=0;

		INSERT INTO CCHECKTOTAL_HIST
			SELECT *,1 FROM CCCHEKTOTAL WHERE D_CODE=@v_D_CODE;

		UPDATE CCHECKTOTAL_HIST
			SET [STATUS]='O'
			WHERE D_CODE=@v_D_CODE AND [STATUS]='L';

		UPDATE CCHECKTOTAL
			SET MOD_NO=MOD_NO+1,
				INPUT_BY=substring(suser_name(),charindex('\',suser_name())+1,20),	
				INPUT_DATETIME=GETDATE(),INPUT_FROM=HOST_NAME(),
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME()
			WHERE D_CODE=@v_D_CODE;
		
		DELETE CCHECK_HIST
			WHERE D_CODE=@v_D_CODE AND IS_AUTH=0;

		INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
			CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, CHECK_DATE, 
			CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, 
			CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, IS_AUTH, REMINDER_DATE, 
			REMINDER_NO, RTN_CODE)
			SELECT SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
			CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, CHECK_DATE, 
			CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, 
			CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO,1, REMINDER_DATE, 
			REMINDER_NO, RTN_CODE 
			FROM CCHECK	
			WHERE D_CODE=@v_D_CODE
		
		UPDATE CCHECK
			SET MOD_NO=MOD_NO+1 
			WHERE D_CODE=@v_D_CODE

		FETCH NEXT FROM tmpcursor3 
				INTO @v_D_CODE;

	END

	CLOSE tmpcursor3;	
	DEALLOCATE tmpcursor3;

-----4------------------------------

			
	DECLARE tmpcursor4 CURSOR FOR
		SELECT DISTINCT ct.D_CODE,cc.SLNO
			FROM CCHECKTOTAL as ct INNER JOIN CCHECK as cc 
			ON ct.D_CODE=cc.D_CODE AND ct.MOD_NO=cc.MOD_NO
			WHERE cc.RTN_STATUS ='O' AND DATEDIFF(dd,cc.REMINDER_DATE,GETDATE())>30
			AND ct.[STATUS]='L';

	OPEN tmpcursor4;
	FETCH NEXT FROM tmpcursor4 
        INTO @v_D_CODE,@v_SLNO;

	WHILE @@FETCH_STATUS=0 
 	BEGIN
		
		UPDATE CCHECK
			SET REMINDER_DATE=CONVERT(datetime,CONVERT(varchar(12), GETDATE())),
			REMINDER_NO=REMINDER_NO+1
			WHERE D_CODE=@v_D_CODE AND SLNO=@v_SLNO;
		
		FETCH NEXT FROM tmpcursor4 
        INTO @v_D_CODE,@v_SLNO;

	END

	CLOSE tmpcursor4;	
	DEALLOCATE tmpcursor4;

-----------------------------------

		SELECT @ErrorVar = @@error;			

		IF @ErrorVar <> 0
			BEGIN
				ROLLBACK TRANSACTION;
				RETURN 1;
			END

	COMMIT TRANSACTION;

	
         
END





GO


GRANT EXECUTE ON [dbo].[CMS_Process_ReminderCitiAny] TO [ccms_sp_only]

GO


ALTER TABLE dbo.CSD_DET ADD
	RTN_CODE varchar(2) NULL
GO

ALTER TABLE dbo.CSD_DET_HIST ADD
	RTN_CODE varchar(2) NULL
GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Nov-12
-- Description:	Get detail to bank table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Bank_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;


	IF @AUTH_FLAG=0
		BEGIN						
			SELECT *,'S' = 'U'				 
				FROM BANK_HIST 
				WHERE IS_AUTH=0
				ORDER BY BANK_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM BANK
						WHERE [STATUS] ='L'					
						ORDER BY BANK_CODE;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM BANK
						WHERE [STATUS] IN ('L','D')					
						ORDER BY BANK_CODE;
				END;
		END;	
	   
END


GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 13-Nov-12
-- Description:	get detail of branch table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Branch_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;



	IF @AUTH_FLAG=0
		BEGIN						
			SELECT brh.*,BANK.BANK_NAME,LOCATION.LOCATION_NAME,ZONE.ZONE_NAME,'S' = 'U'				 
				FROM BRANCH_HIST brh
				LEFT OUTER JOIN BANK ON BANK.BANK_CODE=brh.BANK_CODE
				LEFT OUTER JOIN LOCATION ON LOCATION.LOCATION_CODE=brh.LOCATION_CODE
				LEFT OUTER JOIN ZONE ON ZONE.ZONE_CODE=brh.CLEARING_ZONE
				WHERE IS_AUTH=0
				ORDER BY BANK_CODE,BRANCH_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT br.*,1,BANK.BANK_NAME,LOCATION.LOCATION_NAME,ZONE.ZONE_NAME,'S' = 'A'				
						FROM BRANCH br
						LEFT OUTER JOIN BANK ON BANK.BANK_CODE=br.BANK_CODE
						LEFT OUTER JOIN LOCATION ON LOCATION.LOCATION_CODE=br.LOCATION_CODE
						LEFT OUTER JOIN ZONE ON ZONE.ZONE_CODE=br.CLEARING_ZONE
						WHERE br.STATUS ='L'					
						ORDER BY BANK_CODE,BRANCH_CODE
				END;
			ELSE
				BEGIN
					SELECT br.*,1,BANK.BANK_NAME,LOCATION.LOCATION_NAME,ZONE.ZONE_NAME,'S' = 
						CASE  
							WHEN br.STATUS = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM BRANCH br
						LEFT OUTER JOIN BANK ON BANK.BANK_CODE=br.BANK_CODE
						LEFT OUTER JOIN LOCATION ON LOCATION.LOCATION_CODE=br.LOCATION_CODE
						LEFT OUTER JOIN ZONE ON ZONE.ZONE_CODE=br.CLEARING_ZONE
						WHERE br.STATUS in ('L','D')					
						ORDER BY BANK_CODE,BRANCH_CODE
				END;
		END;	

	
	   
END

GO




-- =============================================
-- Author:		Md.Fahad Khan
-- Create date: 08-01-13
-- Description:	User Form Permission table
--				by USER_ID
-- =============================================
CREATE PROCEDURE [dbo].[CMS_Users_FunFormPermission]	
	@USERS_ID	varchar(20),
    @FORMS_NAME varchar(60)
AS
BEGIN	
    Declare @FG_SLNO numeric(6,0)
	SET NOCOUNT ON;
    CREATE TABLE #Temp 
	(
        FG_SLNO numeric(6,0),
        FORMS_NAME varchar(60),
		IS_SHOW bit,
		IS_NEW bit,
        IS_UNLOCK bit,
        IS_AUTHORIZER bit,
        IS_DELETE bit,
        IS_SAVE bit
       
	)
        DECLARE tempRows CURSOR FOR

            SELECT FG_SLNO FROM USERS_FG_DET
                   WHERE USERS_ID=@USERS_ID
 
        OPEN tempRows

        FETCH NEXT FROM tempRows

                   INTO @FG_SLNO
 

        WHILE @@FETCH_STATUS = 0

		   BEGIN
       
             BEGIN                

     		INSERT INTO #Temp(FG_SLNO,FORMS_NAME,IS_SHOW,IS_NEW,IS_UNLOCK,IS_AUTHORIZER,IS_DELETE,IS_SAVE)
				SELECT pf.FG_SLNO,f.FORMS_NAME,pf.IS_SHOW,pf.IS_NEW,pf.IS_UNLOCK,
                       pf.IS_AUTHORIZER,pf.IS_DELETE,pf.IS_SAVE
                       FROM PERM_FORMS pf
                       LEFT JOIN FORM_LIST f ON f.SLNO = pf.FORM_SLNO
					WHERE pf.FG_SLNO=@FG_SLNO AND f.FORMS_NAME =@FORMS_NAME 

				     
             END

			 FETCH NEXT FROM tempRows

					INTO @FG_SLNO 
            
		 END

     CLOSE tempRows
     
     DEALLOCATE tempRows

      SELECT t1.FORMS_NAME,
       IS_SHOW =REPLACE( (SELECT IS_SHOW AS [data()]
           FROM #Temp t2
           WHERE t2.FORMS_NAME = t1.FORMS_NAME
           ORDER BY FORMS_NAME
           FOR XML PATH('')), ' ', ','),
       IS_NEW =REPLACE( (SELECT IS_NEW AS [data()]
           FROM #Temp t2
           WHERE t2.FORMS_NAME = t1.FORMS_NAME
           ORDER BY FORMS_NAME
           FOR XML PATH('')), ' ', ','),
       IS_UNLOCK =REPLACE( (SELECT IS_UNLOCK AS [data()]
           FROM #Temp t2
           WHERE t2.FORMS_NAME = t1.FORMS_NAME
           ORDER BY FORMS_NAME
           FOR XML PATH('')), ' ', ','),
       IS_AUTHORIZER =REPLACE( (SELECT IS_AUTHORIZER AS [data()]
           FROM #Temp t2
           WHERE t2.FORMS_NAME = t1.FORMS_NAME
           ORDER BY FORMS_NAME
           FOR XML PATH('')), ' ', ','),
       IS_DELETE =REPLACE( (SELECT IS_DELETE AS [data()]
           FROM #Temp t2
           WHERE t2.FORMS_NAME = t1.FORMS_NAME
           ORDER BY FORMS_NAME
           FOR XML PATH('')), ' ', ','),
       IS_SAVE =REPLACE( (SELECT IS_SAVE AS [data()]
           FROM #Temp t2
           WHERE t2.FORMS_NAME = t1.FORMS_NAME
           ORDER BY FORMS_NAME
           FOR XML PATH('')), ' ', ',')

      FROM #Temp t1
      GROUP BY FORMS_NAME ;
             
            
END


GO

GRANT EXECUTE ON [dbo].[CMS_Users_FunFormPermission] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Md.Fahad Khan
-- Create date: 31-DEC-12
-- Description:	User Menu Permission table
--				by USER_ID
-- =============================================
CREATE PROCEDURE [dbo].[CMS_Users_FunMenuPermission]	
	@USERS_ID	varchar(20)
AS
BEGIN	

	Declare @FG_SLNO numeric(6,0)
    Declare @IS_VISIBLE bit 
    Declare @IS_ENABLE bit
    Declare @MENU_NAME varchar(60) 
	SET NOCOUNT ON;
    CREATE TABLE #Temp 
	(
        FG_SLNO numeric(6,0),
        MENU_NAME varchar(60),
		IS_VISIBLE bit,
		IS_ENABLE bit
       
	)
    

     DECLARE tempRows CURSOR FOR

            SELECT FG_SLNO FROM USERS_FG_DET
                   WHERE USERS_ID=@USERS_ID 

     
     OPEN tempRows

     FETCH NEXT FROM tempRows

            INTO @FG_SLNO
 

     WHILE @@FETCH_STATUS = 0

		 BEGIN
       
           BEGIN                

			INSERT INTO #Temp(FG_SLNO,MENU_NAME,IS_VISIBLE,IS_ENABLE)
				SELECT pm.FG_SLNO,m.MENU_NAME,pm.IS_VISIBLE,pm.IS_ENABLE
					FROM PERM_MENUS pm
					LEFT JOIN MENU_LIST m ON m.SLNO=pm.MENU_SLNO
					WHERE pm.FG_SLNO=@FG_SLNO
				     
           END

			 FETCH NEXT FROM tempRows

					INTO @FG_SLNO 
            
		 END

     CLOSE tempRows
     
     DEALLOCATE tempRows


     SELECT t1.MENU_NAME,
       IS_VISIBLE =REPLACE( (SELECT IS_VISIBLE AS [data()]
           FROM #Temp t2
           WHERE t2.MENU_NAME = t1.MENU_NAME
           ORDER BY MENU_NAME
           FOR XML PATH('')), ' ', ','),
       IS_ENABLE =REPLACE( (SELECT IS_ENABLE AS [data()]
           FROM #Temp t2
           WHERE t2.MENU_NAME = t1.MENU_NAME
           ORDER BY MENU_NAME
           FOR XML PATH('')), ' ', ',')
      FROM #Temp t1
      GROUP BY MENU_NAME ;
             
            
END



GO

GRANT EXECUTE ON [dbo].[CMS_Users_FunMenuPermission] TO [ccms_sp_only]


GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Nov-12
-- Description:	Get detail to zone table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Zone_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM ZONE_HIST 
				WHERE IS_AUTH=0			
				ORDER BY ZONE_CODE;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM ZONE
						WHERE [STATUS] ='L'					
						ORDER BY ZONE_CODE
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM ZONE
						WHERE [STATUS] in ('L','D')					
						ORDER BY ZONE_CODE
				END;
		END;
	   
	   
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Nov-12
-- Description:	Get detail to Return_Reject table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ReturnReject_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM RETURN_REJECT_HIST 
				WHERE IS_AUTH=0			
				ORDER BY REJECT_CODE;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM RETURN_REJECT
						WHERE [STATUS] ='L'					
						ORDER BY REJECT_CODE
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM RETURN_REJECT
						WHERE [STATUS] in ('L','D')					
						ORDER BY REJECT_CODE
				END;
		END;

	
	   
END

GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Nov-12
-- Description:	get detail to CheckType table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CheckType_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM CHECKTYPE_HIST 
				WHERE IS_AUTH=0			
				ORDER BY CHECKTYPE_CODE;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CHECKTYPE
						WHERE [STATUS] ='L'					
						ORDER BY CHECKTYPE_CODE;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CHECKTYPE
						WHERE [STATUS] in ('L','D')					
						ORDER BY CHECKTYPE_CODE;
				END;
		END;
	   
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 29-Nov-12
-- Description:	Get detail to Schedule Stock
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ScheduleStock_GetDetailList]		
	@SCHEDULE_ID	tinyint,
	@DEL_FLAG		int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;
	
	IF @AUTH_FLAG=0
		BEGIN			
			
			SELECT sh.*,b.BANK_NAME,l.LOCATION_NAME,'S' = 'U'				 
				FROM SCHEDULE_STOCK_HIST sh
				LEFT OUTER JOIN BANK b
				ON b.BANK_CODE=sh.BANK_CODE
				LEFT OUTER JOIN LOCATION l
				ON l.LOCATION_CODE=sh.LOCATION_CODE
				WHERE sh.IS_AUTH=0 AND sh.SCHEDULE_ID=@SCHEDULE_ID
				ORDER BY BANK_CODE,LOCATION_CODE
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN					

					SELECT s.*,1,b.BANK_NAME,l.LOCATION_NAME,'S' = 'A'				
						FROM SCHEDULE_STOCK s
						LEFT OUTER JOIN BANK b
						ON b.BANK_CODE=s.BANK_CODE
						LEFT OUTER JOIN LOCATION l
						ON l.LOCATION_CODE=s.LOCATION_CODE
						WHERE s.STATUS ='L'	AND s.SCHEDULE_ID=@SCHEDULE_ID
						ORDER BY BANK_CODE,LOCATION_CODE;

				END;
			ELSE
				BEGIN					

					SELECT s.*,1,b.BANK_NAME,l.LOCATION_NAME,'S' = 
							CASE  
								WHEN s.STATUS = 'D' THEN 'D'                    
								ELSE 'A'
							END 
						FROM SCHEDULE_STOCK s
						LEFT OUTER JOIN BANK b
						ON b.BANK_CODE=s.BANK_CODE
						LEFT OUTER JOIN LOCATION l
						ON l.LOCATION_CODE=s.LOCATION_CODE
						WHERE s.STATUS in ('L','D') AND s.SCHEDULE_ID=@SCHEDULE_ID				
						ORDER BY BANK_CODE,LOCATION_CODE
				END;
		END;

	
	   
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Nov-12
-- Description:	Get detail to Client table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Client_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM CLIENT_HIST 
				WHERE IS_AUTH=0			
				ORDER BY CLIENT_CODE;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CLIENT
						WHERE [STATUS] ='L'					
						ORDER BY CLIENT_CODE
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CLIENT
						WHERE [STATUS] in ('L','D')					
						ORDER BY CLIENT_CODE
				END;
		END;
	
	   
END

GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 22-Nov-12
-- Description:	Authorize record to client table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Client_Auth]	
	@CLIENT_CODE	varchar(6),
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),
			@ACC_NO				varchar(16),  
			@ACC_NAME			varchar(50),
			@MAIL_ADD			varchar(256), 
			@CONTACT			varchar(50), 
			@CASH_DAYS			numeric(2,0), 
			@SPEED_DAYS			numeric(2,0), 
			@CASH_CR_TYPE		varchar(25),
			@SPEED_CR_TYPE		varchar(25),
			@CASH_CHARGE		numeric(12,2), 
			@SPEED_CHARGE		numeric(12,2), 
			@RETURN_CHARGE		numeric(12,2), 
			@CASH_STD_CHARGE	numeric(12,2), 
			@SPEED_STD_CHARGE	numeric(12,2), 
			@CASH_VAT			numeric(8,2), 
			@SPEED_VAT			numeric(8,2), 
			@CITIANY_CHARGE		numeric(12,2), 
			@CITIANY_STD_CHARGE numeric(12,2), 
			@CITIANY_VAT		numeric(8,2), 
			@BILLING_TYPE		varchar(25),
			@IS_DISABLE			bit,
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),
			@AUTH_BY			varchar(20),
			@AUTH_DATETIME		datetime,
			@AUTH_FROM			varchar(30),
			@LAST_MOD_NO		int,
			@IS_AUTH			bit;			
	
	DECLARE @ErrorVar1		int; 
			

	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT CLIENT_CODE from CLIENT_HIST 
			  WHERE CLIENT_CODE=@CLIENT_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@CLIENT_CODE=CLIENT_CODE, @ACC_NO=ACC_NO, 
				@ACC_NAME=ACC_NAME,@MAIL_ADD=MAIL_ADD,@CONTACT=CONTACT,
				@CASH_DAYS=CASH_DAYS, @SPEED_DAYS=SPEED_DAYS, 
				@CASH_CR_TYPE=CASH_CR_TYPE, @SPEED_CR_TYPE=SPEED_CR_TYPE,
				@CASH_CHARGE=CASH_CHARGE, @SPEED_CHARGE=SPEED_CHARGE, 
				@RETURN_CHARGE=RETURN_CHARGE, @CASH_STD_CHARGE=CASH_STD_CHARGE,
				@SPEED_STD_CHARGE=SPEED_STD_CHARGE, @CASH_VAT=CASH_VAT, 
				@SPEED_VAT=SPEED_VAT, @CITIANY_CHARGE=CITIANY_CHARGE, 
				@CITIANY_STD_CHARGE=CITIANY_STD_CHARGE, 
				@CITIANY_VAT=CITIANY_VAT, @BILLING_TYPE=BILLING_TYPE,
				@IS_DISABLE=IS_DISABLE,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLIENT_HIST 
				WHERE CLIENT_CODE=@CLIENT_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLIENT_HIST 
				SELECT *,1 FROM CLIENT
				WHERE CLIENT_CODE=@CLIENT_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLIENT_HIST
				SET [STATUS] = 'O' 
				WHERE CLIENT_CODE=@CLIENT_CODE 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CLIENT
				SET ACC_NO=@ACC_NO, 
				ACC_NAME=@ACC_NAME,MAIL_ADD=@MAIL_ADD,CONTACT=@CONTACT,
				CASH_DAYS=@CASH_DAYS, SPEED_DAYS=@SPEED_DAYS, 
				CASH_CR_TYPE=@CASH_CR_TYPE, SPEED_CR_TYPE=@SPEED_CR_TYPE,
				CASH_CHARGE=@CASH_CHARGE, SPEED_CHARGE=@SPEED_CHARGE, 
				RETURN_CHARGE=@RETURN_CHARGE, CASH_STD_CHARGE=@CASH_STD_CHARGE,
				SPEED_STD_CHARGE=@SPEED_STD_CHARGE, CASH_VAT=@CASH_VAT, 
				SPEED_VAT=@SPEED_VAT, CITIANY_CHARGE=@CITIANY_CHARGE, 
				CITIANY_STD_CHARGE=@CITIANY_STD_CHARGE, 
				CITIANY_VAT=@CITIANY_VAT, BILLING_TYPE=@BILLING_TYPE,
				IS_DISABLE=@IS_DISABLE,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE CLIENT_CODE=@CLIENT_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLIENT_HIST WHERE CLIENT_CODE=@CLIENT_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CLIENT
				SELECT CLIENT_CODE, ACC_NO, ACC_NAME,MAIL_ADD,
					CONTACT, CASH_DAYS, SPEED_DAYS, CASH_CR_TYPE, SPEED_CR_TYPE,
					CASH_CHARGE, SPEED_CHARGE, RETURN_CHARGE, CASH_STD_CHARGE,
					SPEED_STD_CHARGE, CASH_VAT, SPEED_VAT, CITIANY_CHARGE, 
					CITIANY_STD_CHARGE, CITIANY_VAT, BILLING_TYPE,IS_DISABLE, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM,
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CLIENT_HIST
					WHERE CLIENT_CODE=@CLIENT_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CLIENT_HIST WHERE CLIENT_CODE=@CLIENT_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

		COMMIT TRANSACTION
		
		SELECT @ErrorVar1 = @@error;
		
		IF @ErrorVar1 = 0
			BEGIN		
				RETURN 0;
			END
		ELSE
			BEGIN
				RETURN 1;
			END

    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 22-Nov-12
-- Description:	Add detail to Client table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Client_Add]	
	@CLIENT_CODE		varchar(6), 
	@ACC_NO				varchar(16),  
	@ACC_NAME			varchar(50),
	@MAIL_ADD			varchar(256), 
	@CONTACT			varchar(50), 
	@CASH_DAYS			numeric(2,0), 
	@SPEED_DAYS			numeric(2,0), 
	@CASH_CR_TYPE		varchar(25),
	@SPEED_CR_TYPE		varchar(25),
	@CASH_CHARGE		numeric(12,2), 
	@SPEED_CHARGE		numeric(12,2), 
	@RETURN_CHARGE		numeric(12,2), 
	@CASH_STD_CHARGE	numeric(12,2), 
	@SPEED_STD_CHARGE	numeric(12,2), 
	@CASH_VAT			numeric(8,2), 
	@SPEED_VAT			numeric(8,2), 
	@CITIANY_CHARGE		numeric(12,2), 
	@CITIANY_STD_CHARGE numeric(12,2), 
	@CITIANY_VAT		numeric(8,2), 
	@BILLING_TYPE		varchar(25),
	@IS_DISABLE			bit
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT CLIENT_CODE FROM CLIENT WHERE CLIENT_CODE=@CLIENT_CODE)
		BEGIN
			-- Duplicate Entry
			ROLLBACK TRANSACTION;		
			RETURN 2	
		END
	
	DELETE CLIENT_HIST WHERE 
		CLIENT_CODE=@CLIENT_CODE AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	ELSE

	INSERT INTO CLIENT_HIST(CLIENT_CODE, ACC_NO, ACC_NAME,MAIL_ADD,
		CONTACT, CASH_DAYS, SPEED_DAYS, CASH_CR_TYPE, SPEED_CR_TYPE,
		CASH_CHARGE, SPEED_CHARGE, RETURN_CHARGE, CASH_STD_CHARGE,
		SPEED_STD_CHARGE, CASH_VAT, SPEED_VAT, CITIANY_CHARGE, 
		CITIANY_STD_CHARGE, CITIANY_VAT, BILLING_TYPE, IS_DISABLE,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@CLIENT_CODE, @ACC_NO, @ACC_NAME,@MAIL_ADD,
		@CONTACT, @CASH_DAYS, @SPEED_DAYS, @CASH_CR_TYPE, @SPEED_CR_TYPE,
		@CASH_CHARGE, @SPEED_CHARGE, @RETURN_CHARGE, @CASH_STD_CHARGE,
		@SPEED_STD_CHARGE, @CASH_VAT, @SPEED_VAT, @CITIANY_CHARGE, 
		@CITIANY_STD_CHARGE, @CITIANY_VAT, @BILLING_TYPE, @IS_DISABLE,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
	RETURN 0;
	   
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 22-Nov-12
-- Description:	update detail to client table
-- =============================================

ALTER PROCEDURE [dbo].[CMS_Client_Update]	
	@CLIENT_CODE		varchar(6),
	@ACC_NO				varchar(16),  
	@ACC_NAME			varchar(50),
	@MAIL_ADD			varchar(256), 
	@CONTACT			varchar(50), 
	@CASH_DAYS			numeric(2,0), 
	@SPEED_DAYS			numeric(2,0), 
	@CASH_CR_TYPE		varchar(25),
	@SPEED_CR_TYPE		varchar(25),
	@CASH_CHARGE		numeric(12,2), 
	@SPEED_CHARGE		numeric(12,2), 
	@RETURN_CHARGE		numeric(12,2), 
	@CASH_STD_CHARGE	numeric(12,2), 
	@SPEED_STD_CHARGE	numeric(12,2), 
	@CASH_VAT			numeric(8,2), 
	@SPEED_VAT			numeric(8,2), 
	@CITIANY_CHARGE		numeric(12,2), 
	@CITIANY_STD_CHARGE numeric(12,2), 
	@CITIANY_VAT		numeric(8,2), 
	@BILLING_TYPE		varchar(25),
	@IS_DISABLE			bit,
	@MOD_NO				int,
	@RET_MOD_NO			int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT CLIENT_CODE FROM CLIENT 
				WHERE CLIENT_CODE=@CLIENT_CODE AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CLIENT_HIST WHERE CLIENT_CODE=@CLIENT_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CLIENT_HIST(CLIENT_CODE, ACC_NO, ACC_NAME,MAIL_ADD,
				CONTACT, CASH_DAYS, SPEED_DAYS, CASH_CR_TYPE, SPEED_CR_TYPE,
				CASH_CHARGE, SPEED_CHARGE, RETURN_CHARGE, CASH_STD_CHARGE,
				SPEED_STD_CHARGE, CASH_VAT, SPEED_VAT, CITIANY_CHARGE, 
				CITIANY_STD_CHARGE, CITIANY_VAT, BILLING_TYPE, IS_DISABLE,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@CLIENT_CODE, @ACC_NO, @ACC_NAME,@MAIL_ADD,
				@CONTACT, @CASH_DAYS, @SPEED_DAYS, @CASH_CR_TYPE, @SPEED_CR_TYPE,
				@CASH_CHARGE, @SPEED_CHARGE, @RETURN_CHARGE, @CASH_STD_CHARGE,
				@SPEED_STD_CHARGE, @CASH_VAT, @SPEED_VAT, @CITIANY_CHARGE, 
				@CITIANY_STD_CHARGE, @CITIANY_VAT, @BILLING_TYPE, @IS_DISABLE,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END				

			COMMIT TRANSACTION;
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT CLIENT_CODE from CLIENT_HIST 
						WHERE CLIENT_CODE=@CLIENT_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CLIENT_HIST WHERE CLIENT_CODE=@CLIENT_CODE AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					INSERT INTO CLIENT_HIST(CLIENT_CODE, ACC_NO, ACC_NAME,MAIL_ADD,
						CONTACT, CASH_DAYS, SPEED_DAYS, CASH_CR_TYPE, SPEED_CR_TYPE,
						CASH_CHARGE, SPEED_CHARGE, RETURN_CHARGE, CASH_STD_CHARGE,
						SPEED_STD_CHARGE, CASH_VAT, SPEED_VAT, CITIANY_CHARGE, 
						CITIANY_STD_CHARGE, CITIANY_VAT, BILLING_TYPE, IS_DISABLE,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@CLIENT_CODE, @ACC_NO, @ACC_NAME,@MAIL_ADD,
						@CONTACT, @CASH_DAYS, @SPEED_DAYS, @CASH_CR_TYPE, @SPEED_CR_TYPE,
						@CASH_CHARGE, @SPEED_CHARGE, @RETURN_CHARGE, @CASH_STD_CHARGE,
						@SPEED_STD_CHARGE, @CASH_VAT, @SPEED_VAT, @CITIANY_CHARGE, 
						@CITIANY_STD_CHARGE, @CITIANY_VAT, @BILLING_TYPE, @IS_DISABLE,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;
					
					COMMIT TRANSACTION;
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END

		END
    
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Jan-13
-- Description:	Get detail of Dschedule
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DSchedule_GetDetails]	
	@DS_CODE	varchar(12),	
	@MOD_NO		int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT DS_CODE 
			   FROM DSCHEDULE WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT ds.*,'IS_AUTH'=1,
				l.LOCATION_NAME,b.BANK_NAME,br.BRANCH_NAME,cl.ACC_NO,cl.ACC_NAME
			FROM DSCHEDULE ds
				LEFT OUTER JOIN LOCATION l
				ON l.LOCATION_CODE=ds.LOCATION_CODE
				LEFT OUTER JOIN BANK b
				ON b.BANK_CODE=ds.CORR_BANK_CODE
				LEFT OUTER JOIN BRANCH br
				ON br.BRANCH_CODE=ds.CORR_BRANCH_CODE
				LEFT OUTER JOIN CLIENT cl
				ON cl.CLIENT_CODE=ds.CLIENT_CODE
			WHERE ds.DS_CODE=@DS_CODE AND ds.MOD_NO = @MOD_NO
			ORDER BY D_CODE
		END	
	ELSE
		BEGIN
			SELECT dsh.* ,
				l.LOCATION_NAME,b.BANK_NAME,br.BRANCH_NAME,cl.ACC_NO,cl.ACC_NAME
			FROM DSCHEDULE_HIST dsh
				LEFT OUTER JOIN LOCATION l
				ON l.LOCATION_CODE=dsh.LOCATION_CODE
				LEFT OUTER JOIN BANK b
				ON b.BANK_CODE=dsh.CORR_BANK_CODE
				LEFT OUTER JOIN BRANCH br
				ON br.BRANCH_CODE=dsh.CORR_BRANCH_CODE
				LEFT OUTER JOIN CLIENT cl
				ON cl.CLIENT_CODE=dsh.CLIENT_CODE
			WHERE dsh.DS_CODE=@DS_CODE AND dsh.MOD_NO = @MOD_NO
			ORDER BY D_CODE
		END
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 26-Nov-12
-- Description:	Get Summary to Client location charge
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClientLocCharge_GetSummList]
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U',cl.ACC_NAME,cl.ACC_NO,lc.LOCATION_NAME				 
				FROM CLIENT_LOC_CHARGE_HIST as clch
				LEFT OUTER JOIN CLIENT as cl ON cl.CLIENT_CODE=clch.CLIENT_CODE
				LEFT OUTER JOIN LOCATION as lc ON lc.LOCATION_CODE=clch.LOCATION_CODE				 
				WHERE clch.IS_AUTH=0			
				ORDER BY clch.CLIENT_CODE,clch.LOCATION_CODE;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A',cl.ACC_NAME,cl.ACC_NO,lc.LOCATION_NAME				
						FROM CLIENT_LOC_CHARGE as clc
						LEFT OUTER JOIN CLIENT as cl ON cl.CLIENT_CODE=clc.CLIENT_CODE
						LEFT OUTER JOIN LOCATION as lc ON lc.LOCATION_CODE=clc.LOCATION_CODE
						WHERE clc.STATUS ='L'					
						ORDER BY clc.CLIENT_CODE,clc.LOCATION_CODE
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN clc.STATUS = 'D' THEN 'D'                    
							ELSE 'A'
						END, cl.ACC_NAME,cl.ACC_NO,lc.LOCATION_NAME 
						FROM CLIENT_LOC_CHARGE as clc
						LEFT OUTER JOIN CLIENT as cl ON cl.CLIENT_CODE=clc.CLIENT_CODE
						LEFT OUTER JOIN LOCATION as lc ON lc.LOCATION_CODE=clc.LOCATION_CODE
						WHERE clc.STATUS in ('L','D')					
						ORDER BY clc.CLIENT_CODE,clc.LOCATION_CODE
				END;
		END;


		   
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 18-Dec-12
-- Description:	get list records of client
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Client_GetList]	
AS
BEGIN		
	SET NOCOUNT ON;

	SELECT CLIENT_CODE, ACC_NO, ACC_NAME
	FROM CLIENT		
	WHERE STATUS='L'
	AND IS_DISABLE=0	
	ORDER BY ACC_NAME;
	   
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Nov-12
-- Description:	get detail of client table
--				by client_code
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Client_GetDetailByCode]	
	@CLIENT_CODE	varchar(6)
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT *
		FROM CLIENT 		
		WHERE CLIENT_CODE=@CLIENT_CODE	
		AND IS_DISABLE=0
	   
END

GO

ALTER TABLE dbo.DSCHEDULE_HIST ADD
	FILENAME varchar(15) NULL,
	REF_NO varchar(50) NULL,
	FILE_USER_ID varchar(20) NULL,
	SEQ_NO numeric(4, 0) NULL,
	CHECKED tinyint NULL,
	FLEXGEN_DATE datetime NULL
GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Jan-13
-- Description:	Authorize record to DCollected
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DCollected_Auth]	
	@DS_CODE		varchar(12),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_NOCHK	numeric(4,0), 
			@TOTAL_CHKAMT	numeric(12,2), 
			@TOTAL_CASHAMT	numeric(12,2),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT DS_CODE from DCOLLECTED_HIST 
			  WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_NOCHK=TOTAL_NOCHK, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT, @TOTAL_CASHAMT=TOTAL_CASHAMT,	
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM DCOLLECTED_HIST 
				WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO DCOLLECTED_HIST 
				SELECT *,1 FROM DCOLLECTED
				WHERE DS_CODE=@DS_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE DCOLLECTED_HIST
				SET [STATUS] = 'O' 
				WHERE DS_CODE=@DS_CODE
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE DCOLLECTED
				SET
				TOTAL_NOCHK=@TOTAL_NOCHK,
				TOTAL_CHKAMT=@TOTAL_CHKAMT, TOTAL_CASHAMT=@TOTAL_CASHAMT,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE DS_CODE=@DS_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE DCOLLECTED_HIST WHERE DS_CODE=@DS_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO DCOLLECTED
				SELECT DS_CODE,TOTAL_NOCHK, TOTAL_CHKAMT, TOTAL_CASHAMT, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM DCOLLECTED_HIST
					WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE DCOLLECTED_HIST WHERE DS_CODE=@DS_CODE
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update DSCHEDULE

	INSERT INTO DSCHEDULE_HIST(DS_CODE, D_CODE, DEPOSIT_TYPE, 
		CITICASH_AMOUNT, CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, 
		CLIENT_CODE, LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, 
		MOD_NO, IS_AUTH, [FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, 
		CHECKED, FLEXGEN_DATE)
		SELECT DS_CODE, D_CODE, DEPOSIT_TYPE, 
		CITICASH_AMOUNT, CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, 
		CLIENT_CODE, LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, 
		MOD_NO, 1, [FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, 
		CHECKED, FLEXGEN_DATE
		FROM DSCHEDULE
		WHERE DS_CODE=@DS_CODE;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE DSCHEDULE WHERE DS_CODE=@DS_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO DSCHEDULE
		SELECT DS_CODE, D_CODE, DEPOSIT_TYPE, CITICASH_AMOUNT, 
		CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, CLIENT_CODE, 
		LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, MOD_NO, 
		[FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, CHECKED, 
		FLEXGEN_DATE
		FROM DSCHEDULE_HIST 
		WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE DSCHEDULE_HIST WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Jan-13
-- Description:	Remove record from DCollected
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DCollected_Remove]	
	@DS_CODE		varchar(12),
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_NOCHK	numeric(4,0), 
			@TOTAL_CHKAMT	numeric(12,2), 
			@TOTAL_CASHAMT	numeric(12,2),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT DS_CODE from DCOLLECTED
			  WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_NOCHK=TOTAL_NOCHK, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT, @TOTAL_CASHAMT=TOTAL_CASHAMT,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM DCOLLECTED
				WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE DCOLLECTED_HIST WHERE DS_CODE=@DS_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				DCOLLECTED_HIST (DS_CODE,
				TOTAL_NOCHK, TOTAL_CHKAMT, TOTAL_CASHAMT, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@DS_CODE,
				@TOTAL_NOCHK, @TOTAL_CHKAMT, @TOTAL_CASHAMT, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


-----------

			DELETE DSCHEDULE_HIST
				WHERE DS_CODE=@DS_CODE AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO DSCHEDULE_HIST(DS_CODE, D_CODE, DEPOSIT_TYPE, CITICASH_AMOUNT, 
				CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, CLIENT_CODE, 
				LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, 
				MOD_NO, IS_AUTH, [FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, 
				CHECKED, FLEXGEN_DATE)
				SELECT DS_CODE, D_CODE, DEPOSIT_TYPE, CITICASH_AMOUNT,
					CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, CLIENT_CODE, 
					LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, 
					@RET_MOD_NO,0, [FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, 
					CHECKED, FLEXGEN_DATE
				FROM DSCHEDULE
				WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			
-----------
			

			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT DS_CODE from DCOLLECTED_HIST 
					  WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO )
				BEGIN

------------------
					IF @MOD_NO=1
						BEGIN
							IF EXISTS(SELECT ds.DS_CODE,ds.D_CODE,ds.MOD_NO 
										FROM DSCHEDULE_HIST ds 
										INNER JOIN CCASH_HIST cc ON cc.D_CODE=ds.D_CODE
										WHERE ds.IS_AUTH=0 AND ds.MOD_NO=1 
										AND DS_CODE=@DS_CODE)
								BEGIN
									-- child exist
									ROLLBACK TRANSACTION;
									RETURN 10;
								END

							IF EXISTS(SELECT ds.DS_CODE,ds.D_CODE,ds.MOD_NO 
										FROM DSCHEDULE_HIST ds 
										INNER JOIN CSD_HIST cd ON cd.D_CODE=ds.D_CODE
										WHERE ds.IS_AUTH=0 AND ds.MOD_NO=1 
										AND DS_CODE=@DS_CODE)
								BEGIN
									-- child exist
									ROLLBACK TRANSACTION;
									RETURN 10;
								END

						END

--------------------


					DELETE DCOLLECTED_HIST
						WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE DSCHEDULE_HIST 
						WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0 ;
					
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
	
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END


GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 09-Jan-13
-- Description:	Add detail to CSD_DET
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CSDDet_Add]	
	@D_CODE				varchar(12), 
	@SLNO				numeric(3,0), 
	@CHECK_NO			varchar(15), 
	@DRAWER				varchar(50), 
	@DRAWEE_BANK_CODE	varchar(4), 
	@AMOUNT				numeric(12,2), 
	@CUSTOMER_REF		varchar(15), 
	@SLIP_DATE			datetime, 
	@CHECK_DATE			datetime, 
	@DRAWEE_BRANCH		varchar(50),
	@CHECK_REF			varchar(15)	
AS
BEGIN	
	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CSD_DET_HIST(D_CODE, SLNO, CHECK_NO, DRAWER, 
		DRAWEE_BANK_CODE, AMOUNT,CUSTOMER_REF, SLIP_DATE, CHECK_DATE,
		DRAWEE_BRANCH, CHECK_REF,RTN_STATUS,
		MOD_NO,IS_AUTH)
		VALUES(@D_CODE, @SLNO, @CHECK_NO, @DRAWER, 
		@DRAWEE_BANK_CODE, @AMOUNT,@CUSTOMER_REF, @SLIP_DATE, @CHECK_DATE,
		@DRAWEE_BRANCH, @CHECK_REF,'O',
		1,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END



GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 09-Jan-13
-- Description:	update detail to CSD det
-- =============================================

ALTER PROCEDURE [dbo].[CMS_CSDDet_Update]
	@D_CODE				varchar(12), 
	@SLNO				numeric(3,0), 
	@CHECK_NO			varchar(15), 
	@DRAWER				varchar(50), 
	@DRAWEE_BANK_CODE	varchar(4), 
	@AMOUNT				numeric(12,2), 
	@CUSTOMER_REF		varchar(15), 
	@SLIP_DATE			datetime, 
	@CHECK_DATE			datetime, 
	@DRAWEE_BRANCH		varchar(50),
	@CHECK_REF			varchar(15),
	@MOD_NO				int	,
	@RTN_STATUS			char(1),
	@RTN_CODE			varchar(2)
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	INSERT INTO CSD_DET_HIST(D_CODE, SLNO, CHECK_NO, DRAWER, 
		DRAWEE_BANK_CODE, AMOUNT,CUSTOMER_REF, SLIP_DATE, CHECK_DATE,
		DRAWEE_BRANCH, CHECK_REF,RTN_STATUS,
		MOD_NO, IS_AUTH, RTN_CODE)
		VALUES(@D_CODE, @SLNO, @CHECK_NO, @DRAWER, 
		@DRAWEE_BANK_CODE, @AMOUNT,@CUSTOMER_REF, @SLIP_DATE, @CHECK_DATE,
		@DRAWEE_BRANCH, @CHECK_REF,@RTN_STATUS,
		@MOD_NO, 0, @RTN_CODE)

	SELECT @ErrorVar = @@ERROR;

	IF @ErrorVar <> 0
		BEGIN
			RETURN 1;
		END	
	
	RETURN 0;			
	    
END

GO

GRANT EXECUTE ON [dbo].[CMS_CSD_Remove] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 09-Jan-13
-- Description:	Remove record from CSD
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CSD_Remove]	
	@D_CODE		varchar(12),
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @STATUS			char(1),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT D_CODE from CSD
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CSD
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CSD_HIST WHERE D_CODE=@D_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CSD_HIST (D_CODE,				
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@D_CODE,				
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


-----------

			DELETE CSD_DET_HIST
				WHERE D_CODE=@D_CODE AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO CSD_DET_HIST(D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
					AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, 
					DRAWEE_BRANCH, CHECK_REF, RTN_STATUS, 
					MOD_NO, IS_AUTH, RTN_CODE)
				SELECT D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
					AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, 
					DRAWEE_BRANCH, CHECK_REF, RTN_STATUS,
					@RET_MOD_NO,0, RTN_CODE
				FROM CSD_DET
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			
-----------
			

			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT D_CODE from CSD_HIST 
					  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CSD_HIST
						WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE CSD_DET_HIST 
						WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0 ;
					
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
	
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 09-Jan-13
-- Description:	Authorize record to CSD
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CSD_Auth]	
	@D_CODE			varchar(12),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),		
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),
			@LAST_MOD_NO		int,
			@IS_AUTH			bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT D_CODE from CSD_HIST 
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],	
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CSD_HIST 
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CSD_HIST 
				SELECT *,1 FROM CSD
				WHERE D_CODE=@D_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CSD_HIST
				SET [STATUS] = 'O' 
				WHERE D_CODE=@D_CODE
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CSD
				SET				
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE D_CODE=@D_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CSD_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN

			IF NOT EXISTS(SELECT D_CODE FROM DSCHEDULE
				WHERE D_CODE=@D_CODE)
			BEGIN
				-- parent not exist
				ROLLBACK TRANSACTION;
				RETURN 11;
			END
			
			INSERT INTO CSD
				SELECT D_CODE, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CSD_HIST
					WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CSD_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update CSD_DET

	INSERT INTO CSD_DET_HIST(D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, IS_AUTH, RTN_CODE)
		SELECT D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, 1, RTN_CODE
		FROM CSD_DET
		WHERE D_CODE=@D_CODE;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CSD_DET WHERE D_CODE=@D_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CSD_DET(D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, RTN_CODE)
		SELECT D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, RTN_CODE
		FROM CSD_DET_HIST 
		WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CSD_DET_HIST WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END


GO



CREATE TABLE [dbo].[NCOLLECTION](
	[NONZONE_REF] [varchar](7) NOT NULL,
	[REF_DATE] [datetime] NULL,
	[DDREFNO] [varchar](15) NULL,
	[AMOUNT] [numeric](12, 2) NULL,
	[VAT] [numeric](12, 2) NULL,
	[COMMISION] [numeric](12, 2) NULL,
	[POSTAGE_CHARGE] [numeric](12, 2) NULL,
	[INSTRUMENT_EXP] [numeric](12, 2) NULL,	
	[RTN_STATUS] [char](1) NULL,	
	[RTN_CODE] [varchar](2) NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
 PRIMARY KEY(NONZONE_REF))

GO

CREATE TABLE [dbo].[NCOLLECTION_HIST](
	[NONZONE_REF] [varchar](7) NOT NULL,
	[REF_DATE] [datetime] NULL,
	[DDREFNO] [varchar](15) NULL,
	[AMOUNT] [numeric](12, 2) NULL,
	[VAT] [numeric](12, 2) NULL,
	[COMMISION] [numeric](12, 2) NULL,
	[POSTAGE_CHARGE] [numeric](12, 2) NULL,
	[INSTRUMENT_EXP] [numeric](12, 2) NULL,	
	[RTN_STATUS] [char](1) NULL,	
	[RTN_CODE] [varchar](2) NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	[IS_AUTH] bit NOT NULL,
PRIMARY KEY(NONZONE_REF,MOD_NO)
) 

GO

-- =============================================
-- Author:		Fahad Khan
-- Create date: 22-FEB-13
-- Description:	Get detail of CCheck by amount, Status, Drawee bank, branch
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CCheck_GetDetailsByAmntStatus]	
	@DRAWEE_BANK_CODE	varchar(4),
    @LOCATION_CODE    	varchar(4),
    @BRANCH_CODE    	varchar(4)
AS
BEGIN	
	
	SET NOCOUNT ON;
	
	 SELECT cs.*,cl.ACC_NAME,cl.ACC_NO,cl.CITIANY_CHARGE,cl.CITIANY_STD_CHARGE,CITIANY_VAT
     FROM CCHECK cs
     INNER JOIN CLIENT cl ON cs.CLIENT_CODE=cl.CLIENT_CODE
     WHERE cs.DRAWEE_BANK_CODE = @DRAWEE_BANK_CODE AND cs.LOCATION_CODE = @LOCATION_CODE
     AND cs.BRANCH_CODE= @BRANCH_CODE AND cs.RTN_STATUS='O' AND cs.NONZONE_REF > '0'
	
END


GO

GRANT EXECUTE ON [dbo].[CMS_CCheck_GetDetailsByAmntStatus] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Fahad Khan
-- Create date: 19-Feb-13
-- Description:	Add detail to DD_DET
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DD_Add]	
	@D_CODE				varchar(12),
    @SLNO               numeric(3,0),
	@DD_NO 			    varchar(18), 
    @DD_DATE            datetime,
	@AMOUNT			    numeric(12, 2), 
	@DRAWER_BANKCODE	varchar(4), 
	@DRAWER_BRANCHCODE	varchar(4), 
	@DRAWER_LOCATION	varchar(4), 
	@DRAWEE_BRANCH		varchar(25), 
	@NIKBRANCH_CODE		varchar(7),
	@VAT			    numeric(12, 2),
    @COMMISION          numeric(12, 2),
    @POSTAGE_CHARGE     numeric(12, 2),
    @INSTRUMENT_EXP     numeric(12, 2)
AS
BEGIN	
	DECLARE @ErrorVar	int;
--    DECLARE @SLNO		int;
	SET NOCOUNT ON;

--    SELECT @SLNO =(COUNT(D_CODE) + 1) FROM DD_HIST WHERE D_CODE=@D_CODE;
  	
  
    SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
	

	INSERT INTO DD_HIST(D_CODE, SLNO, DD_NO, DD_DATE, 
		AMOUNT,DRAWER_BANKCODE, DRAWER_BRANCHCODE, DRAWER_LOCATION,
		DRAWEE_BRANCH, NIKBRANCH_CODE,VAT,COMMISION,POSTAGE_CHARGE,INSTRUMENT_EXP,
		INPUT_BY,
		INPUT_DATETIME,	INPUT_FROM,MOD_NO, RTN_STATUS,[STATUS],IS_AUTH)
		VALUES(@D_CODE, @SLNO, @DD_NO, @DD_DATE, 
		@AMOUNT, @DRAWER_BANKCODE,@DRAWER_BRANCHCODE, @DRAWER_LOCATION, 
		@DRAWEE_BRANCH,	@NIKBRANCH_CODE, @VAT,@COMMISION,@POSTAGE_CHARGE,@INSTRUMENT_EXP,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'D','U',0);
    

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END

GO

DROP TABLE [DD_CCHECK_HIST];

GO

CREATE TABLE [dbo].[DD_CCHECK_HIST](
	[D_CODE] [varchar](12) NOT NULL,
	[SLNO] numeric(3,0) NOT NULL,
	[NONZONE_REF] [varchar](7) NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[RTN_STATUS] [char](1) NULL,
	[STATUS] [char](1) NULL,
	[IS_AUTH] [bit] NOT NULL,
	PRIMARY KEY([D_CODE],[NONZONE_REF] ,[MOD_NO])
)

GO



-- Author:		Fahad Khan
-- Create date: 25-Feb-13
-- Description:	CCheck table Added by DD Details
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CCheckAddedByDD]
    @D_CODE				varchar(12),
    @SLNO               int,
	@NONZONE_REF	    varchar(7)
AS
BEGIN	
		
	SET NOCOUNT ON;

	INSERT INTO DD_CCHECK_HIST(D_CODE,SLNO,NONZONE_REF,
		INPUT_BY,
		INPUT_DATETIME,INPUT_FROM,MOD_NO,RTN_STATUS,[STATUS],IS_AUTH)
		VALUES(@D_CODE,@SLNO,@NONZONE_REF,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'D','U',0);
	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_CCheckAddedByDD] TO [ccms_sp_only]

GO


DROP TABLE [DD_NCOLLECTION_HIST]

GO

CREATE TABLE [dbo].[DD_NCOLLECTION_HIST](
	[D_CODE] [varchar](12) NOT NULL,
	[SLNO] numeric(3,0) NOT NULL,
	[NONZONE_REF] [varchar](7) NOT NULL,
	[AMOUNT] [numeric](12, 2) NULL,	
	[VAT] [numeric](12, 2) NULL,
	[COMMISION] [numeric](12, 2) NULL,
	[POSTAGE_CHARGE] [numeric](12, 2) NULL,
	[INSTRUMENT_EXP] [numeric](12, 2) NULL,	
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[RTN_STATUS] [char](1) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	[IS_AUTH] [bit] NOT NULL,
	PRIMARY KEY([D_CODE],[NONZONE_REF],[MOD_NO])
)

GO

-- Author:		Fahad Khan
-- Create date: 25-Feb-13
-- Description:	CCheck table ADD by DD Details
-- =============================================
CREATE PROCEDURE [dbo].[CMS_NCollectionAddedByDD]
    @D_CODE				varchar(12),
    @SLNO               numeric(3,0),
	@NONZONE_REF	    varchar(7),
    @AMOUNT			    numeric(12, 2), 	
    @VAT			    numeric(12, 2), 
	@COMMISION	        numeric(12, 2), 
    @POSTAGE_CHARGE	    numeric(12, 2),
    @INSTRUMENT_EXP	    numeric(12, 2) 
    
AS
BEGIN	
		
	SET NOCOUNT ON;

	INSERT INTO DD_NCOLLECTION_HIST(D_CODE, SLNO, NONZONE_REF, AMOUNT, VAT, 
		COMMISION, POSTAGE_CHARGE, INSTRUMENT_EXP, 
		INPUT_BY, 
		INPUT_DATETIME, INPUT_FROM, MOD_NO, RTN_STATUS, [STATUS], IS_AUTH)
        VALUES(@D_CODE,@SLNO,@NONZONE_REF,@AMOUNT,@VAT,
		@COMMISION,@POSTAGE_CHARGE,@INSTRUMENT_EXP,
		substring(suser_name(),charindex('\',suser_name())+1,20),
        GETDATE(),HOST_NAME(),1,'D','U',0);
	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_NCollectionAddedByDD] TO [ccms_sp_only]

GO


-- Author:		Fahad Khan
-- Create date: 25-Feb-13
-- Description:	Get detail of DD
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DD_GetDetail]	
	@D_CODE	varchar(12)
AS
BEGIN	
	
	SET NOCOUNT ON;

	SELECT dm.*,bn.BANK_NAME,br.BRANCH_NAME,lc.LOCATION_NAME FROM 
	(SELECT d.* FROM 
		(SELECT *,'IS_AUTH'=1 FROM DD WHERE D_CODE=@D_CODE
		UNION
		SELECT *  FROM DD_HIST WHERE D_CODE=@D_CODE
		) as d
		WHERE d.MOD_NO=(SELECT MAX(MOD_NO) FROM (
			SELECT SLNO,MOD_NO FROM DD WHERE D_CODE=@D_CODE
			UNION
			SELECT SLNO,MOD_NO FROM DD_HIST where D_CODE=@D_CODE) as m
			WHERE m.SLNO=d.SLNO)
		) as dm
	INNER JOIN BANK as bn ON dm.DRAWER_BANKCODE=bn.BANK_CODE 
    INNER JOIN BRANCH as br ON br.BRANCH_CODE= dm.DRAWER_BRANCHCODE
    INNER JOIN LOCATION as lc ON lc.LOCATION_CODE= dm.DRAWER_LOCATION
	ORDER BY dm.SLNO	

END

GO

GRANT EXECUTE ON [dbo].CMS_DD_Add TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Fahad Khan
-- Create date: 28-02-13
-- Description:	Get detail of CCheck by DD table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_DD_CCheck_GetDetail]	
	@D_CODE	        varchar(12),	
	@SLNO	        numeric(3,0),
    @MOD_NO         int
AS
BEGIN	
	
	SET NOCOUNT ON;

		SELECT d.*,c.CHECK_NO,c.AMOUNT,c.CHECK_REF,cl.ACC_NAME,	cl.ACC_NO,
			cl.CITIANY_CHARGE,cl.CITIANY_STD_CHARGE,cl.CITIANY_VAT,IS_AUTH 
			FROM DD_CCHECK_HIST d
			INNER JOIN CCHECK c ON d.NONZONE_REF = c.NONZONE_REF 
			INNER JOIN CLIENT cl ON c.CLIENT_CODE=cl.CLIENT_CODE
			WHERE d.D_CODE=@D_CODE AND d.SLNO=@SLNO AND d.MOD_NO=@MOD_NO
	
END

GO

GRANT EXECUTE ON [dbo].[CMS_DD_CCheck_GetDetail] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Fahad Khan
-- Create date: 02-Mar-13
-- Description:	Get detail of DD by Code
-- =============================================
CREATE PROCEDURE [dbo].[CMS_DD_GetDetailByCode]	
	@D_CODE		varchar(12),
    @SLNO		numeric(3,0),	
	@MOD_NO		int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT D_CODE 
			   FROM DD WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
			FROM DD 
			WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
			FROM DD_HIST
			WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO
		END
END


GO

GRANT EXECUTE ON [dbo].[CMS_DD_GetDetailByCode] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Fahad Khan
-- Create date: 2-Mar-13
-- Description:	Get Total # of modification of DD
-- =============================================
CREATE PROCEDURE [dbo].[CMS_DD_GetMaxMod]
	@D_CODE			varchar(12),
	@SLNO			numeric(3,0)
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM DD_HIST 
		WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM DD
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END

GO

GRANT EXECUTE ON [dbo].[CMS_DD_GetMaxMod] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Fahad Khan
-- Create date: 07-March-13
-- Description:	Add detail to DD
-- =============================================
CREATE PROCEDURE [dbo].[CMS_DD_Update]	
	@D_CODE				varchar(12),
    @SLNO               numeric(3,0),
    @MOD_NO             int,
	@DD_NO 			    varchar(18), 
    @DD_DATE            datetime,
	@AMOUNT			    numeric(12, 2), 
	@DRAWER_BANKCODE	varchar(4), 
	@DRAWER_BRANCHCODE	varchar(4), 
	@DRAWER_LOCATION	varchar(4), 
	@DRAWEE_BRANCH		varchar(25), 
	@NIKBRANCH_CODE		varchar(7),
	@VAT			    numeric(12, 2),
    @COMMISION          numeric(12, 2),
    @POSTAGE_CHARGE     numeric(12, 2),
    @INSTRUMENT_EXP     numeric(12, 2),
	@RET_MOD_NO			int output
AS
BEGIN	
	DECLARE @ErrorVar	int;

	SET NOCOUNT ON;

IF EXISTS(SELECT D_CODE FROM DD 
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE DD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN					
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO DD_HIST(D_CODE, SLNO, DD_NO, DD_DATE, 
				AMOUNT,DRAWER_BANKCODE, DRAWER_BRANCHCODE, DRAWER_LOCATION,
				DRAWEE_BRANCH, NIKBRANCH_CODE,VAT,COMMISION,POSTAGE_CHARGE,
				INSTRUMENT_EXP,
				INPUT_BY,
				INPUT_DATETIME,INPUT_FROM,MOD_NO,RTN_STATUS,[STATUS],IS_AUTH)
				VALUES(@D_CODE, @SLNO, @DD_NO, @DD_DATE, 
				@AMOUNT, @DRAWER_BANKCODE,@DRAWER_BRANCHCODE, @DRAWER_LOCATION, 
				@DRAWEE_BRANCH,	@NIKBRANCH_CODE, @VAT,@COMMISION,@POSTAGE_CHARGE,
				@INSTRUMENT_EXP,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'D','U',0);
    
			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END				
			
			DELETE DD_CCHECK_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END

			DELETE DD_NCOLLECTION_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT D_CODE from DD_HIST 
						WHERE D_CODE=@D_CODE AND SLNO=@SLNO 
						AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE DD_HIST WHERE D_CODE=@D_CODE 
						AND SLNO=@SLNO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END
				

					INSERT INTO DD_HIST(D_CODE, SLNO, DD_NO, DD_DATE, 
						AMOUNT,DRAWER_BANKCODE, DRAWER_BRANCHCODE, DRAWER_LOCATION,
						DRAWEE_BRANCH, NIKBRANCH_CODE,VAT,COMMISION,POSTAGE_CHARGE,
						INSTRUMENT_EXP,
						INPUT_BY,
						INPUT_DATETIME,INPUT_FROM,MOD_NO,RTN_STATUS,[STATUS],IS_AUTH)
						VALUES(@D_CODE, @SLNO, @DD_NO, @DD_DATE, 
						@AMOUNT, @DRAWER_BANKCODE,@DRAWER_BRANCHCODE, @DRAWER_LOCATION, 
						@DRAWEE_BRANCH,	@NIKBRANCH_CODE, @VAT,@COMMISION,@POSTAGE_CHARGE,
						@INSTRUMENT_EXP,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'D','U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;

					DELETE DD_CCHECK_HIST
						WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END

					DELETE DD_NCOLLECTION_HIST
						WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END
					
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					
					RETURN 4;
				END

		END

  

		   
END


GO


GRANT EXECUTE ON [dbo].[CMS_DD_Update] TO [ccms_sp_only]


GO

-- =============================================
-- Author:		Fahad Khan
-- Create date: 07-Mar-13
-- Description:	CCheck table Update by DD Details
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CCheckUpdateByDD]
	@D_CODE			varchar(12),
	@SLNO			numeric(3,0),
	@MOD_NO			int,
	@NONZONE_REF	varchar(7)
AS
BEGIN	
		
	SET NOCOUNT ON;

	INSERT INTO DD_CCHECK_HIST(D_CODE,SLNO,NONZONE_REF,
		INPUT_BY,
		INPUT_DATETIME,INPUT_FROM,MOD_NO,RTN_STATUS,[STATUS],IS_AUTH)
		VALUES(@D_CODE,@SLNO,@NONZONE_REF,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),@MOD_NO,'D','U',0);	
	   
END



GO


-- =============================================
-- Author:		Fahad Khan
-- Create date: 07-Mar-13
-- Description:	CCheck table Update by DD Details
-- =============================================
ALTER PROCEDURE [dbo].[CMS_NCollectionUpdateByDD]
    @D_CODE				varchar(12),
    @SLNO               numeric(3,0),
    @MOD_NO             int,
	@NONZONE_REF	    varchar(7),
    @AMOUNT			    numeric(12, 2), 	
    @VAT			    numeric(12, 2), 
	@COMMISION	        numeric(12, 2), 
    @POSTAGE_CHARGE	    numeric(12, 2),
    @INSTRUMENT_EXP	    numeric(12, 2)    
AS
BEGIN	
		
	SET NOCOUNT ON;

	INSERT INTO DD_NCOLLECTION_HIST(D_CODE,SLNO,NONZONE_REF,AMOUNT,VAT,
		COMMISION,POSTAGE_CHARGE,INSTRUMENT_EXP,
		INPUT_BY,
		INPUT_DATETIME,
        INPUT_FROM,MOD_NO,RTN_STATUS,[STATUS],IS_AUTH)
		VALUES(@D_CODE,@SLNO,@NONZONE_REF,@AMOUNT,@VAT,
		@COMMISION,@POSTAGE_CHARGE,@INSTRUMENT_EXP,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),@MOD_NO,'D','U',0);
		   
END

GO



-- =============================================
-- Author:		Fahad Khan
-- Create date: 02-Mar-13
-- Description:	Authorize record to DD
-- =============================================
CREATE PROCEDURE [dbo].[CMS_DD_Auth]	
	@D_CODE			varchar(12),	
	@MOD_NO			int,
    @SLNO           numeric(3,0),
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),
			@RTN_STATUS			char(1),
			@CC_RTN_STATUS		char(1),
			@DD_DATE			datetime,					
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),
			@LAST_MOD_NO		int,
			@NONZONE_REF		varchar(7),
			@CLIENT_CODE		varchar(6),
			@DLOCATION_CODE		varchar(4),
			@CUSTOMER_REF		varchar(15),
			@SLIP_DATE			datetime,
			@VALUE_DATE			datetime,
			@CHECK_NO			varchar(15),
			@AMOUNT				numeric(12, 2),
			@CHECK_DATE			datetime,
			@CHECK_TYPE			varchar(7),
			@DRAWER				varchar(50),
			@DRAWER_BANKCODE	varchar(4),
			@DRAWEE_BANK_CODE	varchar(4),
			@DRAWER_BRANCHCODE	varchar(4),
			@LOCATION_CODE		varchar(4),
			@DRAWER_LOCATION	varchar(4),
			@NIKBRANCH_CODE		varchar(7),
			@DRAWEE_BRANCH		varchar(25),
			@BRANCH_CODE		varchar(4),
			@CHECK_REF			varchar(15),
			@VAT				numeric(12, 2),
			@COMMISION			numeric(12, 2),
			@POSTAGE_CHARGE		numeric(12, 2),
			@INSTRUMENT_EXP		numeric(12, 2),
			@CHECKREF			varchar(15),
			@IS_AUTH			bit,	
			@DEPO_CODE			varchar(12)	,
			@CC_MOD_NO			int,
			@DN_CODE			varchar(12),
			@DN_SLNO			int,
			--@DD_MOD				int,
			@REF_DATE			datetime
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT D_CODE from DD_HIST 
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO AND SLNO=@SLNO)
		BEGIN
			SELECT @DD_DATE=DD_DATE,@AMOUNT=AMOUNT,@DRAWER_BANKCODE=DRAWER_BANKCODE,
                @DRAWER_BRANCHCODE=DRAWER_BRANCHCODE,@DRAWER_LOCATION=DRAWER_LOCATION,
                @DRAWEE_BRANCH=DRAWEE_BRANCH,@NIKBRANCH_CODE=NIKBRANCH_CODE,@VAT=VAT,
                @COMMISION=COMMISION,@POSTAGE_CHARGE=POSTAGE_CHARGE,@INSTRUMENT_EXP=INSTRUMENT_EXP,				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH, @RTN_STATUS=RTN_STATUS, @STATUS=[STATUS]
				FROM DD_HIST 
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO AND SLNO=@SLNO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO DD_HIST 
				SELECT *,1 FROM DD
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE DD_HIST
				SET [STATUS] = 'O' 
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE DD
				SET	DD_DATE=@DD_DATE,AMOUNT=@AMOUNT,DRAWER_BANKCODE=@DRAWER_BANKCODE,
                DRAWER_BRANCHCODE=@DRAWER_BRANCHCODE,DRAWER_LOCATION=@DRAWER_LOCATION,
                DRAWEE_BRANCH=@DRAWEE_BRANCH,NIKBRANCH_CODE=@NIKBRANCH_CODE,VAT=@VAT,
                COMMISION=@COMMISION,POSTAGE_CHARGE=@POSTAGE_CHARGE,INSTRUMENT_EXP=@INSTRUMENT_EXP,			
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,RTN_STATUS =@RTN_STATUS,[STATUS]=@STATUS
			WHERE D_CODE=@D_CODE AND SLNO=@SLNO;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE DD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO
				AND IS_AUTH=0;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO DD
			    SELECT D_CODE,SLNO,DD_NO,DD_DATE,AMOUNT,DRAWER_BANKCODE,
					DRAWER_BRANCHCODE, DRAWER_LOCATION,DRAWEE_BRANCH,
					NIKBRANCH_CODE,VAT,COMMISION,POSTAGE_CHARGE,INSTRUMENT_EXP,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, RTN_STATUS, 'L' 
				FROM DD_HIST
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO AND SLNO=@SLNO;
		
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE DD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END;

    -- Update CCHECK TOTAL AND CCHECK record

	DECLARE tempRows CURSOR FOR
        SELECT DISTINCT D_CODE 
		FROM CCHECK 
		WHERE NONZONE_REF IN 
			(SELECT NONZONE_REF 
			FROM DD_CCHECK_HIST 
			WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO)
 
	OPEN tempRows;
	
	FETCH NEXT FROM tempRows
		INTO @DEPO_CODE ;

	WHILE @@FETCH_STATUS = 0
	BEGIN

		DELETE CCHECKTOTAL_HIST
			WHERE D_CODE=@DEPO_CODE AND IS_AUTH=0;
                
		INSERT INTO CCHECKTOTAL_HIST 
			SELECT D_CODE,TOTAL_CHKNO,TOTAL_CHKAMT,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,
				AUTH_BY,AUTH_DATETIME,AUTH_FROM,MOD_NO,[STATUS],1
				FROM CCHECKTOTAL
				WHERE D_CODE =@DEPO_CODE

		IF @ErrorVar1 <> 0
			BEGIN
				ROLLBACK TRANSACTION;
				RETURN 1;
			END

		UPDATE CCHECKTOTAL_HIST 
			SET [STATUS] = 'O' 
			WHERE D_CODE=@DEPO_CODE AND [STATUS] = 'L';

		SELECT @ErrorVar1 = @@error;

		IF @ErrorVar1 <> 0
			BEGIN
				ROLLBACK TRANSACTION;
				RETURN 1;
			END

		UPDATE CCHECKTOTAL 
			SET INPUT_BY=@INPUT_BY,INPUT_DATETIME=@INPUT_DATETIME,
			INPUT_FROM=@INPUT_FROM,
			AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
			AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(), MOD_NO=MOD_NO+1 
			WHERE D_CODE=@DEPO_CODE;

		SELECT @ErrorVar1 = @@error;

		IF @ErrorVar1 <> 0
			BEGIN
				ROLLBACK TRANSACTION;
				RETURN 1;
			END
            
		INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
			CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, CHECK_DATE,
			CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, 
			CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, IS_AUTH, 
			REMINDER_DATE, REMINDER_NO, RTN_CODE)
		    SELECT SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
			CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, CHECK_DATE, 
			CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, 
			CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO,1, 
			REMINDER_DATE, REMINDER_NO, RTN_CODE 
			FROM CCHECK
			WHERE D_CODE=@DEPO_CODE;

		SELECT @ErrorVar1 = @@error;

		IF @ErrorVar1 <> 0
			BEGIN
				ROLLBACK TRANSACTION;
				RETURN 1;
			END

		UPDATE CCHECK SET MOD_NO=MOD_NO+1 
			WHERE D_CODE=@DEPO_CODE;

		SELECT @ErrorVar1 = @@error;

		IF @ErrorVar1 <> 0
			BEGIN
				ROLLBACK TRANSACTION;
				RETURN 1;
			END

		FETCH NEXT FROM tempRows
			INTO @DEPO_CODE;
            
	END

    CLOSE tempRows;     
    DEALLOCATE tempRows;
   
   --UPDATE CCHECK RECORD

	DECLARE tempRows1 CURSOR FOR
		SELECT NONZONE_REF,RTN_STATUS 
			FROM DD_CCHECK_HIST 
			WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
 
	OPEN tempRows1;

	FETCH NEXT FROM tempRows1
		INTO @NONZONE_REF,@CC_RTN_STATUS;
 
	WHILE @@FETCH_STATUS = 0
	BEGIN

		UPDATE CCHECK SET RTN_STATUS=@CC_RTN_STATUS WHERE NONZONE_REF=@NONZONE_REF;

		UPDATE DD_CCHECK_HIST 
			SET AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
			AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(), STATUS='O',IS_AUTH=1 
			WHERE NONZONE_REF=@NONZONE_REF AND SLNO=@SLNO AND MOD_NO=@MOD_NO;

		FETCH NEXT FROM tempRows1
			INTO @NONZONE_REF,@CC_RTN_STATUS;
            
	END

	CLOSE tempRows1;
	DEALLOCATE tempRows1;

      -- Update Normal Collection Table
	DECLARE newRows CURSOR FOR
		SELECT NONZONE_REF, AMOUNT, VAT, COMMISION, POSTAGE_CHARGE, 
			INSTRUMENT_EXP, INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
			RTN_STATUS
			FROM DD_NCOLLECTION_HIST 
			WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
 
	OPEN newRows;
	
	FETCH NEXT FROM newRows
		INTO @NONZONE_REF, @AMOUNT, @VAT, @COMMISION, @POSTAGE_CHARGE, 
			@INSTRUMENT_EXP, @INPUT_BY, @INPUT_DATETIME, @INPUT_FROM, 
			@RTN_STATUS;
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO NCOLLECTION_HIST
			SELECT NONZONE_REF, REF_DATE, DDREFNO, AMOUNT, VAT, COMMISION, 
			POSTAGE_CHARGE, INSTRUMENT_EXP, RTN_STATUS, RTN_CODE, INPUT_BY, 
			INPUT_DATETIME, INPUT_FROM, AUTH_BY, AUTH_DATETIME, AUTH_FROM, 
			MOD_NO, [STATUS], 1
			FROM NCOLLECTION
			WHERE NONZONE_REF=@NONZONE_REF;	

		UPDATE NCOLLECTION 
			SET DDREFNO=@D_CODE+ RIGHT(('000' + CONVERT(VARCHAR,@SLNO)),3),
			AMOUNT=@AMOUNT,VAT=@VAT,COMMISION=@COMMISION,
			POSTAGE_CHARGE=@POSTAGE_CHARGE,INSTRUMENT_EXP=@INSTRUMENT_EXP,
			INPUT_BY=@INPUT_BY,INPUT_DATETIME=@INPUT_DATETIME,INPUT_FROM=@INPUT_FROM,
			AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
			AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
			MOD_NO=MOD_NO+1,RTN_STATUS = @RTN_STATUS, [STATUS]='L'
			WHERE NONZONE_REF=@NONZONE_REF; 

		UPDATE NCOLLECTION_HIST SET [STATUS] = 'O' 
			WHERE NONZONE_REF=@NONZONE_REF 
			AND [STATUS] = 'L'; 

		UPDATE DD_NCOLLECTION_HIST 
			SET AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
			AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(), [STATUS]='O',IS_AUTH=1 
			WHERE NONZONE_REF=@NONZONE_REF AND SLNO=@SLNO AND MOD_NO=@MOD_NO;

		FETCH NEXT FROM newRows
			INTO @NONZONE_REF, @AMOUNT, @VAT, @COMMISION, @POSTAGE_CHARGE, 
				@INSTRUMENT_EXP, @INPUT_BY, @INPUT_DATETIME, @INPUT_FROM, 
				@RTN_STATUS;
            
	END

	CLOSE newRows;
	DEALLOCATE newRows;

	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END


GO

GRANT EXECUTE ON [dbo].[CMS_DD_Auth] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 09-Mar-13
-- Description:	Remove detail from DD 
-- =============================================
CREATE PROCEDURE [dbo].[CMS_DD_Remove]	
	@D_CODE		varchar(12),
	@SLNO		numeric(3,0),
	@MOD_NO		int,
	@RET_MOD_NO	int output
AS
BEGIN
	DECLARE	
		@STATUS				char(1),		
		@DD_NO 			    varchar(18), 
		@DD_DATE            datetime,
		@AMOUNT			    numeric(12, 2), 
		@DRAWER_BANKCODE	varchar(4), 
		@DRAWER_BRANCHCODE	varchar(4), 
		@DRAWER_LOCATION	varchar(4), 
		@DRAWEE_BRANCH		varchar(25), 
		@NIKBRANCH_CODE		varchar(7),
		@VAT			    numeric(12, 2),
		@COMMISION          numeric(12, 2),
		@POSTAGE_CHARGE     numeric(12, 2),
		@INSTRUMENT_EXP     numeric(12, 2),
		@RTN_STATUS			char(1);

	DECLARE 
		@ErrorVar	int;

	SET NOCOUNT ON;
  	
	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT D_CODE from DD
			  WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@DD_NO=DD_NO, @DD_DATE=DD_DATE, @AMOUNT=AMOUNT, @DRAWER_BANKCODE=DRAWER_BANKCODE, 
				@DRAWER_BRANCHCODE=DRAWER_BRANCHCODE, @DRAWER_LOCATION=DRAWER_LOCATION, @DRAWEE_BRANCH=DRAWEE_BRANCH, 
				@NIKBRANCH_CODE=NIKBRANCH_CODE, @VAT=VAT, @COMMISION=COMMISION, @POSTAGE_CHARGE=POSTAGE_CHARGE, 
				@INSTRUMENT_EXP=INSTRUMENT_EXP,  @RTN_STATUS=RTN_STATUS				
				FROM DD
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE DD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				DD_HIST (D_CODE, SLNO, DD_NO, DD_DATE, AMOUNT, DRAWER_BANKCODE, 
				DRAWER_BRANCHCODE, DRAWER_LOCATION, DRAWEE_BRANCH, NIKBRANCH_CODE, 
				VAT, COMMISION, POSTAGE_CHARGE, INSTRUMENT_EXP, 
				INPUT_BY, 
				INPUT_DATETIME, INPUT_FROM, MOD_NO, RTN_STATUS, [STATUS], IS_AUTH)
				VALUES(@D_CODE, @SLNO, @DD_NO, @DD_DATE, @AMOUNT, @DRAWER_BANKCODE, 
				@DRAWER_BRANCHCODE, @DRAWER_LOCATION, @DRAWEE_BRANCH, @NIKBRANCH_CODE, 
				@VAT, @COMMISION, @POSTAGE_CHARGE, @INSTRUMENT_EXP,				
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO,'R','D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


-----------

			DELETE DD_CCHECK_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO DD_CCHECK_HIST(D_CODE, SLNO, NONZONE_REF, 
				INPUT_BY, 
				INPUT_DATETIME, INPUT_FROM, MOD_NO, RTN_STATUS, [STATUS], IS_AUTH)
				SELECT D_CODE, SLNO, NONZONE_REF, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 'O', 'U', 0
				FROM DD_CCHECK_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			
-----------

			DELETE DD_NCOLLECTION_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO DD_NCOLLECTION_HIST(D_CODE, SLNO, NONZONE_REF, AMOUNT, 
				VAT, COMMISION, POSTAGE_CHARGE, INSTRUMENT_EXP, 
				INPUT_BY, 
				INPUT_DATETIME, INPUT_FROM, MOD_NO, RTN_STATUS, [STATUS], IS_AUTH)
				SELECT D_CODE, SLNO, NONZONE_REF, AMOUNT, 
				VAT, COMMISION, POSTAGE_CHARGE, INSTRUMENT_EXP,
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 'O', 'U', 0
				FROM DD_NCOLLECTION_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

-------
			

			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT D_CODE from DD_HIST 
					  WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE DD_HIST
						WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE DD_CCHECK_HIST
						WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0 ;
										
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					DELETE DD_NCOLLECTION_HIST
						WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0 ;

					SELECT @ErrorVar = @@error;

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
	
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		

  
	   
END

GO



GRANT EXECUTE ON [dbo].[CMS_DD_Remove] TO [ccms_sp_only]


GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 09-Mar-13
-- Description:	update DD status to paid 
-- =============================================
CREATE PROCEDURE [dbo].[CMS_DD_Paid]	
	@D_CODE		varchar(12),
	@SLNO		numeric(3,0),
	@MOD_NO		int,
	@RET_MOD_NO	int output
AS
BEGIN
	DECLARE	
		@STATUS				char(1),		
		@DD_NO 			    varchar(18), 
		@DD_DATE            datetime,
		@AMOUNT			    numeric(12, 2), 
		@DRAWER_BANKCODE	varchar(4), 
		@DRAWER_BRANCHCODE	varchar(4), 
		@DRAWER_LOCATION	varchar(4), 
		@DRAWEE_BRANCH		varchar(25), 
		@NIKBRANCH_CODE		varchar(7),
		@VAT			    numeric(12, 2),
		@COMMISION          numeric(12, 2),
		@POSTAGE_CHARGE     numeric(12, 2),
		@INSTRUMENT_EXP     numeric(12, 2),
		@RTN_STATUS			char(1);

	DECLARE 
		@ErrorVar	int;

	SET NOCOUNT ON;
  	
	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT D_CODE from DD
			  WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@DD_NO=DD_NO, @DD_DATE=DD_DATE, @AMOUNT=AMOUNT, @DRAWER_BANKCODE=DRAWER_BANKCODE, 
				@DRAWER_BRANCHCODE=DRAWER_BRANCHCODE, @DRAWER_LOCATION=DRAWER_LOCATION, @DRAWEE_BRANCH=DRAWEE_BRANCH, 
				@NIKBRANCH_CODE=NIKBRANCH_CODE, @VAT=VAT, @COMMISION=COMMISION, @POSTAGE_CHARGE=POSTAGE_CHARGE, 
				@INSTRUMENT_EXP=INSTRUMENT_EXP,  @RTN_STATUS=RTN_STATUS				
				FROM DD
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			
			IF (@RTN_STATUS = 'P')
				BEGIN
					-- already paid
					ROLLBACK TRANSACTION;
					RETURN 9;
				END;

			DELETE DD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				DD_HIST (D_CODE, SLNO, DD_NO, DD_DATE, AMOUNT, DRAWER_BANKCODE, 
				DRAWER_BRANCHCODE, DRAWER_LOCATION, DRAWEE_BRANCH, NIKBRANCH_CODE, 
				VAT, COMMISION, POSTAGE_CHARGE, INSTRUMENT_EXP, 
				INPUT_BY, 
				INPUT_DATETIME, INPUT_FROM, MOD_NO, RTN_STATUS, [STATUS], IS_AUTH)
				VALUES(@D_CODE, @SLNO, @DD_NO, @DD_DATE, @AMOUNT, @DRAWER_BANKCODE, 
				@DRAWER_BRANCHCODE, @DRAWER_LOCATION, @DRAWEE_BRANCH, @NIKBRANCH_CODE, 
				@VAT, @COMMISION, @POSTAGE_CHARGE, @INSTRUMENT_EXP,				
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO,'P','U', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


-----------

			DELETE DD_CCHECK_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO DD_CCHECK_HIST(D_CODE, SLNO, NONZONE_REF, 
				INPUT_BY, 
				INPUT_DATETIME, INPUT_FROM, MOD_NO, RTN_STATUS, [STATUS], IS_AUTH)
				SELECT D_CODE, SLNO, NONZONE_REF, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 'P', 'U', 0
				FROM DD_CCHECK_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			
-----------

			DELETE DD_NCOLLECTION_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO DD_NCOLLECTION_HIST(D_CODE, SLNO, NONZONE_REF, AMOUNT, 
				VAT, COMMISION, POSTAGE_CHARGE, INSTRUMENT_EXP, 
				INPUT_BY, 
				INPUT_DATETIME, INPUT_FROM, MOD_NO, RTN_STATUS, [STATUS], IS_AUTH)
				SELECT D_CODE, SLNO, NONZONE_REF, AMOUNT, 
				VAT, COMMISION, POSTAGE_CHARGE, INSTRUMENT_EXP,
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 'P', 'U', 0
				FROM DD_NCOLLECTION_HIST
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

-------
			

			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	
	ROLLBACK TRANSACTION;
	RETURN 4; 
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_DD_Paid] TO [ccms_sp_only]

GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Jan-13
-- Description:	Get detail of CCHECK by check no
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CCheck_GetDetailByCheckNo]	
	@CHECK_NO	varchar(15)
AS
BEGIN	
	
	SET NOCOUNT ON;

	SELECT cc.* ,
		cl.ACC_NAME,cl.ACC_NO,
		b.BANK_NAME,br.BRANCH_NAME
	FROM CCHECK cc
		LEFT OUTER JOIN CLIENT cl
		ON cl.CLIENT_CODE=cc.CLIENT_CODE		
		LEFT OUTER JOIN BANK b
		ON b.BANK_CODE=cc.DRAWEE_BANK_CODE
		LEFT OUTER JOIN BRANCH br
		ON br.BRANCH_CODE=cc.BRANCH_CODE		
	WHERE cc.CHECK_NO=@CHECK_NO
	ORDER BY D_CODE

END

GO

GRANT EXECUTE ON [dbo].[CMS_CCheck_GetDetailByCheckNo] TO [ccms_sp_only]

GO

-- =============================================
-- Author:		Fahad Khan
-- Create date: 10-Mar-13
-- Description:	Get Total # of modification of Normal Collection Table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_NCollection_GetMaxMod]	
	@NONZONE_REF	varchar(7)	
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM NCOLLECTION_HIST 
		WHERE NONZONE_REF=@NONZONE_REF AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM NCOLLECTION 
				WHERE NONZONE_REF=@NONZONE_REF;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END

GO

GRANT EXECUTE ON [dbo].[CMS_NCollection_GetMaxMod] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 10-Mar-13
-- Description:	Get detail of NCollection table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_NCollection_GetDetail]	
	@NONZONE_REF	varchar(7),	
	@MOD_NO			int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT NONZONE_REF 
			   FROM NCOLLECTION WHERE NONZONE_REF=@NONZONE_REF AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT n.*,'IS_AUTH'=1,r.REJECT_REASON
			FROM NCOLLECTION n
			LEFT OUTER JOIN RETURN_REJECT r
			ON r.REJECT_CODE=n.RTN_CODE
			WHERE n.NONZONE_REF=@NONZONE_REF AND n.MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT nh.*,r.REJECT_REASON 
			FROM NCOLLECTION_HIST nh
			LEFT OUTER JOIN RETURN_REJECT r
			ON r.REJECT_CODE=nh.RTN_CODE
			WHERE nh.NONZONE_REF=@NONZONE_REF AND nh.MOD_NO = @MOD_NO
		END
END

GO


GRANT EXECUTE ON [dbo].[CMS_NCollection_GetDetail] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Jan-13
-- Description:	Get detail of CCHECK by nonzone_ref
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CCheck_GetDetailByRefNo]	
	@NONZONE_REF	varchar(7)
AS
BEGIN	
	
	SET NOCOUNT ON;

	SELECT cc.* ,
		cl.ACC_NAME,cl.ACC_NO,
		b.BANK_NAME,br.BRANCH_NAME
	FROM CCHECK cc
		LEFT OUTER JOIN CLIENT cl
		ON cl.CLIENT_CODE=cc.CLIENT_CODE		
		LEFT OUTER JOIN BANK b
		ON b.BANK_CODE=cc.DRAWEE_BANK_CODE
		LEFT OUTER JOIN BRANCH br
		ON br.BRANCH_CODE=cc.BRANCH_CODE		
	WHERE cc.NONZONE_REF=@NONZONE_REF

END

GO


GRANT EXECUTE ON [dbo].[CMS_CCheck_GetDetailByRefNo] TO [ccms_sp_only]

GO

CREATE TABLE [dbo].[NCOLLECTION_CCHECK_HIST](	
	[NONZONE_REF] [varchar](7) NOT NULL,	
	[MOD_NO] [nchar](10) NOT NULL,
	[RTN_STATUS] [char](1) NOT NULL,
	[RTN_CODE]	varchar(2) NULL,	
	[IS_AUTH] [bit] NOT NULL,
PRIMARY KEY([NONZONE_REF],[MOD_NO] ))


GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 10-Mar-13
-- Description:	Update return Of Ncollection 
-- =============================================
CREATE PROCEDURE [dbo].[CMS_NCollection_Update]	
	@NONZONE_REF	varchar(7),
	@MOD_NO			int,
	@RTN_CODE		varchar(2),
	@RET_MOD_NO		int output    
AS
BEGIN	
	DECLARE @ErrorVar	int,	
    @AMOUNT			    numeric(12, 2), 
	@REF_DATE	        datetime,
    @VAT			    numeric(12, 2), 
	@COMMISION	        numeric(12, 2), 
    @POSTAGE_CHARGE	    numeric(12, 2),
    @INSTRUMENT_EXP	    numeric(12, 2),
    @DDREFNO            varchar(15),
	@RTN_STATUS			char(1);

	SET NOCOUNT ON;

-------------

	IF EXISTS(SELECT NONZONE_REF FROM NCOLLECTION 
				WHERE NONZONE_REF=@NONZONE_REF AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @REF_DATE=REF_DATE,@DDREFNO=DDREFNO,@AMOUNT=AMOUNT,
				@VAT=VAT,@COMMISION=COMMISION,@POSTAGE_CHARGE=POSTAGE_CHARGE,
				@INSTRUMENT_EXP=INSTRUMENT_EXP,@RTN_STATUS=RTN_STATUS
				FROM NCOLLECTION
				WHERE NONZONE_REF =@NONZONE_REF

			IF @RTN_STATUS<>'O'
				BEGIN
					RETURN 1;
				END

			DELETE NCOLLECTION_HIST WHERE NONZONE_REF=@NONZONE_REF AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN			
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO NCOLLECTION_HIST(NONZONE_REF, REF_DATE, DDREFNO, AMOUNT, 
				VAT, COMMISION, POSTAGE_CHARGE, INSTRUMENT_EXP, RTN_STATUS, 
				RTN_CODE, 
				INPUT_BY, 
				INPUT_DATETIME, INPUT_FROM, MOD_NO, [STATUS], IS_AUTH)				
				VALUES(@NONZONE_REF, @REF_DATE, @DDREFNO, @AMOUNT, 
				@VAT, @COMMISION, @POSTAGE_CHARGE, @INSTRUMENT_EXP, 'R', 
				@RTN_CODE,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN					
					RETURN 1;
				END				

			DELETE NCOLLECTION_CCHECK_HIST
				WHERE NONZONE_REF=@NONZONE_REF AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END

			
			RETURN 0;

				
		END
	
	RETURN 1;
	   
END



GO



GRANT EXECUTE ON [dbo].[CMS_NCollection_Update] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 10-Mar-13
-- Description:	Update Status Of Ncollection Ccheck table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CCheckUpdateByNCollection]		
	@NONZONE_REF 	varchar(7),
	@MOD_NO			int,
	@RTN_CODE		varchar(2)
AS
BEGIN	
	DECLARE @ErrorVar	int;

	SET NOCOUNT ON;

	INSERT INTO NCOLLECTION_CCHECK_HIST(NONZONE_REF, MOD_NO, RTN_STATUS, 
		RTN_CODE, IS_AUTH)
		VALUES(@NONZONE_REF, @MOD_NO, 'R', @RTN_CODE, 0);
    

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_CCheckUpdateByNCollection] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 02-Mar-13
-- Description:	Authorize record to NCollection
-- =============================================
CREATE PROCEDURE [dbo].[CMS_NCollection_Auth]	
	@NONZONE_REF	varchar(7),	
	@MOD_NO			int,    
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),
			@RTN_STATUS			char(1),
			@RTN_CODE			varchar(2),
			@CC_RTN_STATUS		char(1),
			@CC_RTN_CODE		varchar(2),	
			@REF_DATE			datetime,
			@AMOUNT				numeric(12,2),
			@DDREFNO			varchar(15),
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),			
			@VAT				numeric(12, 2),
			@COMMISION			numeric(12, 2),
			@POSTAGE_CHARGE		numeric(12, 2),
			@INSTRUMENT_EXP		numeric(12, 2),				
			@IS_AUTH			bit,
			@D_CODE				varchar(12);
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT NONZONE_REF from NCOLLECTION_HIST 
			  WHERE NONZONE_REF=@NONZONE_REF AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @REF_DATE=REF_DATE, @DDREFNO=DDREFNO, @AMOUNT=AMOUNT, @VAT=VAT, 
				@COMMISION=COMMISION, @POSTAGE_CHARGE=POSTAGE_CHARGE, 
				@INSTRUMENT_EXP=INSTRUMENT_EXP, @RTN_STATUS=RTN_STATUS, 
				@RTN_CODE=RTN_CODE, 
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH,@STATUS=[STATUS]
				FROM NCOLLECTION_HIST 
				WHERE NONZONE_REF=@NONZONE_REF AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO NCOLLECTION_HIST 
				SELECT *,1 FROM NCOLLECTION
				WHERE NONZONE_REF=@NONZONE_REF;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE NCOLLECTION_HIST
				SET [STATUS] = 'O' 
				WHERE NONZONE_REF=@NONZONE_REF 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE NCOLLECTION
				SET	REF_DATE=@REF_DATE, DDREFNO=@DDREFNO, AMOUNT=@AMOUNT, VAT=@VAT, 
				COMMISION=@COMMISION, POSTAGE_CHARGE=@POSTAGE_CHARGE, 
				INSTRUMENT_EXP=@INSTRUMENT_EXP, RTN_STATUS=@RTN_STATUS, 
				RTN_CODE=@RTN_CODE, 
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE NONZONE_REF=@NONZONE_REF;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE NCOLLECTION_HIST WHERE NONZONE_REF=@NONZONE_REF AND IS_AUTH=0;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END;
	
		

    -- Update CCHECK TOTAL AND CCHECK record

	SELECT @D_CODE = D_CODE 
		FROM CCHECK 
		WHERE NONZONE_REF =@NONZONE_REF
 	
	DELETE CCHECKTOTAL_HIST
		WHERE D_CODE=@D_CODE AND IS_AUTH=0;
            
	INSERT INTO CCHECKTOTAL_HIST 
		SELECT D_CODE,TOTAL_CHKNO,TOTAL_CHKAMT,
			INPUT_BY,INPUT_DATETIME,INPUT_FROM,
			AUTH_BY,AUTH_DATETIME,AUTH_FROM,MOD_NO,[STATUS],1
			FROM CCHECKTOTAL
			WHERE D_CODE =@D_CODE

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	UPDATE CCHECKTOTAL_HIST 
		SET [STATUS] = 'O' 
		WHERE D_CODE=@D_CODE AND [STATUS] = 'L';

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	UPDATE CCHECKTOTAL 
		SET INPUT_BY=@INPUT_BY,INPUT_DATETIME=@INPUT_DATETIME,
		INPUT_FROM=@INPUT_FROM,
		AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
		AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(), MOD_NO=MOD_NO+1 
		WHERE D_CODE=@D_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
            
	DELETE CCHECK_HIST
		WHERE D_CODE=@D_CODE AND IS_AUTH=0;

	INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, CHECK_DATE,
		CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, 
		CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, IS_AUTH, 
		REMINDER_DATE, REMINDER_NO, RTN_CODE)
	    SELECT SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, CHECK_DATE, 
		CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, 
		CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO,1, 
		REMINDER_DATE, REMINDER_NO, RTN_CODE 
		FROM CCHECK
		WHERE D_CODE=@D_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	UPDATE CCHECK SET MOD_NO=MOD_NO+1 
		WHERE D_CODE=@D_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

  
   
   --UPDATE CCHECK RECORD

	
	SELECT @CC_RTN_STATUS=RTN_STATUS,@CC_RTN_CODE=RTN_CODE 
			FROM NCOLLECTION_CCHECK_HIST 
			WHERE NONZONE_REF=@NONZONE_REF AND MOD_NO=@MOD_NO;
 
		
	UPDATE CCHECK SET RTN_STATUS=@CC_RTN_STATUS, 
		RTN_CODE=@CC_RTN_CODE 
		WHERE NONZONE_REF=@NONZONE_REF;

	UPDATE NCOLLECTION_CCHECK_HIST 
		SET IS_AUTH=1 
		WHERE NONZONE_REF=@NONZONE_REF AND MOD_NO=@MOD_NO;

	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO

GRANT EXECUTE ON [dbo].[CMS_NCollection_Auth] TO [ccms_sp_only]

GO


CREATE VIEW [dbo].[V_CASH_DEPOSIT]
as
(
SELECT ds.*,cc.CUSTOMER_REF,cc.CASH_REF,cc.SLIP_DATE,
cl.ACC_NO,cl.ACC_NAME,l.LOCATION_NAME
FROM DSCHEDULE ds
INNER JOIN CCASH cc
ON cc.D_CODE=ds.D_CODE
LEFT OUTER JOIN CLIENT cl
ON ds.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN LOCATION l
ON l.LOCATION_CODE=ds.LOCATION_CODE
)


GO


GRANT SELECT ON [dbo].[V_CASH_DEPOSIT] TO [ccms_sp_only]
GO


CREATE VIEW [dbo].[V_SPEED_DEPOSIT]
as
(
SELECT ds.*,cdd.SLNO,cdd.AMOUNT,cdd.CHECK_NO,cdd.CHECK_REF,cdd.DRAWER,cdd.SLIP_DATE,
cl.ACC_NO,cl.ACC_NAME,l.LOCATION_NAME,b.BANK_NAME
FROM DSCHEDULE ds
INNER JOIN CSD_DET cdd
ON cdd.D_CODE=ds.D_CODE
LEFT OUTER JOIN CLIENT cl
ON ds.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN LOCATION l
ON l.LOCATION_CODE=ds.LOCATION_CODE
LEFT OUTER JOIN BANK b
ON b.BANK_CODE = ds.CORR_BANK_CODE
)

GO

GRANT SELECT ON [dbo].[V_SPEED_DEPOSIT] TO [ccms_sp_only]
GO


CREATE VIEW [dbo].[V_SPEED_RETURN]
as
(
SELECT ds.*,cdd.SLNO,cdd.AMOUNT,cdd.CHECK_NO,cdd.CHECK_REF,cdd.DRAWER,cdd.SLIP_DATE,
rr.REJECT_REASON,cl.ACC_NO,cl.ACC_NAME,l.LOCATION_NAME
FROM DSCHEDULE ds
INNER JOIN CSD_DET cdd
ON cdd.D_CODE=ds.D_CODE
INNER JOIN RETURN_REJECT rr
ON rr.REJECT_CODE=cdd.RTN_CODE
LEFT OUTER JOIN CLIENT cl
ON ds.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN LOCATION l
ON l.LOCATION_CODE=ds.LOCATION_CODE
)

GO


GRANT SELECT ON [dbo].[V_SPEED_RETURN] TO [ccms_sp_only]
GO



CREATE VIEW [dbo].[V_ANY_DEPOSIT]
as
(
SELECT cc.*,cl.ACC_NO,cl.ACC_NAME,cl.MAIL_ADD,l.LOCATION_NAME,b.BANK_NAME AS DRAWEE_BANK
FROM CCHECK cc
LEFT OUTER JOIN CLIENT cl
ON cc.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN LOCATION l
ON l.LOCATION_CODE=cc.DLOCATION_CODE
LEFT OUTER JOIN BANK b
ON b.BANK_CODE=cc.DRAWEE_BANK_CODE
)

GO

GRANT SELECT ON [dbo].[V_ANY_DEPOSIT] TO [ccms_sp_only]
GO





CREATE VIEW [dbo].[V_ANY_FUNDING]
as
(
SELECT cc.*,nc.AMOUNT as COLLECTED_AMT, nc.VAT, nc.COMMISION, nc.POSTAGE_CHARGE, nc.INSTRUMENT_EXP, 
cl.ACC_NO,cl.ACC_NAME,cl.MAIL_ADD,cl.CITIANY_CHARGE,cl.CITIANY_STD_CHARGE,cl.CITIANY_VAT,l.LOCATION_NAME,
b.BANK_NAME AS DRAWEE_BANK,br.BRANCH_NAME as DRAWEE_BRANCH
FROM CCHECK cc
INNER JOIN NCOLLECTION nc
ON nc.NONZONE_REF=cc.NONZONE_REF
LEFT OUTER JOIN CLIENT cl
ON cc.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN LOCATION l
ON l.LOCATION_CODE=cc.DLOCATION_CODE
LEFT OUTER JOIN BANK b
ON b.BANK_CODE=cc.DRAWEE_BANK_CODE
LEFT OUTER JOIN BRANCH br
ON br.BRANCH_CODE=cc.BRANCH_CODE AND br.BANK_CODE=cc.DRAWEE_BANK_CODE
)

GO

GRANT SELECT ON [dbo].[V_ANY_FUNDING] TO [ccms_sp_only]
GO


CREATE VIEW [dbo].[V_ANY_OUTSTANDING]
as
(
SELECT cc.*,
cl.ACC_NO,cl.ACC_NAME,cl.MAIL_ADD,l.LOCATION_NAME,
b.BANK_NAME AS DRAWEE_BANK,br.BRANCH_NAME as DRAWEE_BRANCH,DATEDIFF(d,CC.SLIP_DATE,getdate()) as DAYS_OUTSTANDING
FROM CCHECK cc 
LEFT OUTER JOIN CLIENT cl
ON cc.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN LOCATION l
ON l.LOCATION_CODE=cc.DLOCATION_CODE
LEFT OUTER JOIN BANK b
ON b.BANK_CODE=cc.DRAWEE_BANK_CODE
LEFT OUTER JOIN BRANCH br
ON br.BRANCH_CODE=cc.BRANCH_CODE AND br.BANK_CODE=cc.DRAWEE_BANK_CODE
WHERE NONZONE_REF IS NOT NULL AND cc.RTN_STATUS IN ('O','D')
)
GO

GRANT SELECT ON [dbo].[V_ANY_OUTSTANDING] TO [ccms_sp_only]
GO

CREATE VIEW [dbo].[V_SPEEDCASH_DAYZERO]
as
(
SELECT dc.INPUT_DATETIME,ds.*, cl.ACC_NO,cl.ACC_NAME,l.LOCATION_NAME
FROM DCOLLECTED dc 
INNER JOIN DSCHEDULE ds
ON dc.DS_CODE=ds.DS_CODE
LEFT OUTER JOIN CLIENT cl
ON ds.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN LOCATION l
ON l.LOCATION_CODE=ds.LOCATION_CODE
WHERE (cl.CASH_DAYS=0 AND ds.DEPOSIT_TYPE='Cash') 
OR (cl.SPEED_DAYS=0 AND ds.DEPOSIT_TYPE='Check')
)

GO

GRANT SELECT ON [dbo].[V_SPEEDCASH_DAYZERO] TO [ccms_sp_only]
GO

drop view [V_SPPEDCASH_DETAIL];
GO

CREATE VIEW [dbo].[V_SPEEDCASH_DETAIL]
as
(
SELECT ds.*, cl.ACC_NO,cl.ACC_NAME,l.LOCATION_NAME,b.BANK_NAME
FROM DSCHEDULE ds
LEFT OUTER JOIN CLIENT cl
ON ds.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN LOCATION l
ON l.LOCATION_CODE=ds.LOCATION_CODE
LEFT OUTER JOIN BANK b
ON b.BANK_CODE = ds.CORR_BANK_CODE
)

GO

GRANT SELECT ON [dbo].[V_SPEEDCASH_DETAIL] TO [ccms_sp_only]
GO




CREATE VIEW [dbo].[V_DD_FUNDING]
as
(
SELECT cc.*,dd.D_CODE as DEPOSIT_NO,dd.DD_NO,dd.AMOUNT as DD_AMOUNT,cl.ACC_NO,cl.ACC_NAME,cl.MAIL_ADD,
b.BANK_NAME as DRAWEE_BANK,br.BRANCH_NAME as DRAWEE_BRANCH
FROM CCHECK cc
INNER JOIN NCOLLECTION nc
ON nc.NONZONE_REF=cc.NONZONE_REF
INNER JOIN DD 
ON DD.D_CODE+RIGHT(('000'+CONVERT(VARCHAR,DD.SLNO)),3) =nc.DDREFNO
LEFT OUTER JOIN CLIENT cl
ON cc.CLIENT_CODE=cl.CLIENT_CODE
LEFT OUTER JOIN BANK b
ON cc.DRAWEE_BANK_CODE=b.BANK_CODE
LEFT OUTER JOIN BRANCH br
ON cc.DRAWEE_BANK_CODE=br.BANK_CODE AND cc.BRANCH_CODE=br.BRANCH_CODE

)

GO

GRANT SELECT ON [dbo].[V_DD_FUNDING] TO [ccms_sp_only]
GO


CREATE VIEW [dbo].[V_UNCLEAR_FUND]
as
(
SELECT c.CASH_CR_TYPE,a.REF_NO,a.VALUE_DATE,b.LOCATION_CODE,a.REV_DATE,
	a.ACC_NO,a.REFACC_NO,b.CLIENT_CODE,b.CITICASH_AMOUNT+b.CITICHECK_AMOUNT as total,
	b.DEPOSIT_TYPE,a.D_CODE ,a.STATUS_ID,a.REMARKS ,b.DS_CODE ,c.ACC_NAME,
	d.STATUS_NAME, b.BANK_NAME,b.LOCATION_NAME  
FROM CCMSREF_TAB a  
	LEFT OUTER JOIN TRAN_STATUS d ON  a.STATUS_ID=d.STATUS_ID ,CLIENT c  ,  
	(SELECT DISTINCT a.DS_CODE,a.D_CODE,a.DEPOSIT_TYPE,a.CITICHECK_AMOUNT DCITICHECK_AMOUNT, 
	a.SCHEDULE_DATE as DSCHEDULE_DATE ,a.CITICASH_AMOUNT DCITICASH_AMOUNT,
	a.NO_CHECK ,a.CORR_BRANCH_CODE,a.SCHEDULE_DATE,a.CORR_BANK_CODE,b.bank_name,
	a.LOCATION_CODE,c.LOCATION_NAME, '' Sch_break,isnull(a.CITICHECK_AMOUNT,0)CITICHECK_AMOUNT,
	isnull(a.CITICASH_AMOUNT,0)CITICASH_AMOUNT,a.CLIENT_CODE     
	FROM DSCHEDULE a            
	LEFT OUTER JOIN BANK b ON b.BANK_CODE=a.CORR_BANK_CODE              
	LEFT OUTER JOIN LOCATION c ON c.LOCATION_CODE=a.LOCATION_CODE 
	)b  
WHERE   
	A.D_CODE = B.D_CODE   
	AND b.CLIENT_CODE=c.CLIENT_CODE
	AND a.FILENAME is null   
	AND b.DS_CODE not in   
	(SELECT DS_CODE FROM CSCHEDULE)

)

GO

GRANT SELECT ON [dbo].[V_UNCLEAR_FUND] TO [ccms_sp_only]
GO




CREATE VIEW [dbo].[V_COLLECTION_BREAK]
as
(
select h.ds_code,h.Deposit_Type,h.dciticheck_amount, h.Schedule_Date  ,  
	h.dciticash_amount,h.No_check ,h.bank_name,h.location_name 
	,b.cs_code,b.Schedule_Date as c_shedule_date,b.Location_code,b.CORR_BANK_CODE,
	b.CORR_BRANCH_CODE,b.ds_code as c_ds_code,b.citicash_amount as c_citicash_amount,   
	b.citicheck_amount as c_citicheck_amount,    
	b.No_check as c_No_check ,   
	isnull(f.R_Check_no,0)R_Check_no,isnull(f.R_amount,0)R_amount
from      
	cschedule b left outer join
	(select distinct a.ds_code,a.d_code,a.Deposit_Type,a.citicheck_amount dciticheck_amount, a.Schedule_Date as dsheduledate ,  
	a.citicash_amount dciticash_amount,a.No_check ,a.CORR_BRANCH_CODE,a.SCHEDULE_DATE,a.CORR_BANK_CODE,b.bank_name,       
	a.LOCATION_CODE,c.location_name, '' Sch_break,a.citicheck_amount,a.citicash_amount 
      
	from dschedule a        
		left outer join bank b on b.bank_code=a.CORR_BANK_CODE          
		left outer join location c on c.location_code=a.location_code          
 
	where 
	 a.deposit_type='Check'
	)h on h.ds_code=b.ds_code 

	left outer join (select d_code R_dcode ,count(Check_no) R_Check_no,sum(amount)R_amount from CSD_DET 
	where RTN_STATUS='R'
	group by d_code ) f  on h.d_code=f.R_dcode

)

GO

GRANT SELECT ON [dbo].[V_COLLECTION_BREAK] TO [ccms_sp_only]
GO


CREATE VIEW [dbo].[V_ANY_REMINDER]
as
(
SELECT SLNO,CHECK_NO,cc.AMOUNT,cc.DRAWEE_BANK_CODE,cc.BRANCH_CODE,cc.LOCATION_CODE,SLIP_DATE,DRAWER,DLOCATION_CODE,
	cc.NONZONE_REF,BANK_NAME,BRANCH_NAME,BRANCH_ADD1,BRANCH_ADD2,LOCATION_NAME,
	REF_DATE,(cc.DRAWEE_BANK_CODE+cc.LOCATION_CODE+cc.branch_code) as struniquebranch_code,
	REMINDER_NO,REMINDER_DATE
FROM CCHECK cc, BANK b,BRANCH br,LOCATION l,NCOLLECTION nc
WHERE cc.DRAWEE_BANK_CODE=br.BANK_CODE AND cc.BRANCH_CODE=br.BRANCH_CODE 
	AND cc.DRAWEE_BANK_CODE=b.BANK_CODE  
	AND cc.LOCATION_CODE=br.LOCATION_CODE AND 
	cc.LOCATION_CODE=l.LOCATION_CODE AND cc.RTN_STATUS='O' AND 
	cc.NONZONE_REF IS NOT NULL 
	AND cc.NONZONE_REF=nc.NONZONE_REF
)

GO

GRANT SELECT ON [dbo].[V_ANY_REMINDER] TO [ccms_sp_only]
GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Jan-13
-- Description:	Add detail to CCheck
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CCheck_Add]
	@SLNO				numeric(3,0),
	@D_CODE				varchar(12), 
	@CLIENT_CODE		varchar(6), 
	@DLOCATION_CODE		varchar(4), 
	@CUSTOMER_REF		varchar(15), 
	@SLIP_DATE			datetime, 
	@VALUE_DATE			datetime, 
	@CHECK_NO			varchar(15), 
	@AMOUNT				numeric(12,2), 
	@CHECK_DATE			datetime, 
	@CHECK_TYPE			varchar(7),
	@DRAWER				varchar(50),
	@DRAWEE_BANK_CODE	varchar(4),
	@LOCATION_CODE		varchar(4),
	@BRANCH_CODE		varchar(4),
	@CHECK_REF			varchar(14)
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, 
		LOCATION_CODE, BRANCH_CODE, CHECK_REF, RTN_STATUS,
		MOD_NO,IS_AUTH)
		VALUES(@SLNO, @D_CODE, @CLIENT_CODE, @DLOCATION_CODE, 
		@CUSTOMER_REF, @SLIP_DATE, @VALUE_DATE, @CHECK_NO, @AMOUNT, 
		@CHECK_DATE, @CHECK_TYPE, @DRAWER, @DRAWEE_BANK_CODE, 
		@LOCATION_CODE, @BRANCH_CODE, @CHECK_REF,'O',
		1,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Jan-13
-- Description:	update detail to DSchedule
-- =============================================

ALTER PROCEDURE [dbo].[CMS_DSchedule_Update]
	@DS_CODE			varchar(12),
	@D_CODE				varchar(12), 
	@DEPOSIT_TYPE		varchar(5), 
	@CITICASH_AMOUNT	numeric(12,2), 
	@CITICHECK_AMOUNT	numeric(12,2), 
	@SCHEDULE_DATE		datetime, 
	@NO_CHECK			numeric(4,0), 
	@CLIENT_CODE		varchar(6), 
	@LOCATION_CODE		varchar(4), 
	@CORR_BANK_CODE		varchar(4), 
	@CORR_BRANCH_CODE	varchar(4),
	@MOD_NO				int	,
	@FILENAME			varchar(15), 
	@REF_NO				varchar(10), 
	@FILE_USER_ID		varchar(20), 
	@SEQ_NO				numeric(4,0), 
	@CHECKED			tinyint,
	@FLEXGEN_DATE		datetime
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	INSERT INTO DSCHEDULE_HIST(DS_CODE, D_CODE, DEPOSIT_TYPE, 
		CITICASH_AMOUNT, CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, 
		CLIENT_CODE, LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE,
		MOD_NO, IS_AUTH,[FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, 
		CHECKED, FLEXGEN_DATE)
		VALUES(@DS_CODE, @D_CODE, @DEPOSIT_TYPE, 
		@CITICASH_AMOUNT, @CITICHECK_AMOUNT, @SCHEDULE_DATE, @NO_CHECK, 
		@CLIENT_CODE, @LOCATION_CODE, @CORR_BANK_CODE, @CORR_BRANCH_CODE,
		@MOD_NO, 0,@FILENAME, @REF_NO, @FILE_USER_ID, @SEQ_NO, 
		@CHECKED, @FLEXGEN_DATE)

	SELECT @ErrorVar = @@ERROR;

	IF @ErrorVar <> 0
		BEGIN
			RETURN 1;
		END	
	
	RETURN 0;			
	    
END


GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Mar-12
-- Description:	Get detail to DCollected table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_DCollected_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;


	IF @AUTH_FLAG=0
		BEGIN						
			SELECT *,'S' = 'U'				 
				FROM DCOLLECTED_HIST 
				WHERE IS_AUTH=0
				ORDER BY DS_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM DCOLLECTED
						WHERE [STATUS] ='L'					
						ORDER BY DS_CODE;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM DCOLLECTED
						WHERE [STATUS] IN ('L','D')					
						ORDER BY DS_CODE;
				END;
		END;	
	   
END


GO


GRANT EXECUTE ON [dbo].[CMS_DCollected_GetDetailList] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Mar-12
-- Description:	Get detail to CCash table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CCash_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;


	IF @AUTH_FLAG=0
		BEGIN						
			SELECT *,'S' = 'U'				 
				FROM CCASH_HIST 
				WHERE IS_AUTH=0
				ORDER BY D_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CCASH
						WHERE [STATUS] ='L'					
						ORDER BY D_CODE;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CCASH
						WHERE [STATUS] IN ('L','D')					
						ORDER BY D_CODE;
				END;
		END;	
	   
END


GO


GRANT EXECUTE ON [dbo].[CMS_CCash_GetDetailList] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 07-Jan-13
-- Description:	Get cash slip detail of DSchedule
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DSchedule_GetCashSlip]	
	@D_CODE	varchar(12)
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS(SELECT D_CODE 
			FROM DSCHEDULE ds 
			WHERE ds.D_CODE=@D_CODE AND ds.DEPOSIT_TYPE='Cash' )
		BEGIN
			SELECT ds.*,l.LOCATION_NAME,b.BANK_NAME,br.BRANCH_NAME,
				c.ACC_NAME,C.ACC_NO
			FROM DSCHEDULE ds
				LEFT OUTER JOIN LOCATION l
				ON l.LOCATION_CODE=ds.LOCATION_CODE
				LEFT OUTER JOIN BANK b
				on b.BANK_CODE=ds.CORR_BANK_CODE
				LEFT OUTER JOIN BRANCH br
				on br.BRANCH_CODE=ds.CORR_BRANCH_CODE
				LEFT OUTER JOIN CLIENT c
				on c.CLIENT_CODE=ds.CLIENT_CODE
			WHERE ds.D_CODE=@D_CODE AND ds.DEPOSIT_TYPE='Cash';
		END;
	ELSE
		BEGIN
			SELECT ds.*,l.LOCATION_NAME,b.BANK_NAME,br.BRANCH_NAME,
				c.ACC_NAME,C.ACC_NO
			FROM DSCHEDULE_HIST ds
				LEFT OUTER JOIN LOCATION l
				ON l.LOCATION_CODE=ds.LOCATION_CODE
				LEFT OUTER JOIN BANK b
				on b.BANK_CODE=ds.CORR_BANK_CODE
				LEFT OUTER JOIN BRANCH br
				on br.BRANCH_CODE=ds.CORR_BRANCH_CODE
				LEFT OUTER JOIN CLIENT c
				on c.CLIENT_CODE=ds.CLIENT_CODE
			WHERE ds.D_CODE=@D_CODE AND ds.DEPOSIT_TYPE='Cash' AND IS_AUTH=0;
		END;

END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 07-Jan-13
-- Description:	Authorize record to CCash table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CCash_Auth]	
	@D_CODE			varchar(12),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@CUSTOMER_REF 	varchar(15),
			@CASH_REF 		varchar(15),
			@SLIP_DATE 		datetime,
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@AUTH_BY		varchar(20),
			@AUTH_DATETIME	datetime,
			@AUTH_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			

	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT D_CODE from CCASH_HIST 
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@CUSTOMER_REF=CUSTOMER_REF,
				@CASH_REF=CASH_REF,@SLIP_DATE=SLIP_DATE,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CCASH_HIST 
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CCASH_HIST 
				SELECT *,1 FROM CCASH
				WHERE D_CODE=@D_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CCASH_HIST
				SET [STATUS] = 'O' 
				WHERE D_CODE=@D_CODE 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CCASH
				SET CUSTOMER_REF=@CUSTOMER_REF,
				CASH_REF=@CASH_REF,SLIP_DATE=@SLIP_DATE,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE D_CODE=@D_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CCASH_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN

			IF NOT EXISTS(SELECT D_CODE FROM DSCHEDULE
				WHERE D_CODE=@D_CODE)
			BEGIN
				-- parent not exist
				ROLLBACK TRANSACTION;
				RETURN 11;
			END


			INSERT INTO CCASH
				SELECT D_CODE, CUSTOMER_REF,
					CASH_REF,SLIP_DATE,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CCASH_HIST
					WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CCASH_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

		COMMIT TRANSACTION
		
		SELECT @ErrorVar1 = @@error;
		
		IF @ErrorVar1 = 0
			BEGIN		
				RETURN 0;
			END
		ELSE
			BEGIN
				RETURN 1;
			END
    
END


GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Mar-12
-- Description:	Get detail to CSD table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CSD_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;


	IF @AUTH_FLAG=0
		BEGIN						
			SELECT *,'S' = 'U'				 
				FROM CSD_HIST 
				WHERE IS_AUTH=0
				ORDER BY D_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CSD
						WHERE [STATUS] ='L'				
						ORDER BY D_CODE;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CSD
						WHERE [STATUS] IN ('L','D')			
						ORDER BY D_CODE;
				END;
		END;	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_CSD_GetDetailList] TO [ccms_sp_only]

GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 08-Jan-13
-- Description:	Get check slip detail of DSchedule
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DSchedule_GetCheckSlip]	
	@D_CODE	varchar(12)
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS(SELECT D_CODE 
			FROM DSCHEDULE ds 
			WHERE ds.D_CODE=@D_CODE AND ds.DEPOSIT_TYPE='Check' )
		BEGIN
			SELECT ds.*,l.LOCATION_NAME,b.BANK_NAME,br.BRANCH_NAME,
				c.ACC_NAME,C.ACC_NO
			FROM DSCHEDULE ds
				LEFT OUTER JOIN LOCATION l
				ON l.LOCATION_CODE=ds.LOCATION_CODE
				LEFT OUTER JOIN BANK b
				on b.BANK_CODE=ds.CORR_BANK_CODE
				LEFT OUTER JOIN BRANCH br
				on br.BRANCH_CODE=ds.CORR_BRANCH_CODE
				LEFT OUTER JOIN CLIENT c
				on c.CLIENT_CODE=ds.CLIENT_CODE
			WHERE ds.D_CODE=@D_CODE AND ds.DEPOSIT_TYPE='Check';
		END;
	ELSE
		BEGIN
			SELECT ds.*,l.LOCATION_NAME,b.BANK_NAME,br.BRANCH_NAME,
				c.ACC_NAME,C.ACC_NO
			FROM DSCHEDULE_HIST ds
				LEFT OUTER JOIN LOCATION l
				ON l.LOCATION_CODE=ds.LOCATION_CODE
				LEFT OUTER JOIN BANK b
				on b.BANK_CODE=ds.CORR_BANK_CODE
				LEFT OUTER JOIN BRANCH br
				on br.BRANCH_CODE=ds.CORR_BRANCH_CODE
				LEFT OUTER JOIN CLIENT c
				on c.CLIENT_CODE=ds.CLIENT_CODE
			WHERE ds.D_CODE=@D_CODE AND ds.DEPOSIT_TYPE='Check' AND IS_AUTH=0;
		END;


END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Mar-12
-- Description:	Get detail to CCheckTotal table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CCheckTotal_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;


	IF @AUTH_FLAG=0
		BEGIN						
			SELECT *,'S' = 'U'				 
				FROM CCHECKTOTAL_HIST 
				WHERE IS_AUTH=0
				ORDER BY D_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CCHECKTOTAL
						WHERE [STATUS] ='L'					
						ORDER BY D_CODE;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CCHECKTOTAL
						WHERE [STATUS] IN ('L','D')					
						ORDER BY D_CODE;
				END;
		END;	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_CCheckTotal_GetDetailList] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Jan-13
-- Description:	update detail to CCHECK
-- =============================================

ALTER PROCEDURE [dbo].[CMS_CCheck_Update]
	@SLNO				numeric(3,0),
	@D_CODE				varchar(12), 
	@CLIENT_CODE		varchar(6), 
	@DLOCATION_CODE		varchar(4), 
	@CUSTOMER_REF		varchar(15), 
	@SLIP_DATE			datetime, 
	@VALUE_DATE			datetime, 
	@CHECK_NO			varchar(15), 
	@AMOUNT				numeric(12,2), 
	@CHECK_DATE			datetime, 
	@CHECK_TYPE			varchar(7),
	@DRAWER				varchar(50),
	@DRAWEE_BANK_CODE	varchar(4),
	@LOCATION_CODE		varchar(4),
	@BRANCH_CODE		varchar(4),
	@CHECK_REF			varchar(14),
	@MOD_NO				int,
	@RTN_STATUS			char(1), 
	@NONZONE_REF		varchar(7), 
	@REMINDER_DATE		datetime, 
	@REMINDER_NO		numeric(3,0), 
	@RTN_CODE			varchar(2)	
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, 
		LOCATION_CODE, BRANCH_CODE, CHECK_REF,
		MOD_NO, IS_AUTH,RTN_STATUS, NONZONE_REF, REMINDER_DATE, 
		REMINDER_NO, RTN_CODE)
		VALUES(@SLNO, @D_CODE, @CLIENT_CODE, @DLOCATION_CODE, 
		@CUSTOMER_REF, @SLIP_DATE, @VALUE_DATE, @CHECK_NO, @AMOUNT, 
		@CHECK_DATE, @CHECK_TYPE, @DRAWER, @DRAWEE_BANK_CODE, 
		@LOCATION_CODE, @BRANCH_CODE, @CHECK_REF,
		@MOD_NO, 0, @RTN_STATUS, @NONZONE_REF, @REMINDER_DATE, 
		@REMINDER_NO, @RTN_CODE)

	SELECT @ErrorVar = @@ERROR;

	IF @ErrorVar <> 0
		BEGIN
			RETURN 1;
		END	
	
	RETURN 0;			
	    
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Jan-13
-- Description:	Authorize record to CCHECKTOTAL
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CCheckTotal_Auth]	
	@D_CODE		varchar(12),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_CHKNO	numeric(4,0), 
			@TOTAL_CHKAMT	numeric(12,2), 			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT D_CODE from CCHECKTOTAL_HIST 
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_CHKNO=TOTAL_CHKNO, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CCHECKTOTAL_HIST 
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CCHECKTOTAL_HIST 
				SELECT *,1 FROM CCHECKTOTAL
				WHERE D_CODE=@D_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CCHECKTOTAL_HIST
				SET [STATUS] = 'O' 
				WHERE D_CODE=@D_CODE
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CCHECKTOTAL
				SET
				TOTAL_CHKNO=@TOTAL_CHKNO,
				TOTAL_CHKAMT=@TOTAL_CHKAMT, 
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE D_CODE=@D_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CCHECKTOTAL_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CCHECKTOTAL
				SELECT D_CODE,TOTAL_CHKNO, TOTAL_CHKAMT, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CCHECKTOTAL_HIST
					WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CCHECKTOTAL_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update CCHECK

	INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, 
		BRANCH_CODE, CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, IS_AUTH,
		REMINDER_DATE, REMINDER_NO, RTN_CODE)
		SELECT SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, 
		BRANCH_CODE, CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, 1,
		REMINDER_DATE, REMINDER_NO, RTN_CODE
		FROM CCHECK
		WHERE D_CODE=@D_CODE;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CCHECK WHERE D_CODE=@D_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CCHECK(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, 
		BRANCH_CODE, CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, 
		REMINDER_DATE, REMINDER_NO, RTN_CODE)
		SELECT SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, 
		BRANCH_CODE, CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, 
		REMINDER_DATE, REMINDER_NO, RTN_CODE
		FROM CCHECK_HIST 
		WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CCHECK_HIST WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Mar-13
-- Description:	Remove record from CCheckTotal
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CCheckTotal_Remove]	
	@D_CODE		varchar(12),
	@MOD_NO		int,
	@RET_MOD_NO	int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_CHKNO	numeric(4,0), 
			@TOTAL_CHKAMT	numeric(12,2), 
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT D_CODE from CCHECKTOTAL
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_CHKNO=TOTAL_CHKNO,@TOTAL_CHKAMT=TOTAL_CHKAMT,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CCHECKTOTAL
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CCHECKTOTAL_HIST WHERE D_CODE=@D_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CCHECKTOTAL_HIST (D_CODE,TOTAL_CHKNO,TOTAL_CHKAMT,				
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@D_CODE,	@TOTAL_CHKNO,@TOTAL_CHKAMT,			
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


-----------

			DELETE CCHECK_HIST
				WHERE D_CODE=@D_CODE AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, 
				DLOCATION_CODE, CUSTOMER_REF, SLIP_DATE, VALUE_DATE, 
				CHECK_NO, AMOUNT,CHECK_DATE, CHECK_TYPE, DRAWER, 
				DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, CHECK_REF, 
				RTN_STATUS, NONZONE_REF, MOD_NO, IS_AUTH, REMINDER_DATE, 
				REMINDER_NO, RTN_CODE)
				SELECT SLNO, D_CODE, CLIENT_CODE, 
				DLOCATION_CODE, CUSTOMER_REF, SLIP_DATE, VALUE_DATE, 
				CHECK_NO, AMOUNT,CHECK_DATE, CHECK_TYPE, DRAWER, 
				DRAWEE_BANK_CODE, LOCATION_CODE, BRANCH_CODE, CHECK_REF, 
				RTN_STATUS, NONZONE_REF, @RET_MOD_NO, 0, REMINDER_DATE, 
				REMINDER_NO, RTN_CODE				
				FROM CCHECK
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			
-----------
			

			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT D_CODE from CCHECKTOTAL_HIST 
					  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CCHECKTOTAL_HIST
						WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE CCHECK_HIST 
						WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0 ;
					
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
	
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END


GO

GRANT EXECUTE ON [dbo].[CMS_CCheckTotal_Remove] TO [ccms_sp_only]

GO

