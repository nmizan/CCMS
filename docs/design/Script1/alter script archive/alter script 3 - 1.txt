USE [CCMS]
GO

CREATE TABLE [dbo].[CLEARING_CLIENT_CHARGE](
	[ACC_NO] [varchar](15) NOT NULL,
	[SLNO] [numeric](2, 0) NOT NULL,
	[VALUE_TYPE] [numeric](1, 0) NOT NULL,
	[MIN_AMOUNT] numeric(14,2) NOT NULL,
	[MAX_AMOUNT] numeric(14,2) NOT NULL,
	[BACH_CHARGE] numeric(8,2) NOT NULL,
	[BANK_CHARGE] numeric(8,2) NOT NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,	
 PRIMARY KEY([ACC_NO],[SLNO]))

GO

CREATE TABLE [dbo].[CLEARING_CLIENT_CHARGE_HIST](
	[ACC_NO] [varchar](15) NOT NULL,
	[SLNO] [numeric](2, 0) NOT NULL,
	[VALUE_TYPE] [numeric](1, 0) NOT NULL,
	[MIN_AMOUNT] numeric(14,2) NOT NULL,
	[MAX_AMOUNT] numeric(14,2) NOT NULL,
	[BACH_CHARGE] numeric(8,2) NOT NULL,
	[BANK_CHARGE] numeric(8,2) NOT NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[IS_AUTH] bit NOT NULL,
 PRIMARY KEY([ACC_NO],[MOD_NO],[SLNO]))

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Apr-13
-- Description:	Get detail of ClearingClientCharge
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClientCharge_GetDetails]	
	@ACC_NO		varchar(15),	
	@MOD_NO		int
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT ACC_NO
			   FROM CLEARING_CLIENT_CHARGE 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT cc.*,'VALUE_TYPE_NAME'=
					CASE
						WHEN VALUE_TYPE=1 THEN 'LOW'
						WHEN VALUE_TYPE=2 THEN 'HIGH'
					END 
			FROM CLEARING_CLIENT_CHARGE cc
			WHERE cc.ACC_NO=@ACC_NO AND cc.MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT cch.*,'VALUE_TYPE_NAME'=
					CASE
						WHEN VALUE_TYPE=1 THEN 'LOW'
						WHEN VALUE_TYPE=2 THEN 'HIGH'
					END  
			FROM CLEARING_CLIENT_CHARGE_HIST cch
			WHERE cch.ACC_NO=@ACC_NO  AND cch.MOD_NO = @MOD_NO
		END
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClientCharge_GetDetails] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Add detail to ClearingClient table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingClient_Add]		
	@ACC_NO				varchar(15),  
	@ACC_NAME			varchar(50),
	@MAIL_ADD			varchar(256), 
	@CONTACT			varchar(50), 		
	@SPEED_CR_TYPE		varchar(25),	
	@IS_DISABLE			bit
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	

	IF EXISTS(SELECT ACC_NO FROM CLEARING_CLIENT WHERE ACC_NO=@ACC_NO)
		BEGIN
			-- Duplicate Entry				
			RETURN 2	
		END
	
	DELETE CLEARING_CLIENT_HIST WHERE 
		ACC_NO=@ACC_NO AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
	ELSE

	INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME,MAIL_ADD,
		CONTACT, SPEED_CR_TYPE,IS_DISABLE,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
		@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END

	DELETE CLEARING_CLIENT_CHARGE_HIST 
		WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;
	
	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END	
	
	RETURN 0;
	   
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	update detail to Clearing_client table
-- =============================================

ALTER PROCEDURE [dbo].[CMS_ClearingClient_Update]		
	@ACC_NO				varchar(15),  
	@ACC_NAME			varchar(50),
	@MAIL_ADD			varchar(256), 
	@CONTACT			varchar(50), 	
	@SPEED_CR_TYPE		varchar(25),	
	@IS_DISABLE			bit,
	@MOD_NO				int,
	@RET_MOD_NO			int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	IF EXISTS(SELECT ACC_NO FROM CLEARING_CLIENT 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME, MAIL_ADD,
				CONTACT, SPEED_CR_TYPE, IS_DISABLE,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
				@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN					
					RETURN 1;
				END

			DELETE CLEARING_CLIENT_CHARGE_HIST 
				WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT_HIST 
						WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END

					INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME,MAIL_ADD,
						CONTACT, SPEED_CR_TYPE, IS_DISABLE,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
						@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;	

					DELETE CLEARING_CLIENT_CHARGE_HIST 
						WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END
					
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist					
					RETURN 4;
				END

		END
    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Apr-13
-- Description:	Add detail to ClearingClientCharge
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClientCharge_Add]		
	@ACC_NO			varchar(15),
	@SLNO			numeric(2,0),
	@VALUE_TYPE		numeric(1,0), 
	@MIN_AMOUNT		numeric(14,2), 
	@MAX_AMOUNT		numeric(14,2), 
	@BACH_CHARGE	numeric(8,2), 
	@BANK_CHARGE	numeric(8,2)	
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARING_CLIENT_CHARGE_HIST(ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, 
		BACH_CHARGE, BANK_CHARGE, MOD_NO,IS_AUTH)
		VALUES(@ACC_NO, @SLNO, @VALUE_TYPE, 
		@MIN_AMOUNT, @MAX_AMOUNT, 
		@BACH_CHARGE, @BANK_CHARGE, 1,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClientCharge_Add] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Apr-13
-- Description:	update detail to ClearingClientCharge
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClientCharge_Update]
	@ACC_NO			varchar(15),
	@SLNO			numeric(2,0),
	@VALUE_TYPE		numeric(1,0), 
	@MIN_AMOUNT		numeric(14,2), 
	@MAX_AMOUNT		numeric(14,2), 
	@BACH_CHARGE	numeric(8,2), 
	@BANK_CHARGE	numeric(8,2),
	@MOD_NO			numeric(3,0)
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARING_CLIENT_CHARGE_HIST(ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, 
		BACH_CHARGE, BANK_CHARGE, MOD_NO,IS_AUTH)
		VALUES(@ACC_NO, @SLNO, @VALUE_TYPE, 
		@MIN_AMOUNT, @MAX_AMOUNT, 
		@BACH_CHARGE, @BANK_CHARGE, @MOD_NO,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClientCharge_Update] TO [ccms_sp_only]

GO





-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Authorize record to Clearing_Client table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingClient_Auth]	
	@ACC_NO			varchar(15),
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),			
			@ACC_NAME			varchar(50),
			@MAIL_ADD			varchar(256), 
			@CONTACT			varchar(50), 			
			@SPEED_CR_TYPE		varchar(25),			
			@IS_DISABLE			bit,
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),
			@IS_AUTH			bit;			
	
	DECLARE @ErrorVar1		int; 
	
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT_HIST 
			  WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS], 
				@ACC_NAME=ACC_NAME,@MAIL_ADD=MAIL_ADD,@CONTACT=CONTACT,
				@SPEED_CR_TYPE=SPEED_CR_TYPE,@IS_DISABLE=IS_DISABLE,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLEARING_CLIENT_HIST 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLEARING_CLIENT_HIST 
				SELECT *,1 FROM CLEARING_CLIENT
				WHERE ACC_NO=@ACC_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLEARING_CLIENT_HIST
				SET [STATUS] = 'O' 
				WHERE ACC_NO=@ACC_NO 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CLEARING_CLIENT
				SET ACC_NAME=@ACC_NAME,MAIL_ADD=@MAIL_ADD,CONTACT=@CONTACT,
				SPEED_CR_TYPE=@SPEED_CR_TYPE, IS_DISABLE=@IS_DISABLE,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE ACC_NO=@ACC_NO;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CLEARING_CLIENT
				SELECT ACC_NO, ACC_NAME,MAIL_ADD,
					CONTACT, SPEED_CR_TYPE,IS_DISABLE, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM,
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CLEARING_CLIENT_HIST
					WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

	-- Now update CLEARING_CLIENT_CHARGE

	INSERT INTO CLEARING_CLIENT_CHARGE_HIST(ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BACH_CHARGE, BANK_CHARGE, MOD_NO, IS_AUTH)
		SELECT ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BACH_CHARGE, BANK_CHARGE, MOD_NO, 1
		FROM CLEARING_CLIENT_CHARGE
		WHERE ACC_NO=@ACC_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CLEARING_CLIENT_CHARGE WHERE ACC_NO=@ACC_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CLEARING_CLIENT_CHARGE(ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BACH_CHARGE, BANK_CHARGE, MOD_NO)
		SELECT ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BACH_CHARGE, BANK_CHARGE, MOD_NO
		FROM CLEARING_CLIENT_CHARGE_HIST 
		WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CLEARING_CLIENT_CHARGE_HIST WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END


GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Apr-13
-- Description:	Get detail to Clearing_Client table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClient_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM CLEARING_CLIENT_HIST 
				WHERE IS_AUTH=0			
				ORDER BY ACC_NO;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CLEARING_CLIENT
						WHERE [STATUS] ='L'					
						ORDER BY ACC_NO;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CLEARING_CLIENT
						WHERE [STATUS] in ('L','D')					
						ORDER BY ACC_NO;
				END;
		END;
	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClient_GetDetailList] TO [ccms_sp_only]

GO


ALTER TABLE dbo.CLEARINGTAB ADD
	VALUE_TYPE numeric(1, 0) NULL
GO

ALTER TABLE dbo.CLEARINGTAB_HIST ADD
	VALUE_TYPE numeric(1, 0) NULL
GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	Add detail to ClearingTab
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingTab_Add]		
	@OPR_DATE		datetime, 
	@ISSUE_DATE		datetime, 
	@NIKBRANCH_CODE	varchar(7), 
	@PAYEE_NAME		varchar(40), 
	@CHECK_SERIES	varchar(4), 
	@CHECK_NUMBER	varchar(15), 
	@CHECK_NO		varchar(8), 
	@BOOK_NO		varchar(8), 
	@CHECK_TYPE		varchar(8), 
	@ACC_NO			varchar(15), 
	@DEBIT_CREDIT	numeric(14,2), 
	@REMARK			varchar(15), 
	@BATCH_NO		varchar(8), 
	@CHECK_REF		varchar(40), 
	@ENTRY_LOC		varchar(3), 
	@DS_CODE		varchar(8),
	@VALUE_TYPE		numeric(1,0)
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARINGTAB_HIST(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, PAYEE_NAME, 
		CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, CHECK_TYPE, ACC_NO, 
		DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, ENTRY_LOC, DS_CODE, 
		RTN_STATUS, IS_PDC,
		MOD_NO,IS_AUTH,VALUE_TYPE)
		VALUES(@OPR_DATE, @ISSUE_DATE, @NIKBRANCH_CODE, @PAYEE_NAME, 
		@CHECK_SERIES, @CHECK_NUMBER, @CHECK_NO, @BOOK_NO, @CHECK_TYPE, @ACC_NO, 
		@DEBIT_CREDIT, @REMARK, @BATCH_NO, @CHECK_REF, @ENTRY_LOC, @DS_CODE, 
		'O', 0,
		1,0,@VALUE_TYPE);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END


GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	update detail to ClearingTab
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingTab_Update]		
	@OPR_DATE		datetime, 
	@ISSUE_DATE		datetime, 
	@NIKBRANCH_CODE	varchar(7), 
	@PAYEE_NAME		varchar(40), 
	@CHECK_SERIES	varchar(4), 
	@CHECK_NUMBER	varchar(15), 
	@CHECK_NO		varchar(8), 
	@BOOK_NO		varchar(8), 
	@CHECK_TYPE		varchar(8), 
	@ACC_NO			varchar(15), 
	@DEBIT_CREDIT	numeric(14,2), 
	@REMARK			varchar(15), 
	@BATCH_NO		varchar(8), 
	@CHECK_REF		varchar(40), 
	@ENTRY_LOC		varchar(3), 
	@DS_CODE		varchar(8),
	@RTN_STATUS		char(1), 
	@RTN_CODE		varchar(2), 
	@RETURN_DATE	datetime, 
	@CHECKED		tinyint, 
	@FLEX_FILENAME	varchar(15), 
	@IS_PDC			bit,
	@VALUE_TYPE		numeric(1,0), 
	@MOD_NO			numeric(3,0) 
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARINGTAB_HIST(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, PAYEE_NAME, 
		CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, CHECK_TYPE, ACC_NO, 
		DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, ENTRY_LOC, DS_CODE, 
		RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, FLEX_FILENAME, IS_PDC,
		MOD_NO,IS_AUTH,VALUE_TYPE)
		VALUES(@OPR_DATE, @ISSUE_DATE, @NIKBRANCH_CODE, @PAYEE_NAME, 
		@CHECK_SERIES, @CHECK_NUMBER, @CHECK_NO, @BOOK_NO, @CHECK_TYPE, @ACC_NO, 
		@DEBIT_CREDIT, @REMARK, @BATCH_NO, @CHECK_REF, @ENTRY_LOC, @DS_CODE, 
		@RTN_STATUS, @RTN_CODE, @RETURN_DATE, @CHECKED, @FLEX_FILENAME, @IS_PDC,
		@MOD_NO,0,@VALUE_TYPE);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END



GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Apr-13
-- Description:	Authorize record to CHECKTOTAL
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CheckTotal_Auth]	
	@DS_CODE	varchar(8),
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_CHKNO	int, 
			@TOTAL_CHKAMT	numeric(14,2), 
			@CUSTOMER_REF	varchar(50),		
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT DS_CODE from CHECKTOTAL_HIST 
			  WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_CHKNO=TOTAL_CHKNO, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT,@CUSTOMER_REF=CUSTOMER_REF,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CHECKTOTAL_HIST 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CHECKTOTAL_HIST 
				SELECT *,1 FROM CHECKTOTAL
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CHECKTOTAL_HIST
				SET [STATUS] = 'O' 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CHECKTOTAL
				SET
				TOTAL_CHKNO=@TOTAL_CHKNO,
				TOTAL_CHKAMT=@TOTAL_CHKAMT,CUSTOMER_REF=@CUSTOMER_REF, 
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CHECKTOTAL_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN  
			INSERT INTO CHECKTOTAL
				SELECT DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
					CUSTOMER_REF, ENTRY_LOC,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CHECKTOTAL_HIST
					WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CHECKTOTAL_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update CLEARINGTAB

	INSERT INTO CLEARINGTAB_HIST(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO, IS_AUTH,VALUE_TYPE)
		SELECT OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO, 1,VALUE_TYPE
		FROM CLEARINGTAB
		WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CLEARINGTAB WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CLEARINGTAB(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO,VALUE_TYPE)
		SELECT OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO,VALUE_TYPE
		FROM CLEARINGTAB_HIST 
		WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CLEARINGTAB_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END


GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Apr-13
-- Description:	Remove record from CheckTotal
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CheckTotal_Remove]
	@DS_CODE	varchar(8),
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3),
	@MOD_NO		int,	
	@RET_MOD_NO	int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_CHKNO	int, 
			@TOTAL_CHKAMT	numeric(14,2), 
			@CUSTOMER_REF	varchar(50),
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30);
	
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT DS_CODE from CHECKTOTAL
			  WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_CHKNO=TOTAL_CHKNO,@TOTAL_CHKAMT=TOTAL_CHKAMT,
				@CUSTOMER_REF=CUSTOMER_REF,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CHECKTOTAL
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CHECKTOTAL_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CHECKTOTAL_HIST (DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
				CUSTOMER_REF, ENTRY_LOC, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, @OPR_DATE, 
				@CUSTOMER_REF, @ENTRY_LOC, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


-----------

			DELETE CLEARINGTAB_HIST
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO CLEARINGTAB_HIST(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
				PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
				CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF,
				ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, 
				CHECKED, FLEX_FILENAME, IS_PDC, MOD_NO, IS_AUTH,VALUE_TYPE)
				SELECT OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
				PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
				CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF,
				ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, 
				CHECKED, FLEX_FILENAME, IS_PDC, @RET_MOD_NO, 0,VALUE_TYPE
				FROM CLEARINGTAB
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			
-----------
			

			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT DS_CODE from CHECKTOTAL_HIST 
						WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CHECKTOTAL_HIST
						WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE CLEARINGTAB_HIST 
						WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO AND IS_AUTH=0 ;
					
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
	
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END



GO


ALTER TABLE dbo.TMP_REVERSAL_CLEARING ADD
	VALUE_TYPE numeric(1, 0) NULL
GO


ALTER TABLE dbo.REVERSAL_HIST_CLEARING ADD
	VALUE_TYPE numeric(1, 0) NULL
GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Process for reversal deposit update
-- =============================================

ALTER PROCEDURE [dbo].[CMS_Process_ClearingRevGenerate]
	@REV_DATE	datetime,	
	@ENTRY_LOC	varchar(3),
	@REFACC_NO	varchar(16),
	@VALUE_TYPE	numeric(1,0)
AS
BEGIN	
	
	DELETE FROM TMP_REVERSAL_CLEARING 
		WHERE REV_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC AND VALUE_TYPE=@VALUE_TYPE;


	INSERT INTO TMP_REVERSAL_CLEARING( CR_TYPE,VALUE_DATE,ENTRY_LOC,REV_DATE,
		ACC_NO,REFACC_NO,CLIENT_CODE,AMOUNT,
		DS_CODE,
		CHECK_NUMBER,
		SEQ_NO,ADD_TEXT,VALUE_TYPE)
                          
------By Total                                  
	SELECT c.SPEED_CR_TYPE,a.OPR_DATE VALUE_DATE, a.ENTRY_LOC,a.OPR_DATE,
		c.ACC_NO,@REFACC_NO AS REFACC_NO,a.REMARK,sum(a.DEBIT_CREDIT) as total,
		substring(CONVERT(varchar(12), OPR_DATE,112),3,8) as DS_CODE,
		substring(CONVERT(varchar(12), OPR_DATE,112),3,8) CHECK_NUMBER,
		COUNT(a.REMARK),'' ADD_TEXT,@VALUE_TYPE
	FROM CLEARINGTAB a, CLEARING_CLIENT c                                  
	WHERE 
		a.DEBIT_CREDIT>0                                  
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.VALUE_TYPE=@VALUE_TYPE
		AND a.REMARK=c.ACC_NO
		AND a.FLEX_FILENAME IS NULL
		AND c.SPEED_CR_TYPE='T'
	GROUP BY 
		a.OPR_DATE,a.ENTRY_LOC,c.SPEED_CR_TYPE,                                  
		c.ACC_NO ,a.REMARK                

	UNION ALL
            
------By Deposit code
	SELECT c.SPEED_CR_TYPE,OPR_DATE valueDate,a.ENTRY_LOC,a.OPR_DATE,
		c.ACC_NO,@REFACC_NO AS REFACC_NO,a.REMARK,sum(a.DEBIT_CREDIT) as total,
		a.DS_CODE ,
		a.DS_CODE CHECK_NUMBER,
		count(a.REMARK),'' ADD_TEXT,@VALUE_TYPE
	FROM CLEARINGTAB a, CLEARING_CLIENT c
	WHERE

		a.DEBIT_CREDIT>0 
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.VALUE_TYPE=@VALUE_TYPE
		AND a.REMARK=c.ACC_NO
		AND a.FLEX_FILENAME IS NULL
		AND c.SPEED_CR_TYPE='D'
	GROUP BY a.OPR_DATE,a.ENTRY_LOC,c.SPEED_CR_TYPE,
		c.ACC_NO ,a.REMARK,a.DS_CODE
	                                  
                                  
	UNION ALL
--\\\\\\\\\\\\\\\By Check\\\\\\\\                                  
                                
                                
	SELECT  c.SPEED_CR_TYPE,a.OPR_DATE,a.ENTRY_LOC,a.OPR_DATE,
		a.REMARK,@REFACC_NO REFACC_NO,a.REMARK,a.DEBIT_CREDIT,
		DS_CODE,
		a.CHECK_NUMBER,
		1  ,'' ADD_TEXT,@VALUE_TYPE
	FROM CLEARINGTAB a,CLEARING_CLIENT c
	WHERE                    

		a.DEBIT_CREDIT>0
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.VALUE_TYPE=@VALUE_TYPE
		AND a.REMARK=c.ACC_NO
		AND a.FLEX_FILENAME IS NULL
		AND c.SPEED_CR_TYPE='C'
                      
	UNION ALL                
                
	SELECT  c.SPEED_CR_TYPE,a.OPR_DATE,a.ENTRY_LOC,a.OPR_DATE,
		a.REMARK,@REFACC_NO REFACC_NO,a.REMARK,a.DEBIT_CREDIT,
		b.CUSTOMER_REF , 
		a.CHECK_NUMBER,
		1 ,'' ADD_TEXT,@VALUE_TYPE
		FROM CLEARINGTAB a, CHECKTOTAL b, CLEARING_CLIENT c
	WHERE 
		a.DS_CODE=b.DS_CODE AND a.ENTRY_LOC=b.ENTRY_LOC AND a.OPR_DATE=b.OPR_DATE
		AND a.VALUE_TYPE=@VALUE_TYPE
		AND a.DEBIT_CREDIT>0
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND c.ACC_NO=a.REMARK
		AND a.FLEX_FILENAME IS NULL
		AND c.SPEED_CR_TYPE='R'
        
	UNION ALL                
                
	SELECT  c.SPEED_CR_TYPE,a.OPR_DATE,a.ENTRY_LOC,a.OPR_DATE,
		a.REMARK,@REFACC_NO REFACC_NO,a.REMARK,a.DEBIT_CREDIT,
		b.CUSTOMER_REF , 
		a.DS_CODE ,
		1  ,'Chq:'+ a.CHECK_NUMBER +'  ' + e.BANK_NAME +space(2)+ ' ' + d.BRANCH_NAME ADD_TEXT,@VALUE_TYPE
	FROM CLEARINGTAB a,CHECKTOTAL b, CLEARING_CLIENT c, CLEARING_BRANCH d ,CLEARING_BANK e                    
	WHERE
		a.DS_CODE=b.DS_CODE AND a.ENTRY_LOC=b.ENTRY_LOC AND a.OPR_DATE=b.OPR_DATE
		AND a.VALUE_TYPE=@VALUE_TYPE
		AND a.DEBIT_CREDIT>0
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC   
		AND c.ACC_NO=a.REMARK                        
		AND a.FLEX_FILENAME IS NULL                                  
		AND c.SPEED_CR_TYPE='B'        
		AND a.NIKBRANCH_CODE=d.NIKBRANCH_CODE        
		AND d.BANK_CODE=e.BANK_CODE 

	UNION ALL

------By DepositRef
	SELECT c.SPEED_CR_TYPE,a.OPR_DATE valueDate,a.ENTRY_LOC,a.OPR_DATE,
		c.ACC_NO ,@REFACC_NO REFACC_NO,a.REMARK,sum(a.DEBIT_CREDIT) as total,
		a.DS_CODE ,
		b.CUSTOMER_REF,
		count(a.REMARK),'' Add_text,@VALUE_TYPE
	FROM CLEARINGTAB a, CLEARING_CLIENT c  , checktotal  b
	WHERE
		a.DS_CODE=b.DS_CODE AND a.ENTRY_LOC=b.ENTRY_LOC AND a.OPR_DATE=b.OPR_DATE
		AND a.VALUE_TYPE=@VALUE_TYPE
		AND a.DEBIT_CREDIT>0
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.REMARK=c.ACC_NO
		AND a.FLEX_FILENAME IS NULL		
		AND c.SPEED_CR_TYPE='DR'
	GROUP BY a.OPR_DATE,a.ENTRY_LOC,c.SPEED_CR_TYPE,
		c.ACC_NO ,a.REMARK,a.DS_CODE ,b.CUSTOMER_REF
         
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Process for making Clearing data checked
-- =============================================

ALTER PROCEDURE [dbo].[CMS_Process_ClearingDataChecked]
	@OPR_DATE	datetime,	
	@ENTRY_LOC	varchar(3),
	@VALUE_TYPE	numeric(1,0)
AS
BEGIN	
	
	UPDATE CLEARINGTAB
		SET CHECKED=1
		WHERE (CHECKED IS NULL OR CHECKED=0)
			AND OPR_DATE<=OPR_DATE AND ENTRY_LOC=@ENTRY_LOC
			AND VALUE_TYPE=@VALUE_TYPE
	         
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Update Clearing Data Final
-- =============================================

ALTER PROCEDURE [dbo].[CMS_Process_ClearingDataFinalUpdate]
	@REV_DATE		datetime,	
	@ENTRY_LOC		varchar(3),
	@VALUE_TYPE		numeric(1,0),
	@FLEX_FILENAME	varchar(15)
AS
BEGIN

	UPDATE CLEARINGTAB 
		SET FLEX_FILENAME=@FLEX_FILENAME
	WHERE FLEX_FILENAME IS NULL 
		AND OPR_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC
		AND VALUE_TYPE=@VALUE_TYPE;

	UPDATE TMP_REVERSAL_CLEARING
		SET FLEX_FILENAME=@FLEX_FILENAME,
			USERID=substring(suser_name(),charindex('\',suser_name())+1,20)
	WHERE FLEX_FILENAME IS NULL 
		AND REV_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC
		AND VALUE_TYPE=@VALUE_TYPE;

	INSERT INTO REVERSAL_HIST_CLEARING
		SELECT * FROM TMP_REVERSAL_CLEARING
			WHERE FLEX_FILENAME IS NOT NULL 
			AND REV_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC
			AND VALUE_TYPE=@VALUE_TYPE;

	DELETE FROM TMP_REVERSAL_CLEARING
		WHERE FLEX_FILENAME IS NOT NULL 
			AND REV_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC
			AND VALUE_TYPE=@VALUE_TYPE;

END


GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Get detail of tmp_reversal_clearing
-- =============================================

ALTER PROCEDURE [dbo].[CMS_TmpReversalClearing_GetDetail]
	@REV_DATE	datetime,	
	@ENTRY_LOC	varchar(3),
	@VALUE_TYPE	numeric(1,0)
AS
BEGIN	
	
	SELECT a.*,ISNULL(b.CUSTOMER_REF,'') CUSTOMER_REF
	FROM TMP_REVERSAL_CLEARING a
	LEFT OUTER JOIN CHECKTOTAL b 
		ON a.DS_CODE=b.DS_CODE AND a.ENTRY_LOC=b.ENTRY_LOC
		AND a.REV_DATE=b.OPR_DATE
	WHERE a.REV_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.VALUE_TYPE=@VALUE_TYPE
	ORDER BY a.ACC_NO,a.DS_CODE asc
	         
END


GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Get detail for flex from tmp_reversal_clearing
-- =============================================

ALTER PROCEDURE [dbo].[CMS_TmpReversalClearing_GetFlexDetail]
	@REV_DATE	datetime,	
	@ENTRY_LOC	varchar(3),
	@VALUE_TYPE	numeric(1,0)
AS
BEGIN

	SELECT REV_DATE,SUM(AMOUNT)as CREDTOTAL,
		COUNT(REFACC_NO) TOTCHECK,REFACC_NO
	FROM TMP_REVERSAL_CLEARING 
	WHERE REV_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC
		AND VALUE_TYPE=@VALUE_TYPE
	GROUP BY REV_DATE, REFACC_NO
		         
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 27-Apr-13
-- Description: Get unchecked clearingtab records
-- =============================================

CREATE PROCEDURE [dbo].[CMS_ClearingTab_GetUnchecked]
	@OPR_DATE	datetime,	
	@ENTRY_LOC	varchar(3),
	@VALUE_TYPE	numeric(1,0)
AS
BEGIN	
	
	SELECT * FROM CLEARINGTAB		
		WHERE (CHECKED IS NULL OR CHECKED=0)
			AND OPR_DATE<=OPR_DATE AND ENTRY_LOC=@ENTRY_LOC
			AND VALUE_TYPE=@VALUE_TYPE
	         
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingTab_GetUnchecked] TO [ccms_sp_only]

GO



ALTER TABLE dbo.TMP_REVERSAL_CLEARING ALTER COLUMN
	AMOUNT numeric(14, 2) NULL
GO

ALTER TABLE dbo.REVERSAL_HIST_CLEARING ALTER COLUMN
	AMOUNT numeric(14, 2) NULL
GO








