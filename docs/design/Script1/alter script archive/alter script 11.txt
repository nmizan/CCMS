USE [CCMS]
GO



DROP TABLE [PDCTOTAL];

GO

DROP TABLE [PDCTOTAL_HIST];

GO

CREATE TABLE [dbo].[PDCTOTAL](
	[MID]	numeric(10,0) NOT NULL,
	[DS_CODE] [varchar](8) NOT NULL,
	[TOTAL_CHKNO] [int] NULL,
	[TOTAL_CHKAMT] [numeric](14, 2) NULL,
	[OPR_DATE] [datetime] NOT NULL,
	[CUSTOMER_REF] [varchar](50) NULL,
	[ENTRY_LOC] [varchar](3) NOT NULL,
	[ENTRY_DATE] [datetime] NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	[PDC_TRANS] [bit] NULL,
	PRIMARY KEY (MID),
	UNIQUE  ([DS_CODE],[OPR_DATE],[ENTRY_LOC])
)

GO

CREATE TABLE [dbo].[PDCTOTAL_HIST](
	[MID]	numeric(10,0) NOT NULL,
	[DS_CODE] [varchar](8) NOT NULL,
	[TOTAL_CHKNO] [int] NULL,
	[TOTAL_CHKAMT] [numeric](14, 2) NULL,
	[OPR_DATE] [datetime] NOT NULL,
	[CUSTOMER_REF] [varchar](50) NULL,
	[ENTRY_LOC] [varchar](3) NOT NULL,
	[ENTRY_DATE] [datetime] NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	IS_AUTH	bit NOT NULL,
	[PDC_TRANS] [bit] NULL,
	PRIMARY KEY (MID,MOD_NO),
	UNIQUE ([DS_CODE],[OPR_DATE],[ENTRY_LOC],MOD_NO)
)

GO




DROP TABLE [PDCTAB];
GO

DROP TABLE [PDCTAB_HIST];
GO

CREATE TABLE [dbo].[PDCTAB](
	[MID]	numeric(10,0) NOT NULL,
	[DSL]	numeric(4,0) NOT NULL,
	[OPR_DATE] [datetime] NOT NULL,
	[ISSUE_DATE] [datetime] NULL,
	[NIKBRANCH_CODE] [varchar](7) NOT NULL,
	[PAYEE_NAME] [varchar](40) NULL,
	[CHECK_SERIES] [varchar](4) NULL,
	[CHECK_NUMBER] [varchar](15) NOT NULL,
	[CHECK_NO] [varchar](8) NULL,
	[BOOK_NO] [varchar](8) NULL,
	[CHECK_TYPE] [varchar](8) NULL,
	[ACC_NO] [varchar](15) NULL,
	[DEBIT_CREDIT] [numeric](14, 2) NOT NULL,
	[REMARK] [varchar](15) NOT NULL,
	[BATCH_NO] [varchar](8) NULL,
	[CHECK_REF] [varchar](40) NULL,
	[ENTRY_LOC] [varchar](3) NOT NULL,
	[DS_CODE] [varchar](8) NOT NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[VALUE_TYPE] [numeric](1, 0) NULL,
	[IS_ROW_CHG] [bit]	NULL,
	PRIMARY KEY ([MID],[DSL]),
	UNIQUE ([OPR_DATE],[NIKBRANCH_CODE],[CHECK_NUMBER],
	[DEBIT_CREDIT],[REMARK],[DS_CODE],[ENTRY_LOC])

)

GO

CREATE TABLE [dbo].[PDCTAB_HIST](
	[MID]	numeric(10,0) NOT NULL,
	[DSL]	numeric(4,0) NOT NULL,
	[OPR_DATE] [datetime] NOT NULL,
	[ISSUE_DATE] [datetime] NULL,
	[NIKBRANCH_CODE] [varchar](7) NOT NULL,
	[PAYEE_NAME] [varchar](40) NULL,
	[CHECK_SERIES] [varchar](4) NULL,
	[CHECK_NUMBER] [varchar](15) NOT NULL,
	[CHECK_NO] [varchar](8) NULL,
	[BOOK_NO] [varchar](8) NULL,
	[CHECK_TYPE] [varchar](8) NULL,
	[ACC_NO] [varchar](15) NULL,
	[DEBIT_CREDIT] [numeric](14, 2) NOT NULL,
	[REMARK] [varchar](15) NOT NULL,
	[BATCH_NO] [varchar](8) NULL,
	[CHECK_REF] [varchar](40) NULL,
	[ENTRY_LOC] [varchar](3) NOT NULL,
	[DS_CODE] [varchar](8) NOT NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[IS_AUTH] [bit] NOT NULL,
	[VALUE_TYPE] [numeric](1, 0) NULL,
	[IS_ROW_CHG] [bit]	NULL,
	PRIMARY KEY ([MID],[DSL],[MOD_NO]),
	UNIQUE ([OPR_DATE],[NIKBRANCH_CODE],[CHECK_NUMBER],
	[DEBIT_CREDIT],[REMARK],[DS_CODE],[ENTRY_LOC],[MOD_NO])

)

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	Get detail to PDCTotal table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTotal_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit,
	@ENTRY_DATE	datetime,
	@ENTRY_LOC	varchar(3)
AS
BEGIN	
		
	SET NOCOUNT ON;


	IF @AUTH_FLAG=0
		BEGIN						
			SELECT ch.*,'S' = 'U',cb.BRANCH_NAME
				FROM PDCTOTAL_HIST ch
				LEFT OUTER JOIN CITIBANK_BRANCH cb
				ON cb.BRANCH_CODE=ch.ENTRY_LOC
				WHERE ch.IS_AUTH=0 AND ch.ENTRY_LOC=@ENTRY_LOC
				ORDER BY ch.DS_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A',cb.BRANCH_NAME				
						FROM PDCTOTAL ct
						LEFT OUTER JOIN CITIBANK_BRANCH cb
						ON cb.BRANCH_CODE=ct.ENTRY_LOC
						WHERE ct.STATUS ='L' AND ct.ENTRY_LOC=@ENTRY_LOC
						AND ct.ENTRY_DATE=@ENTRY_DATE
						ORDER BY ct.DS_CODE;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN ct.STATUS = 'D' THEN 'D'                    
							ELSE 'A'
						END ,cb.BRANCH_NAME	
						FROM PDCTOTAL ct
						LEFT OUTER JOIN CITIBANK_BRANCH cb
						ON cb.BRANCH_CODE=ct.ENTRY_LOC
						WHERE ct.STATUS IN ('L','D')
						AND ct.ENTRY_LOC=@ENTRY_LOC
						AND ct.ENTRY_DATE=@ENTRY_DATE
						ORDER BY DS_CODE;
				END;
		END;	
	   
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 18-Aug-13
-- Description:	Get detail of PDCTOTAL by code
-- =============================================
CREATE PROCEDURE [dbo].[CMS_PDCTotal_GetDetailByCode]	
	@DS_CODE	varchar(8),
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3)
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT DS_CODE 
				FROM PDCTOTAL 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC)
		BEGIN
			SELECT *,'IS_AUTH'=1 
				FROM PDCTOTAL 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;
		END	
	ELSE
		BEGIN
			SELECT * 
				FROM PDCTOTAL_HIST
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;
		END
END

GO

GRANT EXECUTE ON [dbo].[CMS_PDCTotal_GetDetailByCode] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	Add detail to PDCTotal
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTotal_Add]		
	@DS_CODE		varchar(8), 
	@TOTAL_CHKNO	int, 
	@TOTAL_CHKAMT	numeric(14,2), 
	@OPR_DATE		datetime, 
	@CUSTOMER_REF	varchar(50), 
	@ENTRY_LOC		varchar(3),
	@RET_MID		numeric(10,0) output
AS
BEGIN	
	DECLARE @ErrorVar	int;
	
	SET NOCOUNT ON;
	
	IF EXISTS(SELECT DS_CODE FROM PDCTOTAL
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC)
		BEGIN
			-- Duplicate Entry				
			RETURN 2	
		END
	
	DELETE PDCTOTAL_HIST WHERE 
		DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
		AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END

	SELECT @RET_MID=ISNULL(CLEAR_MAX_MID,0)+1 FROM GENPRM;

	UPDATE GENPRM SET CLEAR_MAX_MID=@RET_MID;
	
	INSERT INTO PDCTOTAL_HIST(MID,DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
		OPR_DATE, CUSTOMER_REF, ENTRY_LOC,
		ENTRY_DATE,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@RET_MID,@DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, 
		@OPR_DATE, @CUSTOMER_REF, @ENTRY_LOC,
		CONVERT(datetime,CONVERT(varchar(12), GETDATE())), 
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END

	DELETE PDCTAB_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
		AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;
	
	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END	

	RETURN 0;
	
   
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	Add detail to PDCTab
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTab_Add]
	@MID			numeric(10,0),
	@DSL			numeric(4,0),		
	@OPR_DATE		datetime, 
	@ISSUE_DATE		datetime, 
	@NIKBRANCH_CODE	varchar(7), 
	@PAYEE_NAME		varchar(40), 
	@CHECK_SERIES	varchar(4), 
	@CHECK_NUMBER	varchar(15), 
	@CHECK_NO		varchar(8), 
	@BOOK_NO		varchar(8), 
	@CHECK_TYPE		varchar(8), 
	@ACC_NO			varchar(15), 
	@DEBIT_CREDIT	numeric(14,2), 
	@REMARK			varchar(15), 
	@BATCH_NO		varchar(8), 
	@CHECK_REF		varchar(40), 
	@ENTRY_LOC		varchar(3), 
	@DS_CODE		varchar(8),
	@VALUE_TYPE		numeric(1,0),
	@IS_ROW_CHG		bit
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO PDCTAB_HIST(MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, PAYEE_NAME, 
		CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, CHECK_TYPE, ACC_NO, 
		DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, ENTRY_LOC, DS_CODE, 		
		MOD_NO,IS_AUTH,VALUE_TYPE,IS_ROW_CHG)
		VALUES(@MID,@DSL,@OPR_DATE, @ISSUE_DATE, @NIKBRANCH_CODE, @PAYEE_NAME, 
		@CHECK_SERIES, @CHECK_NUMBER, @CHECK_NO, @BOOK_NO, @CHECK_TYPE, @ACC_NO, 
		@DEBIT_CREDIT, @REMARK, @BATCH_NO, @CHECK_REF, @ENTRY_LOC, @DS_CODE, 
		1,0,@VALUE_TYPE,@IS_ROW_CHG);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END


GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	Get detail of PDCTOTAL
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTotal_GetDetail]	
	@MID		numeric(10,0),
	@MOD_NO		int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT DS_CODE 
				FROM PDCTOTAL 
				WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
				FROM PDCTOTAL 
				WHERE MID=@MID AND MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
				FROM PDCTOTAL_HIST
				WHERE MID=@MID AND MOD_NO = @MOD_NO
		END
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	Get detail of PDCTab
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTab_GetDetails]	
	@MID		numeric(10,0),
	@MOD_NO		int
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT DS_CODE 
			   FROM PDCTAB WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT ct.*,'IS_AUTH'=1,
				cb.BRANCH_NAME AS 'ENTRY_LOC_NAME',br.BRANCH_NAME,
				b.BANK_CODE,b.BANK_NAME,cl.ACC_NAME, ctp.CHECKTYPE_NAME
			FROM PDCTAB ct
				LEFT OUTER JOIN CITIBANK_BRANCH cb
				ON cb.BRANCH_CODE=ct.ENTRY_LOC				
				LEFT OUTER JOIN CLEARING_BRANCH br
				ON br.NIKBRANCH_CODE=ct.NIKBRANCH_CODE
				LEFT OUTER JOIN CLEARING_BANK b
				ON b.BANK_CODE=br.BANK_CODE
				LEFT OUTER JOIN CLEARING_CLIENT cl
				ON cl.ACC_NO=ct.REMARK
				LEFT OUTER JOIN CHECKTYPE ctp
				ON ctp.CHECKTYPE_CODE=ct.CHECK_TYPE
			WHERE ct.MID=@MID AND ct.MOD_NO = @MOD_NO			
		END	
	ELSE
		BEGIN
			SELECT cth.* ,
				cb.BRANCH_NAME AS 'ENTRY_LOC_NAME',br.BRANCH_NAME,
				b.BANK_CODE,b.BANK_NAME,cl.ACC_NAME, ctp.CHECKTYPE_NAME
			FROM PDCTAB_HIST cth
				LEFT OUTER JOIN CITIBANK_BRANCH cb
				ON cb.BRANCH_CODE=cth.ENTRY_LOC				
				LEFT OUTER JOIN CLEARING_BRANCH br
				ON br.NIKBRANCH_CODE=cth.NIKBRANCH_CODE
				LEFT OUTER JOIN CLEARING_BANK b
				ON b.BANK_CODE=br.BANK_CODE
				LEFT OUTER JOIN CLEARING_CLIENT cl
				ON cl.ACC_NO=cth.REMARK
				LEFT OUTER JOIN CHECKTYPE ctp
				ON ctp.CHECKTYPE_CODE=cth.CHECK_TYPE
			WHERE cth.MID=@MID AND cth.MOD_NO = @MOD_NO			
		END
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	Get Total # of modification of PDCTotal
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTotal_GetMaxMod]
	@MID	numeric(10,0)
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM PDCTOTAL_HIST 
		WHERE MID=@MID AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM PDCTOTAL
				WHERE MID=@MID;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	update detail to PDCTotal
-- =============================================

ALTER PROCEDURE [dbo].[CMS_PDCTotal_Update]	
	@MID			numeric(10,0),
	@DS_CODE		varchar(8), 
	@TOTAL_CHKNO	int, 
	@TOTAL_CHKAMT	numeric(14,2), 
	@OPR_DATE		datetime, 
	@CUSTOMER_REF	varchar(50), 
	@ENTRY_LOC		varchar(3),
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	DECLARE @ENTRY_DATE datetime;

	SET NOCOUNT ON;

	IF EXISTS(SELECT DS_CODE FROM PDCTOTAL 
				WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN

			SELECT @ENTRY_DATE=ENTRY_DATE FROM PDCTOTAL 
				WHERE MID=@MID AND MOD_NO=@MOD_NO;

			DELETE PDCTOTAL_HIST WHERE MID=@MID AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN					
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO PDCTOTAL_HIST(MID,DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
				OPR_DATE, CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@MID,@DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, 
				@OPR_DATE, @CUSTOMER_REF, @ENTRY_LOC, @ENTRY_DATE,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END				
			
			DELETE PDCTAB_HIST
				WHERE MID=@MID AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT DS_CODE from PDCTOTAL_HIST 
						WHERE MID=@MID AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					SELECT @ENTRY_DATE=ENTRY_DATE FROM PDCTOTAL_HIST 
						WHERE MID=@MID AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					DELETE PDCTOTAL_HIST WHERE MID=@MID AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END

					INSERT INTO PDCTOTAL_HIST(MID, DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
						OPR_DATE, CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@MID, @DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, 
						@OPR_DATE, @CUSTOMER_REF, @ENTRY_LOC, @ENTRY_DATE,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;

					DELETE PDCTAB_HIST
						WHERE MID=@MID AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END			
					
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					
					RETURN 4;
				END

		END
    
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	update detail to PDCTab
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTab_Update]
	@MID			numeric(10,0),
	@DSL			numeric(4,0),		
	@OPR_DATE		datetime, 
	@ISSUE_DATE		datetime, 
	@NIKBRANCH_CODE	varchar(7), 
	@PAYEE_NAME		varchar(40), 
	@CHECK_SERIES	varchar(4), 
	@CHECK_NUMBER	varchar(15), 
	@CHECK_NO		varchar(8), 
	@BOOK_NO		varchar(8), 
	@CHECK_TYPE		varchar(8), 
	@ACC_NO			varchar(15), 
	@DEBIT_CREDIT	numeric(14,2), 
	@REMARK			varchar(15), 
	@BATCH_NO		varchar(8), 
	@CHECK_REF		varchar(40), 
	@ENTRY_LOC		varchar(3), 
	@DS_CODE		varchar(8),	
	@MOD_NO			numeric(3,0),
	@VALUE_TYPE		numeric(1,0),
	@IS_ROW_CHG		bit
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO PDCTAB_HIST(MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, PAYEE_NAME, 
		CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, CHECK_TYPE, ACC_NO, 
		DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, ENTRY_LOC, DS_CODE, 		
		MOD_NO,IS_AUTH,VALUE_TYPE,IS_ROW_CHG)
		VALUES(@MID,@DSL,@OPR_DATE, @ISSUE_DATE, @NIKBRANCH_CODE, @PAYEE_NAME, 
		@CHECK_SERIES, @CHECK_NUMBER, @CHECK_NO, @BOOK_NO, @CHECK_TYPE, @ACC_NO, 
		@DEBIT_CREDIT, @REMARK, @BATCH_NO, @CHECK_REF, @ENTRY_LOC, @DS_CODE,		
		@MOD_NO,0,@VALUE_TYPE,@IS_ROW_CHG);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END

GO






-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Apr-13
-- Description:	Authorize record to CHECKTOTAL
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CheckTotal_Auth]	
	@MID			numeric(10,0),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@DS_CODE		varchar(8),
			@OPR_DATE		datetime,
			@ENTRY_LOC		varchar(3),
			@TOTAL_CHKNO	int, 
			@TOTAL_CHKAMT	numeric(14,2), 
			@CUSTOMER_REF	varchar(50),		
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT DS_CODE from CHECKTOTAL_HIST 
			  WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@DS_CODE=DS_CODE,@OPR_DATE=OPR_DATE,@ENTRY_LOC=ENTRY_LOC,
				@TOTAL_CHKNO=TOTAL_CHKNO, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT,@CUSTOMER_REF=CUSTOMER_REF,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CHECKTOTAL_HIST 
				WHERE MID=@MID AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CHECKTOTAL_HIST(MID, DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
				OPR_DATE,CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, AUTH_DATETIME, AUTH_FROM, 
				MOD_NO, [STATUS], IS_AUTH)
				SELECT MID, DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
				OPR_DATE, CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, AUTH_DATETIME, AUTH_FROM, 
				MOD_NO, [STATUS],1 FROM CHECKTOTAL
				WHERE MID=@MID;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CHECKTOTAL_HIST
				SET [STATUS] = 'O' 
				WHERE MID=@MID
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CHECKTOTAL
				SET
				DS_CODE=@DS_CODE,OPR_DATE=@OPR_DATE,ENTRY_LOC=@ENTRY_LOC,
				TOTAL_CHKNO=@TOTAL_CHKNO,
				TOTAL_CHKAMT=@TOTAL_CHKAMT,CUSTOMER_REF=@CUSTOMER_REF, 
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE MID=@MID;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CHECKTOTAL_HIST WHERE MID=@MID
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN  
			INSERT INTO CHECKTOTAL(MID, DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
				CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, 
				AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS])
				SELECT MID,DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
					CUSTOMER_REF, ENTRY_LOC,ENTRY_DATE,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CHECKTOTAL_HIST
					WHERE MID=@MID AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CHECKTOTAL_HIST WHERE MID=@MID
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update CLEARINGTAB

	INSERT INTO CLEARINGTAB_HIST(MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO, IS_AUTH,VALUE_TYPE,IS_ROW_CHG)
		SELECT MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO, 1,VALUE_TYPE,IS_ROW_CHG
		FROM CLEARINGTAB
		WHERE MID=@MID;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CLEARINGTAB WHERE MID=@MID;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CLEARINGTAB(MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO,VALUE_TYPE,IS_ROW_CHG)
		SELECT MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO,VALUE_TYPE,IS_ROW_CHG
		FROM CLEARINGTAB_HIST 
		WHERE MID=@MID AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CLEARINGTAB_HIST WHERE MID=@MID AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	Authorize record to PDCTOTAL
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTotal_Auth]	
	@MID			numeric(10,0),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@DS_CODE		varchar(8),
			@OPR_DATE		datetime,
			@ENTRY_LOC		varchar(3),
			@TOTAL_CHKNO	int, 
			@TOTAL_CHKAMT	numeric(14,2), 
			@CUSTOMER_REF	varchar(50),		
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT DS_CODE from PDCTOTAL_HIST 
			  WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@DS_CODE=DS_CODE,@OPR_DATE=OPR_DATE,@ENTRY_LOC=ENTRY_LOC,
				@TOTAL_CHKNO=TOTAL_CHKNO, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT,@CUSTOMER_REF=CUSTOMER_REF,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM PDCTOTAL_HIST 
				WHERE MID=@MID AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO PDCTOTAL_HIST(MID, DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
				OPR_DATE, CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, AUTH_DATETIME, AUTH_FROM, 
				MOD_NO, [STATUS], IS_AUTH, PDC_TRANS)
				SELECT MID, DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
				OPR_DATE, CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, AUTH_DATETIME, AUTH_FROM, 
				MOD_NO, [STATUS],1, PDC_TRANS FROM PDCTOTAL
				WHERE MID=@MID;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE PDCTOTAL_HIST
				SET [STATUS] = 'O' 
				WHERE MID=@MID
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE PDCTOTAL
				SET
				DS_CODE=@DS_CODE,OPR_DATE=@OPR_DATE,ENTRY_LOC=@ENTRY_LOC,
				TOTAL_CHKNO=@TOTAL_CHKNO,
				TOTAL_CHKAMT=@TOTAL_CHKAMT,CUSTOMER_REF=@CUSTOMER_REF, 
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE MID=@MID;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE PDCTOTAL_HIST WHERE MID=@MID
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN  
			INSERT INTO PDCTOTAL(MID, DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE,
				CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, 
				AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], PDC_TRANS)
				SELECT MID,DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
					CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L', PDC_TRANS
					FROM PDCTOTAL_HIST
					WHERE MID=@MID AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE PDCTOTAL_HIST WHERE MID=@MID
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update PDCTAB

	INSERT INTO PDCTAB_HIST(MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, MOD_NO, IS_AUTH, VALUE_TYPE,IS_ROW_CHG)
		SELECT MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, MOD_NO, 1, VALUE_TYPE,IS_ROW_CHG
		FROM PDCTAB
		WHERE MID=@MID;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE PDCTAB WHERE MID=@MID;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO PDCTAB(MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, MOD_NO,VALUE_TYPE,IS_ROW_CHG)
		SELECT MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, MOD_NO, VALUE_TYPE,IS_ROW_CHG
		FROM PDCTAB_HIST 
		WHERE MID=@MID AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE PDCTAB_HIST WHERE MID=@MID AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Jul-13
-- Description:	Remove record from PDCTotal
-- =============================================
ALTER PROCEDURE [dbo].[CMS_PDCTotal_Remove]
	@MID		numeric(10,0),
	@MOD_NO		int,	
	@RET_MOD_NO	int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@DS_CODE		varchar(8),
			@OPR_DATE		datetime,
			@ENTRY_LOC		varchar(3),
			@TOTAL_CHKNO	int, 
			@TOTAL_CHKAMT	numeric(14,2), 
			@CUSTOMER_REF	varchar(50),
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@ENTRY_DATE		datetime,
			@PDC_TRANS		bit;
	
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT DS_CODE from PDCTOTAL
			  WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@DS_CODE=DS_CODE,@OPR_DATE=OPR_DATE,@ENTRY_LOC=ENTRY_LOC,
				@TOTAL_CHKNO=TOTAL_CHKNO,@TOTAL_CHKAMT=TOTAL_CHKAMT,
				@CUSTOMER_REF=CUSTOMER_REF,@ENTRY_DATE=ENTRY_DATE,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@PDC_TRANS=PDC_TRANS
				FROM PDCTOTAL
				WHERE MID=@MID AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			IF (@PDC_TRANS = 1)
				BEGIN
					-- transferred item 
					ROLLBACK TRANSACTION;
					RETURN 12;
				END;

			DELETE PDCTOTAL_HIST WHERE MID=@MID AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				PDCTOTAL_HIST (MID,DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
				CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH,PDC_TRANS)
				VALUES(@MID,@DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, @OPR_DATE, 
				@CUSTOMER_REF, @ENTRY_LOC, @ENTRY_DATE,
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0,@PDC_TRANS)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


-----------

			DELETE PDCTAB_HIST
				WHERE MID=@MID AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO PDCTAB_HIST(MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
				PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
				CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF,
				ENTRY_LOC, DS_CODE, MOD_NO, IS_AUTH, VALUE_TYPE,IS_ROW_CHG)
				SELECT MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
				PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
				CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF,
				ENTRY_LOC, DS_CODE, @RET_MOD_NO, 0, VALUE_TYPE,IS_ROW_CHG
				FROM PDCTAB
				WHERE MID=@MID AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			
-----------
			

			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT DS_CODE from PDCTOTAL_HIST 
						WHERE MID=@MID AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE PDCTOTAL_HIST
						WHERE MID=@MID AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE PDCTAB_HIST 
						WHERE MID=@MID AND MOD_NO=@MOD_NO AND IS_AUTH=0 ;
					
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
	
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 22-Jul-13
-- Description: Process for PDC Transfer
-- =============================================

ALTER PROCEDURE [dbo].[CMS_Process_PDCTransfer]
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3)	
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE 
		@v_MID		numeric(10,0);
	

	DECLARE tmpcursor1 CURSOR FOR
		SELECT MID
			FROM PDCTotal 
			WHERE OPR_DATE=@OPR_DATE AND ENTRY_LOC=@ENTRY_LOC
			AND (PDC_TRANS IS NULL OR PDC_TRANS=0) AND [STATUS]='L';

	OPEN tmpcursor1;
	FETCH NEXT FROM tmpcursor1 
        INTO @v_MID;

	WHILE @@FETCH_STATUS=0 
 	BEGIN

		INSERT INTO CHECKTOTAL(MID,DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
			CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE,
			INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
			AUTH_BY, AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS])
			SELECT MID,DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
			CUSTOMER_REF, ENTRY_LOC, ENTRY_DATE,
			INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
			AUTH_BY, AUTH_DATETIME, AUTH_FROM, 1, [STATUS]
			FROM PDCTOTAL
			WHERE MID=@v_MID;


		INSERT INTO CLEARINGTAB(MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, PAYEE_NAME, 
			CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, CHECK_TYPE, ACC_NO, 
			DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, ENTRY_LOC, DS_CODE, 
			RTN_STATUS, IS_PDC,	MOD_NO, VALUE_TYPE)
			SELECT MID,DSL,OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, PAYEE_NAME, 
			CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, CHECK_TYPE, ACC_NO, 
			DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, ENTRY_LOC, DS_CODE, 
			'O', 1,1, VALUE_TYPE
			FROM PDCTAB
			WHERE MID=@v_MID;

		UPDATE PDCTOTAL SET PDC_TRANS=1
			WHERE MID=@v_MID;		

		FETCH NEXT FROM tmpcursor1 
			INTO @v_MID;

	END

	CLOSE tmpcursor1;	
	DEALLOCATE tmpcursor1;


	RETURN 0;
	
    
END   

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	Get detail of clearing_branch by NikBranch code
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingBranch_GetDetailByNikBranch]	
	@NIKBRANCH_CODE		varchar(7)
AS
BEGIN	
	
	SET NOCOUNT ON;

	SELECT br.*,b.BANK_NAME FROM CLEARING_BRANCH br
		LEFT OUTER JOIN CLEARING_BANK b
		ON b.BANK_CODE=br.BANK_CODE
		WHERE NIKBRANCH_CODE=@NIKBRANCH_CODE;
 
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 19-Aug-13
-- Description:	Get detail of clearing_branch by Routing No
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_GetDetailByRouting]	
	@ROUTING_NO	varchar(9)
AS
BEGIN	
	
	SET NOCOUNT ON;

	SELECT br.*,b.BANK_NAME FROM CLEARING_BRANCH br
		LEFT OUTER JOIN CLEARING_BANK b
		ON b.BANK_CODE=br.BANK_CODE
		WHERE ROUTING_NO=@ROUTING_NO;

	
 
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_GetDetailByRouting] TO [ccms_sp_only]

GO



CREATE TABLE [dbo].[RETURN_CLEARING](
	MID	numeric(10,0) not null,
	DSL numeric(4,0) not null,
	CHECK_NUMBER varchar(15) not null,
	AMOUNT	numeric(14,2) not null,
	RTN_CODE varchar(2) not null,
	OPR_DATE datetime not null,
	SEQ_NUMBER varchar(50) null,
	RTN_FILENAME varchar(15) null,
	RTN_FILE_USERID varchar(20) null,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[STATUS] [char](1) NOT NULL,
	PRIMARY KEY (MID,DSL)
)
GO

CREATE TABLE [dbo].[RETURN_MISMATCH_CLEAR](
	CHECK_NUMBER varchar(15) not null,
	AMOUNT	numeric(14,2) not null,
	RTN_CODE varchar(2) not null,
	OPR_DATE datetime not null,
	SEQ_NUMBER varchar(50) null,
)
GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Aug-13
-- Description:	Get detail of ClearingTab
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingTab_GetReturnMatch]	
	@CHECK_NUMBER	varchar(15),
	@AMOUNT			numeric(14,2),
	@OPR_DATE		datetime	
AS
BEGIN	
	
	SET NOCOUNT ON;

	
		SELECT ct.*,
			br.BRANCH_NAME,
			b.BANK_CODE,b.BANK_NAME
			FROM CLEARINGTAB ct							
			LEFT OUTER JOIN CLEARING_BRANCH br
			ON br.NIKBRANCH_CODE=ct.NIKBRANCH_CODE
			LEFT OUTER JOIN CLEARING_BANK b
			ON b.BANK_CODE=br.BANK_CODE					
			WHERE ct.CHECK_NUMBER=@CHECK_NUMBER AND ct.DEBIT_CREDIT=@AMOUNT
			AND OPR_DATE=@OPR_DATE;	
		
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingTab_GetReturnMatch] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Aug-13
-- Description:	Return Check add
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ReturnClearing_Add]	
	@CHECK_NUMBER	varchar(15),
	@AMOUNT			numeric(14,2),
	@RTN_CODE		varchar(2),
	@OPR_DATE		datetime,
	@SEQ_NUMBER		varchar(50),
	@RET_MID		numeric(10,0) output,
	@RET_DSL		numeric(4,0) output	
AS
BEGIN	
	
	DECLARE
		@v_cnt	int;
	
		SELECT @v_cnt=COUNT(*)
			FROM CLEARINGTAB ct											
			WHERE ct.CHECK_NUMBER=@CHECK_NUMBER AND ct.DEBIT_CREDIT=@AMOUNT
			AND OPR_DATE=@OPR_DATE;
		
		IF @v_cnt=0
		BEGIN
			RETURN 4;			
		END

		IF @v_cnt>1
		BEGIN
			RETURN 1;			
		END

		SELECT @RET_MID=MID,@RET_DSL=DSL
			FROM CLEARINGTAB ct											
			WHERE ct.CHECK_NUMBER=@CHECK_NUMBER AND ct.DEBIT_CREDIT=@AMOUNT
			AND OPR_DATE=@OPR_DATE;
	
		INSERT INTO RETURN_CLEARING(MID, DSL, CHECK_NUMBER, AMOUNT, RTN_CODE, 
			OPR_DATE, SEQ_NUMBER,
			INPUT_BY, 
			INPUT_DATETIME, INPUT_FROM, [STATUS])
			VALUES(@RET_MID, @RET_DSL, @CHECK_NUMBER, @AMOUNT, @RTN_CODE, 
			@OPR_DATE,@SEQ_NUMBER,  
			substring(suser_name(),charindex('\',suser_name())+1,20),
			GETDATE(),HOST_NAME(), 'U')

		RETURN 0;

		
END

GO

GRANT EXECUTE ON [dbo].[CMS_ReturnClearing_Add] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Aug-13
-- Description:	Get detail of ReturnClearing
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ReturnClearing_GetDetail]	
	@MID	numeric(10,0),
	@DSL	numeric(4,0)	
AS
BEGIN	
	
	SET NOCOUNT ON;

	
		SELECT rc.*,rr.REJECT_REASON
			FROM RETURN_CLEARING rc
			LEFT OUTER JOIN RETURN_REJECT rr
			ON rr.REJECT_CODE=rc.RTN_CODE
			WHERE MID=@MID AND DSL=@DSL	
		
END

GO

GRANT EXECUTE ON [dbo].[CMS_ReturnClearing_GetDetail] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Aug-13
-- Description:	Get detail from ReturnClearing table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ReturnClearing_GetDetailList]		
	@AUTH_FLAG	bit,
	@OPR_DATE	datetime
AS
BEGIN	
		
	SET NOCOUNT ON;


	IF @AUTH_FLAG=0
		BEGIN						
			SELECT rc.*,'S' = 'U'
				FROM RETURN_CLEARING rc
				WHERE rc.STATUS='U'			
		END;
	ELSE
		BEGIN
			
			SELECT rc.*,'S' = 'A'
				FROM RETURN_CLEARING rc
				WHERE rc.STATUS='L' AND rc.OPR_DATE=@OPR_DATE	
		
	
				
		END;	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_ReturnClearing_GetDetailList] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Aug-13
-- Description:	Authorize record to RETURN_CLEARING
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ReturnClearing_Auth]	
	@MID	numeric(10,0),
	@DSL	numeric(4,0)
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@RTN_CODE		varchar(2),		
			@INPUT_BY		varchar(20);			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT MID from RETURN_CLEARING 
			  WHERE MID=@MID AND DSL=@DSL)
		BEGIN
			SELECT @STATUS=[STATUS],@RTN_CODE=RTN_CODE,
				@INPUT_BY=INPUT_BY
				FROM RETURN_CLEARING 
				WHERE MID=@MID AND @DSL=@DSL;
			IF (@STATUS = 'L')
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			

		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;
	
	DELETE CHECKTOTAL_HIST WHERE MID=@MID AND IS_AUTH=0;
	DELETE CLEARINGTAB_HIST WHERE MID=@MID AND IS_AUTH=0;

	UPDATE CLEARINGTAB
		SET RTN_STATUS='R',RTN_CODE=@RTN_CODE,
			RETURN_DATE=CONVERT(datetime,CONVERT(varchar(12), GETDATE()))
		WHERE MID=@MID AND @DSL=@DSL;

	UPDATE RETURN_CLEARING
		SET [STATUS]='L',
			AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
			AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME()
		WHERE MID=@MID AND @DSL=@DSL;

	COMMIT TRANSACTION;

	RETURN 0;


    
END


GO


GRANT EXECUTE ON [dbo].[CMS_ReturnClearing_Auth] TO [ccms_sp_only]

GO

DROP TABLE IRE_RET;

GO

CREATE TABLE [dbo].[IRE_RET](
	[ChequeSequenceNumber] [varchar](50) NULL,
	[ItemAmount] [float] NULL,
	[ReturnReason] [varchar](50) NULL,
	[ECEInstitutionItemSequenceNumber] [varchar](50) NULL,
)

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 25-Jul-13
-- Description:	Add record to IRE_RET
-- =============================================
ALTER PROCEDURE [dbo].[CMS_IRERet_Add]	
	@ChequeSequenceNumber	varchar(50), 
	@ItemAmount				float, 
	@ReturnReason			varchar(50),
	@SEQ_NUMBER				varchar(50)
AS
BEGIN	
			
	
	DECLARE @ErrorVar		int; 

	SET NOCOUNT ON;

	INSERT INTO IRE_RET(ChequeSequenceNumber, ItemAmount, ReturnReason,
		ECEInstitutionItemSequenceNumber)
		VALUES(@ChequeSequenceNumber,@ItemAmount,@ReturnReason,@SEQ_NUMBER)

	SELECT @ErrorVar = @@ERROR;	

	IF @ErrorVar <> 0				
		BEGIN			
			RETURN 1;
		END
	
	RETURN 0;

	
END


GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 25-Jul-13
-- Description:	Remove record from IRE_RET
-- =============================================
ALTER PROCEDURE [dbo].[CMS_IRERet_Remove]	
AS
BEGIN	
			
	
	DECLARE @ErrorVar		int; 

	SET NOCOUNT ON;

	DELETE FROM IRE_RET;

	SELECT @ErrorVar = @@ERROR;	

	IF @ErrorVar <> 0				
		BEGIN			
			RETURN 1;
		END

	RETURN 0;

END

GO





-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Aug-13
-- Description:	Get detail from IRE_RET table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_IRERet_GetDetailList]		
AS
BEGIN	
		
	SET NOCOUNT ON;


	SELECT * FROM IRE_RET	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_IRERet_GetDetailList] TO [ccms_sp_only]

GO






-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Aug-13
-- Description:	RETURN_MISMATCH_CLEAR add
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ReturnMismatchClear_Add]	
	@CHECK_NUMBER	varchar(15),
	@AMOUNT			numeric(14,2),
	@RTN_CODE		varchar(2),
	@OPR_DATE		datetime,
	@SEQ_NUMBER		varchar(50)
AS
BEGIN	
	
		INSERT INTO RETURN_MISMATCH_CLEAR(CHECK_NUMBER, AMOUNT, 
			RTN_CODE, OPR_DATE, SEQ_NUMBER)
			VALUES(@CHECK_NUMBER,@AMOUNT,
			@RTN_CODE,@OPR_DATE,@SEQ_NUMBER)

		RETURN 0;

		
END

GO

GRANT EXECUTE ON [dbo].[CMS_ReturnMismatchClear_Add] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Aug-13
-- Description:	Remove record from RETURN_MISMATCH_CLEAR
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ReturnMismatchClear_Remove]	
AS
BEGIN	
			
	
	DECLARE @ErrorVar		int; 

	SET NOCOUNT ON;

	DELETE FROM RETURN_MISMATCH_CLEAR;

	SELECT @ErrorVar = @@ERROR;	

	IF @ErrorVar <> 0				
		BEGIN			
			RETURN 1;
		END

	RETURN 0;

END


GO

GRANT EXECUTE ON [dbo].[CMS_ReturnMismatchClear_Remove] TO [ccms_sp_only]

GO



CREATE view [dbo].[V_RETURN_MISMATCH_CLEAR]      
AS    
(
	SELECT * FROM dbo.RETURN_MISMATCH_CLEAR
)

GO

GRANT SELECT ON [dbo].[V_RETURN_MISMATCH_CLEAR] TO [ccms_sp_only]
GO



CREATE view [dbo].[V_RETURN_SEQ_CLEAR]      
AS    
(
	SELECT * FROM dbo.RETURN_CLEARING
		WHERE STATUS='L'
)

GO

GRANT SELECT ON [dbo].[V_RETURN_SEQ_CLEAR] TO [ccms_sp_only]
GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Aug-13
-- Description:	Get return outstanding of ClearingTab
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingTab_GetReturnOutstanding]		
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3)	
AS
BEGIN	
	
	SET NOCOUNT ON;

	SELECT * 
		FROM CLEARINGTAB ct
		INNER JOIN RETURN_CLEARING rc
		ON ct.MID=rc.MID AND ct.DSL=rc.DSL
		WHERE rc.RTN_FILENAME IS NULL
		AND ct.OPR_DATE <=@OPR_DATE AND ct.ENTRY_LOC=@ENTRY_LOC
		ORDER BY ct.OPR_DATE,ct.DS_CODE,ct.CHECK_NUMBER
	
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingTab_GetReturnOutstanding] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Aug-13
-- Description: Get detail for clearing return flexfile
-- =============================================

CREATE PROCEDURE [dbo].[CMS_ClearingTab_GetFlexReturn]
	@OPR_DATE	datetime,	
	@ENTRY_LOC	varchar(3)
AS
BEGIN

	SELECT rc.OPR_DATE,SUM(rc.AMOUNT) AS AMOUNT, COUNT(rc.CHECK_NUMBER) AS TOTCHECK
		FROM CLEARINGTAB ct
		INNER JOIN RETURN_CLEARING rc
		ON ct.MID=rc.MID AND ct.DSL=rc.DSL
		WHERE rc.OPR_DATE<=@OPR_DATE AND ct.ENTRY_LOC=@ENTRY_LOC
		AND rc.RTN_FILENAME IS NULL
		GROUP BY rc.OPR_DATE

			         
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingTab_GetFlexReturn] TO [ccms_sp_only]

GO


CREATE TABLE [dbo].[REVERSAL_HIST_CLEARING_RET](
	[AMOUNT] [numeric](14, 2) NULL,
	[VALUE_DATE] [datetime] NULL,
	[USERID] [varchar](20) NULL,
	[FLEX_FILENAME] [varchar](15) NULL,
	[REFACC_NO] [varchar](16) NULL,
	[ACC_NO] [varchar](16) NULL,
	[ENTRY_LOC] [varchar](3) NULL,
	[DS_CODE] [varchar](16) NULL,
	[CHECK_NUMBER] [varchar](30) NULL
) 

GO



CREATE view [dbo].[V_RETURN_HIST_CLEAR]      
AS    
(
	SELECT rc.AMOUNT, rc.VALUE_DATE, rc.FLEX_FILENAME,   
		rc.ACC_NO, rc.ENTRY_LOC, cc.ACC_NAME FROM 
		REVERSAL_HIST_CLEARING_RET rc
		LEFT OUTER JOIN CLEARING_CLIENT cc
		ON rc.ACC_NO=cc.ACC_NO
)

GO

GRANT SELECT ON [dbo].[V_RETURN_HIST_CLEAR] TO [ccms_sp_only]
GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Aug-13
-- Description: Update Clearing Return  Final
-- =============================================

CREATE PROCEDURE [dbo].[CMS_Process_ClearingDataReturnUpdate]
	@OPR_DATE		datetime,	
	@ENTRY_LOC		varchar(3),
	@FLEX_FILENAME	varchar(15),
	@REFACC_NO		varchar(16)
AS
BEGIN

	INSERT INTO REVERSAL_HIST_CLEARING_RET(AMOUNT, VALUE_DATE, 
		USERID, 
		FLEX_FILENAME, REFACC_NO, ACC_NO, ENTRY_LOC, DS_CODE, CHECK_NUMBER)
		SELECT rc.AMOUNT,@OPR_DATE,
			substring(suser_name(),charindex('\',suser_name())+1,20),
			@FLEX_FILENAME,@REFACC_NO,ct.REMARK,@ENTRY_LOC,ct.DS_CODE,rc.CHECK_NUMBER
			FROM CLEARINGTAB ct
			INNER JOIN RETURN_CLEARING rc
			ON ct.MID=rc.MID AND ct.DSL=rc.DSL
			WHERE rc.RTN_FILENAME IS NULL
			AND ct.OPR_DATE <=@OPR_DATE AND ct.ENTRY_LOC=@ENTRY_LOC;

	UPDATE RETURN_CLEARING 
		SET RTN_FILENAME=@FLEX_FILENAME,
		RTN_FILE_USERID=substring(suser_name(),charindex('\',suser_name())+1,20)	
		WHERE RTN_FILENAME IS NULL
		AND MID IN 
			(SELECT ct.MID 
			FROM CLEARINGTAB ct
			WHERE ct.RTN_STATUS='R' AND 
			ct.OPR_DATE<=@OPR_DATE AND
			ct.ENTRY_LOC=@ENTRY_LOC
		)
	
		
	

END


GO

GRANT EXECUTE ON [dbo].[CMS_Process_ClearingDataReturnUpdate] TO [ccms_sp_only]

GO


CREATE view [dbo].[V_RETURN_HIST_CLEAR_CHECK]      
AS    
(	
	SELECT rc.AMOUNT,rc.OPR_DATE,ct.REMARK,ct.ENTRY_LOC,cc.ACC_NAME 
		FROM CLEARINGTAB ct
		INNER JOIN RETURN_CLEARING rc
		ON ct.MID=rc.MID AND ct.DSL=rc.DSL
		LEFT OUTER JOIN CLEARING_CLIENT cc
		ON ct.REMARK=cc.ACC_NO
		WHERE rc.RTN_FILENAME IS NULL
		
)

GO

GRANT SELECT ON [dbo].[V_RETURN_HIST_CLEAR_CHECK] TO [ccms_sp_only]
GO



