USE [CCMS]
GO


CREATE TABLE [dbo].[CLEARING_CLIENT](
	[ACC_NO] [varchar](15) NOT NULL,
	[ACC_NAME] [varchar](50) NOT NULL,
	[MAIL_ADD] [varchar](256) NULL,
	[CONTACT] [varchar](50) NULL,	
	[SPEED_CR_TYPE] [varchar](25) NULL,	
	[IS_DISABLE] [bit] NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
 PRIMARY KEY([ACC_NO]))

GO

CREATE TABLE [dbo].[CLEARING_CLIENT_HIST](
	[ACC_NO] [varchar](15) NOT NULL,
	[ACC_NAME] [varchar](50) NOT NULL,
	[MAIL_ADD] [varchar](256) NULL,
	[CONTACT] [varchar](50) NULL,	
	[SPEED_CR_TYPE] [varchar](25) NULL,	
	[IS_DISABLE] [bit] NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	IS_AUTH	bit NOT NULL,
 PRIMARY KEY([ACC_NO],MOD_NO))

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Add detail to ClearingClient table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClient_Add]		
	@ACC_NO				varchar(15),  
	@ACC_NAME			varchar(50),
	@MAIL_ADD			varchar(256), 
	@CONTACT			varchar(50), 		
	@SPEED_CR_TYPE		varchar(25),	
	@IS_DISABLE			bit
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT ACC_NO FROM CLEARING_CLIENT WHERE ACC_NO=@ACC_NO)
		BEGIN
			-- Duplicate Entry
			ROLLBACK TRANSACTION;		
			RETURN 2	
		END
	
	DELETE CLEARING_CLIENT_HIST WHERE 
		ACC_NO=@ACC_NO AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	ELSE

	INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME,MAIL_ADD,
		CONTACT, SPEED_CR_TYPE,IS_DISABLE,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
		@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
	RETURN 0;
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClient_Add] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Authorize record to Clearing_Client table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClient_Auth]	
	@ACC_NO			varchar(15),
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),			
			@ACC_NAME			varchar(50),
			@MAIL_ADD			varchar(256), 
			@CONTACT			varchar(50), 			
			@SPEED_CR_TYPE		varchar(25),			
			@IS_DISABLE			bit,
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),
			@AUTH_BY			varchar(20),
			@AUTH_DATETIME		datetime,
			@AUTH_FROM			varchar(30),
			@LAST_MOD_NO		int,
			@IS_AUTH			bit;			
	
	DECLARE @ErrorVar1		int; 
	
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT_HIST 
			  WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS], 
				@ACC_NAME=ACC_NAME,@MAIL_ADD=MAIL_ADD,@CONTACT=CONTACT,
				@SPEED_CR_TYPE=SPEED_CR_TYPE,@IS_DISABLE=IS_DISABLE,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLEARING_CLIENT_HIST 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLEARING_CLIENT_HIST 
				SELECT *,1 FROM CLEARING_CLIENT
				WHERE ACC_NO=@ACC_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLEARING_CLIENT_HIST
				SET [STATUS] = 'O' 
				WHERE ACC_NO=@ACC_NO 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CLEARING_CLIENT
				SET ACC_NAME=@ACC_NAME,MAIL_ADD=@MAIL_ADD,CONTACT=@CONTACT,
				SPEED_CR_TYPE=@SPEED_CR_TYPE, IS_DISABLE=@IS_DISABLE,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE ACC_NO=@ACC_NO;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CLEARING_CLIENT
				SELECT ACC_NO, ACC_NAME,MAIL_ADD,
					CONTACT, SPEED_CR_TYPE,IS_DISABLE, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM,
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CLEARING_CLIENT_HIST
					WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

		COMMIT TRANSACTION
		
		SELECT @ErrorVar1 = @@error;
		
		IF @ErrorVar1 = 0
			BEGIN		
				RETURN 0;
			END
		ELSE
			BEGIN
				RETURN 1;
			END
    
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClient_Auth] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Get detail of Clearing_client table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClient_GetDetail]	
	@ACC_NO	varchar(15),	
	@MOD_NO	int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT ACC_NO 
			   FROM CLEARING_CLIENT WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
			FROM CLEARING_CLIENT 
			WHERE ACC_NO=@ACC_NO AND MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
			FROM CLEARING_CLIENT_HIST
			WHERE ACC_NO=@ACC_NO AND MOD_NO = @MOD_NO
		END
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClient_GetDetail] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Get Total # of modification of CLEARING_CLIENT table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClient_GetMaxMod]	
	@ACC_NO	varchar(15)	
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM CLEARING_CLIENT_HIST 
		WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM CLEARING_CLIENT 
				WHERE ACC_NO=@ACC_NO;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClient_GetMaxMod] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Remove record from Clearing_Client table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClient_Remove]	
	@ACC_NO		varchar(15),	
	@MOD_NO		int,
	@RET_MOD_NO	int output
AS
BEGIN	
	DECLARE @STATUS				char(1),			
			@ACC_NAME			varchar(50),
			@MAIL_ADD			varchar(256), 
			@CONTACT			varchar(50), 			
			@SPEED_CR_TYPE		varchar(25),			
			@IS_DISABLE			bit,
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),			
			@IS_AUTH			bit;			
	
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT 
			  WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@ACC_NAME=ACC_NAME,@MAIL_ADD=MAIL_ADD,@CONTACT=CONTACT,
				@SPEED_CR_TYPE=SPEED_CR_TYPE,@IS_DISABLE=IS_DISABLE,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CLEARING_CLIENT 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CLEARING_CLIENT_HIST (ACC_NO, ACC_NAME,MAIL_ADD,
				CONTACT, SPEED_CR_TYPE, IS_DISABLE,				
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
				@CONTACT, @SPEED_CR_TYPE,@IS_DISABLE, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT_HIST 
					  WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CLEARING_CLIENT_HIST
						WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClient_Remove] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	update detail to Clearing_client table
-- =============================================

CREATE PROCEDURE [dbo].[CMS_ClearingClient_Update]		
	@ACC_NO				varchar(15),  
	@ACC_NAME			varchar(50),
	@MAIL_ADD			varchar(256), 
	@CONTACT			varchar(50), 	
	@SPEED_CR_TYPE		varchar(25),	
	@IS_DISABLE			bit,
	@MOD_NO				int,
	@RET_MOD_NO			int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT ACC_NO FROM CLEARING_CLIENT 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME, MAIL_ADD,
				CONTACT, SPEED_CR_TYPE, IS_DISABLE,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
				@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END				

			COMMIT TRANSACTION;
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT_HIST 
						WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME,MAIL_ADD,
						CONTACT, SPEED_CR_TYPE, IS_DISABLE,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
						@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;
					
					COMMIT TRANSACTION;
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END

		END
    
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingClient_Update] TO [ccms_sp_only]

GO





CREATE TABLE [dbo].[CLEARING_BANK](
	[BANK_CODE] [varchar](4) NOT NULL,
	[BANK_NAME] [varchar](100) NOT NULL,
	[HEAD_ADD1] [varchar](35) NULL,
	[HEAD_ADD2] [varchar](35) NULL,
	[HEAD_ADD3] [varchar](35) NULL,
	[BANK_BBK_CODE] [varchar](9) NULL,
	[ACC_NO] [varchar](16) NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
 PRIMARY KEY([BANK_CODE]))

GO


CREATE TABLE [dbo].[CLEARING_BANK_HIST](
	[BANK_CODE] [varchar](4) NOT NULL,
	[BANK_NAME] [varchar](100) NOT NULL,
	[HEAD_ADD1] [varchar](35) NULL,
	[HEAD_ADD2] [varchar](35) NULL,
	[HEAD_ADD3] [varchar](35) NULL,
	[BANK_BBK_CODE] [varchar](9) NULL,
	[ACC_NO] [varchar](16) NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	[IS_AUTH] [bit] NOT NULL,
  PRIMARY KEY 
([BANK_CODE] ,[MOD_NO])) 

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Add detail to clearing_bank table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBank_Add]	
	@BANK_CODE		varchar(4),
	@BANK_NAME 		varchar(100),
	@HEAD_ADD1 		varchar(35),
	@HEAD_ADD2 		varchar(35),
	@HEAD_ADD3		varchar(35),
	@BANK_BBK_CODE	varchar(9),
	@ACC_NO			varchar(16)		
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT BANK_CODE from CLEARING_BANK WHERE BANK_CODE=@BANK_CODE)
		BEGIN
			-- Duplicate Entry
			ROLLBACK TRANSACTION;		
			RETURN 2	
		END
	
	DELETE CLEARING_BANK_HIST WHERE 
		BANK_CODE=@BANK_CODE AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	ELSE

	INSERT INTO CLEARING_BANK_HIST(BANK_CODE, BANK_NAME,	HEAD_ADD1,HEAD_ADD2,HEAD_ADD3,
		BANK_BBK_CODE,ACC_NO,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@BANK_CODE, @BANK_NAME,@HEAD_ADD1,@HEAD_ADD2,@HEAD_ADD3,
		@BANK_BBK_CODE,@ACC_NO,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
	RETURN 0;
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBank_Add] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Authorize record to clearing_bank table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBank_Auth]	
	@BANK_CODE		varchar(4),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@BANK_NAME 		varchar(100),
			@HEAD_ADD1 		varchar(35),
			@HEAD_ADD2 		varchar(35),
			@HEAD_ADD3		varchar(35),
			@BANK_BBK_CODE	varchar(9),
			@ACC_NO			varchar(16),	
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@AUTH_BY		varchar(20),
			@AUTH_DATETIME	datetime,
			@AUTH_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			

	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT BANK_CODE from CLEARING_BANK_HIST 
			  WHERE BANK_CODE=@BANK_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@BANK_NAME=BANK_NAME,
				@HEAD_ADD1=HEAD_ADD1,@HEAD_ADD2=HEAD_ADD2,
				@HEAD_ADD3=HEAD_ADD3,@BANK_BBK_CODE=BANK_BBK_CODE,@ACC_NO=ACC_NO,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLEARING_BANK_HIST 
				WHERE BANK_CODE=@BANK_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLEARING_BANK_HIST 
				SELECT *,1 FROM CLEARING_BANK
				WHERE BANK_CODE=@BANK_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLEARING_BANK_HIST
				SET [STATUS] = 'O' 
				WHERE BANK_CODE=@BANK_CODE 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CLEARING_BANK
				SET BANK_NAME=@BANK_NAME,
				HEAD_ADD1=@HEAD_ADD1,HEAD_ADD2=@HEAD_ADD2,
				HEAD_ADD3=@HEAD_ADD3,BANK_BBK_CODE=@BANK_BBK_CODE,ACC_NO=@ACC_NO,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE BANK_CODE=@BANK_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLEARING_BANK_HIST WHERE BANK_CODE=@BANK_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CLEARING_BANK
				SELECT BANK_CODE, BANK_NAME, HEAD_ADD1, HEAD_ADD2, HEAD_ADD3, 
					BANK_BBK_CODE,ACC_NO, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CLEARING_BANK_HIST
					WHERE BANK_CODE=@BANK_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CLEARING_BANK_HIST WHERE BANK_CODE=@BANK_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

		COMMIT TRANSACTION
		
		SELECT @ErrorVar1 = @@error;
		
		IF @ErrorVar1 = 0
			BEGIN		
				RETURN 0;
			END
		ELSE
			BEGIN
				RETURN 1;
			END
    
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBank_Auth] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Get detail of clearing bank table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBank_GetDetail]	
	@BANK_CODE		varchar(4),	
	@MOD_NO			int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT BANK_CODE 
			   FROM CLEARING_BANK WHERE BANK_CODE=@BANK_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
			FROM CLEARING_BANK 
			WHERE BANK_CODE=@BANK_CODE AND MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
			FROM CLEARING_BANK_HIST
			WHERE BANK_CODE=@BANK_CODE AND MOD_NO = @MOD_NO
		END
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBank_GetDetail] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Get detail to Clearing_bank table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBank_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;


	IF @AUTH_FLAG=0
		BEGIN						
			SELECT *,'S' = 'U'				 
				FROM CLEARING_BANK_HIST 
				WHERE IS_AUTH=0
				ORDER BY BANK_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CLEARING_BANK
						WHERE [STATUS] ='L'					
						ORDER BY BANK_CODE;
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CLEARING_BANK
						WHERE [STATUS] IN ('L','D')					
						ORDER BY BANK_CODE;
				END;
		END;	
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBank_GetDetailList] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Get Total # of modification of Clearing_bank table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBank_GetMaxMod]	
	@BANK_CODE		varchar(4)	
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM CLEARING_BANK_HIST 
		WHERE BANK_CODE=@BANK_CODE AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM CLEARING_BANK 
				WHERE BANK_CODE=@BANK_CODE;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBank_GetMaxMod] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Remove record from clearing_bank table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBank_Remove]	
	@BANK_CODE		varchar(4),	
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@BANK_NAME 		varchar(100),
			@HEAD_ADD1 		varchar(35),
			@HEAD_ADD2 		varchar(35),
			@HEAD_ADD3		varchar(20),
			@BANK_BBK_CODE	varchar(9),
			@ACC_NO			varchar(16),
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar		int; 
			

	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT BANK_CODE from CLEARING_BANK
			  WHERE BANK_CODE=@BANK_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@BANK_NAME=BANK_NAME,
				@HEAD_ADD1=HEAD_ADD1,@HEAD_ADD2=HEAD_ADD2,
				@HEAD_ADD3=HEAD_ADD3,@BANK_BBK_CODE=BANK_BBK_CODE,@ACC_NO=ACC_NO,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CLEARING_BANK
				WHERE BANK_CODE=@BANK_CODE AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CLEARING_BANK_HIST WHERE BANK_CODE=@BANK_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CLEARING_BANK_HIST (BANK_CODE, BANK_NAME, HEAD_ADD1, HEAD_ADD2, HEAD_ADD3, 
				BANK_BBK_CODE, ACC_NO,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@BANK_CODE, @BANK_NAME, @HEAD_ADD1, @HEAD_ADD2, @HEAD_ADD3, 
				@BANK_BBK_CODE, @ACC_NO,
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT BANK_CODE from CLEARING_BANK_HIST 
					  WHERE BANK_CODE=@BANK_CODE AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CLEARING_BANK_HIST
						WHERE BANK_CODE=@BANK_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBank_Remove] TO [ccms_sp_only]

GO




CREATE TABLE [dbo].[CLEARING_LOCATION](
	[LOCATION_CODE] [varchar](4) NOT NULL,
	[LOCATION_NAME] [varchar](35) NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
PRIMARY KEY([LOCATION_CODE]))

GO

CREATE TABLE [dbo].[CLEARING_LOCATION_HIST](
	[LOCATION_CODE] [varchar](4) NOT NULL,
	[LOCATION_NAME] [varchar](35) NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	[IS_AUTH] [bit] NOT NULL,
PRIMARY KEY(
	[LOCATION_CODE],
	[MOD_NO]))

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Add detail to Clearing_Location table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingLocation_Add]	
	@LOCATION_CODE		varchar(4),
	@LOCATION_NAME 		varchar(35)	
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT LOCATION_CODE FROM CLEARING_LOCATION WHERE LOCATION_CODE=@LOCATION_CODE)
		BEGIN
			-- Duplicate Entry
			ROLLBACK TRANSACTION;		
			RETURN 2	
		END
	
	DELETE CLEARING_LOCATION_HIST WHERE 
		LOCATION_CODE=@LOCATION_CODE AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	ELSE

	INSERT INTO CLEARING_LOCATION_HIST(LOCATION_CODE, LOCATION_NAME,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@LOCATION_CODE, @LOCATION_NAME,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
	RETURN 0;
	   
END




GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_Add] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Authorize record to Clearing_location table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingLocation_Auth]	
	@LOCATION_CODE	varchar(4),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@LOCATION_NAME	varchar(35),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@AUTH_BY		varchar(20),
			@AUTH_DATETIME	datetime,
			@AUTH_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			

	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT LOCATION_CODE from CLEARING_LOCATION_HIST 
			  WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@LOCATION_NAME=LOCATION_NAME,				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLEARING_LOCATION_HIST 
				WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLEARING_LOCATION_HIST 
				SELECT *,1 FROM CLEARING_LOCATION
				WHERE LOCATION_CODE=@LOCATION_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLEARING_LOCATION_HIST
				SET [STATUS] = 'O' 
				WHERE LOCATION_CODE=@LOCATION_CODE 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CLEARING_LOCATION
				SET LOCATION_NAME=@LOCATION_NAME,				
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE LOCATION_CODE=@LOCATION_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLEARING_LOCATION_HIST WHERE LOCATION_CODE=@LOCATION_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CLEARING_LOCATION
				SELECT LOCATION_CODE, LOCATION_NAME,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CLEARING_LOCATION_HIST
					WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CLEARING_LOCATION_HIST WHERE LOCATION_CODE=@LOCATION_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

		COMMIT TRANSACTION
		
		SELECT @ErrorVar1 = @@error;
		
		IF @ErrorVar1 = 0
			BEGIN		
				RETURN 0;
			END
		ELSE
			BEGIN
				RETURN 1;
			END
	
    
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_Auth] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get detail of location table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingLocation_GetDetail]	
	@LOCATION_CODE	varchar(4),	
	@MOD_NO			int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT LOCATION_CODE 
			   FROM CLEARING_LOCATION WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
			FROM CLEARING_LOCATION 
			WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
			FROM CLEARING_LOCATION_HIST
			WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO = @MOD_NO
		END
END



GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_GetDetail] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get detail of Clearing_location table by location code
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingLocation_GetDetailByCode]	
	@LOCATION_CODE		varchar(4)
AS
BEGIN	
	
	SET NOCOUNT ON;
	
	SELECT * FROM CLEARING_LOCATION 
	WHERE LOCATION_CODE=@LOCATION_CODE
 
END



GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_GetDetailByCode] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	get detail from Clearing_Location table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingLocation_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM CLEARING_LOCATION_HIST 
				WHERE IS_AUTH=0			
				ORDER BY IS_AUTH,LOCATION_CODE;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CLEARING_LOCATION
						WHERE STATUS ='L'					
						ORDER BY LOCATION_CODE
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN STATUS = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CLEARING_LOCATION
						WHERE STATUS in ('L','D')					
						ORDER BY LOCATION_CODE
				END;
		END;
	   
END



GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_GetDetailList] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	get list records of Clearing_location table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingLocation_GetList]	
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT LOCATION_CODE,LOCATION_NAME FROM CLEARING_LOCATION WHERE STATUS='L'
	ORDER BY LOCATION_NAME;
	
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_GetList] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get Total # of modification of Clearing_location table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingLocation_GetMaxMod]	
	@LOCATION_CODE		varchar(4)	
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM CLEARING_LOCATION_HIST 
		WHERE LOCATION_CODE=@LOCATION_CODE AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM CLEARING_LOCATION 
				WHERE LOCATION_CODE=@LOCATION_CODE;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END



GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_GetMaxMod] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Remove record from Clearing_location table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingLocation_Remove]	
	@LOCATION_CODE	varchar(4),	
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@LOCATION_NAME 	varchar(35),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar		int; 
			

	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT LOCATION_CODE from CLEARING_LOCATION 
			  WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@LOCATION_NAME=LOCATION_NAME,				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CLEARING_LOCATION 
				WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CLEARING_LOCATION_HIST WHERE LOCATION_CODE=@LOCATION_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CLEARING_LOCATION_HIST (LOCATION_CODE, LOCATION_NAME,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@LOCATION_CODE, @LOCATION_NAME, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT LOCATION_CODE from CLEARING_LOCATION_HIST 
					  WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CLEARING_LOCATION_HIST
						WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END



GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_Remove] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	update detail to Clearing_location table
-- =============================================

CREATE PROCEDURE [dbo].[CMS_ClearingLocation_Update]	
	@LOCATION_CODE	varchar(4),
	@LOCATION_NAME 	varchar(35),	
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT LOCATION_CODE FROM CLEARING_LOCATION 
				WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CLEARING_LOCATION_HIST WHERE LOCATION_CODE=@LOCATION_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CLEARING_LOCATION_HIST(LOCATION_CODE, LOCATION_NAME,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@LOCATION_CODE, @LOCATION_NAME,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END				

			COMMIT TRANSACTION;
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT LOCATION_CODE from CLEARING_LOCATION_HIST 
						WHERE LOCATION_CODE=@LOCATION_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CLEARING_LOCATION_HIST WHERE LOCATION_CODE=@LOCATION_CODE AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					INSERT INTO CLEARING_LOCATION_HIST(LOCATION_CODE, LOCATION_NAME,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@LOCATION_CODE, @LOCATION_NAME,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;
					
					COMMIT TRANSACTION;
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END

		END
    
END




GO

GRANT EXECUTE ON [dbo].[CMS_ClearingLocation_Update] TO [ccms_sp_only]

GO



CREATE TABLE [dbo].[CLEARING_ZONE](
	[ZONE_CODE] [varchar](4) NOT NULL,
	[ZONE_NAME] [varchar](35) NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
PRIMARY KEY([ZONE_CODE]))

GO


CREATE TABLE [dbo].[CLEARING_ZONE_HIST](
	[ZONE_CODE] [varchar](4) NOT NULL,
	[ZONE_NAME] [varchar](35) NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	[IS_AUTH] [bit] NOT NULL,
PRIMARY KEY([ZONE_CODE],[MOD_NO]))

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Add detail to Zone table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingZone_Add]	
	@ZONE_CODE		varchar(4),
	@ZONE_NAME 		varchar(35)	
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT ZONE_CODE FROM CLEARING_ZONE WHERE ZONE_CODE=@ZONE_CODE)
		BEGIN
			-- Duplicate Entry
			ROLLBACK TRANSACTION;		
			RETURN 2	
		END
	
	DELETE CLEARING_ZONE_HIST WHERE 
		ZONE_CODE=@ZONE_CODE AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	ELSE

	INSERT INTO CLEARING_ZONE_HIST(ZONE_CODE, ZONE_NAME,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@ZONE_CODE, @ZONE_NAME,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
	RETURN 0;
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingZone_Add] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Authorize record to Clearing_zone table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingZone_Auth]	
	@ZONE_CODE	varchar(4),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@ZONE_NAME		varchar(35),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@AUTH_BY		varchar(20),
			@AUTH_DATETIME	datetime,
			@AUTH_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			

	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT ZONE_CODE from CLEARING_ZONE_HIST 
			  WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@ZONE_NAME=ZONE_NAME,				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLEARING_ZONE_HIST 
				WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLEARING_ZONE_HIST 
				SELECT *,1 FROM CLEARING_ZONE
				WHERE ZONE_CODE=@ZONE_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLEARING_ZONE_HIST
				SET [STATUS] = 'O' 
				WHERE ZONE_CODE=@ZONE_CODE 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CLEARING_ZONE
				SET ZONE_NAME=@ZONE_NAME,				
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE ZONE_CODE=@ZONE_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLEARING_ZONE_HIST WHERE ZONE_CODE=@ZONE_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CLEARING_ZONE
				SELECT ZONE_CODE, ZONE_NAME,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CLEARING_ZONE_HIST
					WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CLEARING_ZONE_HIST WHERE ZONE_CODE=@ZONE_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

		COMMIT TRANSACTION
		
		SELECT @ErrorVar1 = @@error;
		
		IF @ErrorVar1 = 0
			BEGIN		
				RETURN 0;
			END
		ELSE
			BEGIN
				RETURN 1;
			END

    
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingZone_Auth] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get detail of zone table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingZone_GetDetail]	
	@ZONE_CODE	varchar(4),	
	@MOD_NO			int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT ZONE_CODE 
			   FROM CLEARING_ZONE WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
			FROM CLEARING_ZONE 
			WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
			FROM CLEARING_ZONE_HIST
			WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO = @MOD_NO
		END
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingZone_GetDetail] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get detail to clearing_zone table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingZone_GetDetailList]		
	@DEL_FLAG	int,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @AUTH_FLAG=0
		BEGIN
			SELECT *,'S' = 'U'				 
				FROM CLEARING_ZONE_HIST 
				WHERE IS_AUTH=0			
				ORDER BY ZONE_CODE;
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT *,1,'S' = 'A'				
						FROM CLEARING_ZONE
						WHERE [STATUS] ='L'					
						ORDER BY ZONE_CODE
				END;
			ELSE
				BEGIN
					SELECT *,1,'S' = 
						CASE  
							WHEN [STATUS] = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CLEARING_ZONE
						WHERE [STATUS] in ('L','D')					
						ORDER BY ZONE_CODE
				END;
		END;
	   
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingZone_GetDetailList] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Mar-13
-- Description:	get list records of clearing_zone table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingZone_GetList]	
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT ZONE_CODE,ZONE_NAME FROM CLEARING_ZONE WHERE STATUS='L'
	ORDER BY ZONE_NAME;
	
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingZone_GetList] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get Total # of modification of clearing_zone table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingZone_GetMaxMod]	
	@ZONE_CODE		varchar(4)	
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM CLEARING_ZONE_HIST 
		WHERE ZONE_CODE=@ZONE_CODE AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM CLEARING_ZONE 
				WHERE ZONE_CODE=@ZONE_CODE;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingZone_GetMaxMod] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Remove record from clearing_zone table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingZone_Remove]	
	@ZONE_CODE	varchar(4),	
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@ZONE_NAME 	varchar(35),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar		int; 
			

	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT ZONE_CODE from CLEARING_ZONE 
			  WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@ZONE_NAME=ZONE_NAME,				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CLEARING_ZONE 
				WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CLEARING_ZONE_HIST WHERE ZONE_CODE=@ZONE_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CLEARING_ZONE_HIST (ZONE_CODE, ZONE_NAME,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@ZONE_CODE, @ZONE_NAME, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT ZONE_CODE from CLEARING_ZONE_HIST 
					  WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CLEARING_ZONE_HIST
						WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingZone_Remove] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	update detail to clearing_zone table
-- =============================================

CREATE PROCEDURE [dbo].[CMS_ClearingZone_Update]	
	@ZONE_CODE	varchar(4),
	@ZONE_NAME 	varchar(35),	
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT ZONE_CODE FROM CLEARING_ZONE 
				WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CLEARING_ZONE_HIST WHERE ZONE_CODE=@ZONE_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CLEARING_ZONE_HIST(ZONE_CODE, ZONE_NAME,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@ZONE_CODE, @ZONE_NAME,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END				

			COMMIT TRANSACTION;
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT ZONE_CODE from CLEARING_ZONE_HIST 
						WHERE ZONE_CODE=@ZONE_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CLEARING_ZONE_HIST WHERE ZONE_CODE=@ZONE_CODE AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					INSERT INTO CLEARING_ZONE_HIST(ZONE_CODE, ZONE_NAME,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@ZONE_CODE, @ZONE_NAME,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;
					
					COMMIT TRANSACTION;
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END

		END
    
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingZone_Update] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get detail of clearing_bank table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBank_GetDetailByCode]	
	@BANK_CODE		varchar(4)
AS
BEGIN	
	
	SET NOCOUNT ON;
	
	SELECT * FROM CLEARING_BANK 
	WHERE BANK_CODE=@BANK_CODE
 
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBank_GetDetailByCode] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	get list records of clearing_bank table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBank_GetList]	
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT BANK_CODE,BANK_NAME FROM CLEARING_BANK WHERE STATUS='L'
	ORDER BY BANK_NAME;
	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBank_GetList] TO [ccms_sp_only]

GO


CREATE TABLE [dbo].[CLEARING_BRANCH](
	[BANK_CODE] [varchar](4) NOT NULL,
	[BRANCH_CODE] [varchar](4) NOT NULL,
	[BRANCH_NAME] [varchar](35) NULL,
	[ROUTING_NO] [varchar](9) NULL,
	[LOCATION_CODE] [varchar](4) NULL,
	[BRANCH_ADD1] [varchar](35) NULL,
	[BRANCH_ADD2] [varchar](35) NULL,
	[CLEARING_ZONE] [varchar](4) NULL,	
	[NIKBRANCH_CODE] [varchar](7) NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	PRIMARY KEY([BANK_CODE],[BRANCH_CODE]))

GO


CREATE TABLE [dbo].[CLEARING_BRANCH_HIST](
	[BANK_CODE] [varchar](4) NOT NULL,
	[BRANCH_CODE] [varchar](4) NOT NULL,
	[BRANCH_NAME] [varchar](35) NULL,
	[ROUTING_NO] [varchar](9) NULL,
	[LOCATION_CODE] [varchar](4) NULL,
	[BRANCH_ADD1] [varchar](35) NULL,
	[BRANCH_ADD2] [varchar](35) NULL,
	[CLEARING_ZONE] [varchar](4) NULL,	
	[NIKBRANCH_CODE] [varchar](7) NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,
	[IS_AUTH] [bit] NOT NULL,
 PRIMARY KEY([BANK_CODE],[BRANCH_CODE],[MOD_NO]))

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Add detail to clearing_branch table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_Add]
	@BANK_CODE		varchar(4),
	@BRANCH_CODE	varchar(4),
	@BRANCH_NAME	varchar(35),
	@ROUTING_NO		varchar(8),
	@LOCATION_CODE	varchar(4),
	@BRANCH_ADD1	varchar(35),
	@BRANCH_ADD2	varchar(35),
	@CLEARING_ZONE	varchar(4),	
	@NIKBRANCH_CODE	varchar(7)
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT BRANCH_CODE from CLEARING_BRANCH 
				WHERE BANK_CODE=@BANK_CODE
				AND BRANCH_CODE=@BRANCH_CODE)
		BEGIN
			-- Duplicate Entry
			ROLLBACK TRANSACTION;		
			RETURN 2	
		END
	
	DELETE CLEARING_BRANCH_HIST WHERE 
		BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	ELSE

	INSERT INTO CLEARING_BRANCH_HIST(BANK_CODE, BRANCH_CODE, BRANCH_NAME, ROUTING_NO,
		LOCATION_CODE,BRANCH_ADD1, BRANCH_ADD2, CLEARING_ZONE, 
		NIKBRANCH_CODE,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@BANK_CODE, @BRANCH_CODE, @BRANCH_NAME, @ROUTING_NO,
		@LOCATION_CODE,@BRANCH_ADD1, @BRANCH_ADD2, @CLEARING_ZONE,
		@NIKBRANCH_CODE,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
	RETURN 0;
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_Add] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Authorize record to Clearing_branch table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_Auth]	
	@BANK_CODE		varchar(4),
	@BRANCH_CODE	varchar(4),
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@BRANCH_NAME	varchar(35),
			@ROUTING_NO		varchar(8),
			@LOCATION_CODE	varchar(4),
			@BRANCH_ADD1	varchar(35),
			@BRANCH_ADD2	varchar(35),
			@CLEARING_ZONE	varchar(4),			
			@NIKBRANCH_CODE	varchar(7),
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 


	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT BRANCH_CODE from CLEARING_BRANCH_HIST 
			  WHERE BANK_CODE=@BANK_CODE 
			  AND BRANCH_CODE=@BRANCH_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@BRANCH_NAME = BRANCH_NAME,
				@ROUTING_NO=ROUTING_NO,@LOCATION_CODE=LOCATION_CODE,
				@BRANCH_ADD1=BRANCH_ADD1,@BRANCH_ADD2=BRANCH_ADD2,
				@CLEARING_ZONE=CLEARING_ZONE,
				@NIKBRANCH_CODE=NIKBRANCH_CODE,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLEARING_BRANCH_HIST 
				WHERE BANK_CODE=@BANK_CODE AND
					BRANCH_CODE=@BRANCH_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLEARING_BRANCH_HIST 
				SELECT *,1 FROM CLEARING_BRANCH
				WHERE BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLEARING_BRANCH_HIST
				SET [STATUS] = 'O' 
				WHERE BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CLEARING_BRANCH
				SET BRANCH_NAME = @BRANCH_NAME,ROUTING_NO=@ROUTING_NO,
				LOCATION_CODE=@LOCATION_CODE,
				BRANCH_ADD1=@BRANCH_ADD1,BRANCH_ADD2=@BRANCH_ADD2,
				CLEARING_ZONE=@CLEARING_ZONE,
				NIKBRANCH_CODE=@NIKBRANCH_CODE,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLEARING_BRANCH_HIST WHERE BANK_CODE=@BANK_CODE 
				AND BRANCH_CODE=@BRANCH_CODE AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CLEARING_BRANCH	 
				SELECT BANK_CODE, BRANCH_CODE, BRANCH_NAME, ROUTING_NO, LOCATION_CODE, 
					BRANCH_ADD1, BRANCH_ADD2, CLEARING_ZONE,  NIKBRANCH_CODE,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CLEARING_BRANCH_HIST
					WHERE BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE
					AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CLEARING_BRANCH_HIST 
				WHERE BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

		COMMIT TRANSACTION
		
		SELECT @ErrorVar1 = @@error;
		
		IF @ErrorVar1 = 0
			BEGIN		
				RETURN 0;
			END
		ELSE
			BEGIN
				RETURN 1;
			END
    
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_Auth] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get detail of clearing_branch table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_GetDetail]	
	@BANK_CODE		varchar(4),
	@BRANCH_CODE	varchar(4),
	@MOD_NO			int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT BRANCH_CODE 
				FROM CLEARING_BRANCH WHERE BANK_CODE=@BANK_CODE 
				AND BRANCH_CODE=@BRANCH_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 ,CLEARING_BANK.BANK_NAME,CLEARING_LOCATION.LOCATION_NAME
			FROM CLEARING_BRANCH br
			LEFT OUTER JOIN CLEARING_BANK ON CLEARING_BANK.BANK_CODE=br.BANK_CODE
			LEFT OUTER JOIN CLEARING_LOCATION ON CLEARING_LOCATION.LOCATION_CODE=br.LOCATION_CODE			
			WHERE br.BANK_CODE=@BANK_CODE
			AND br.BRANCH_CODE=@BRANCH_CODE AND br.MOD_NO=@MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * ,CLEARING_BANK.BANK_NAME,CLEARING_LOCATION.LOCATION_NAME
			FROM CLEARING_BRANCH_HIST brh
			LEFT OUTER JOIN CLEARING_BANK ON CLEARING_BANK.BANK_CODE=brh.BANK_CODE
			LEFT OUTER JOIN CLEARING_LOCATION ON CLEARING_LOCATION.LOCATION_CODE=brh.LOCATION_CODE			
			WHERE brh.BANK_CODE=@BANK_CODE
			AND brh.BRANCH_CODE=@BRANCH_CODE AND brh.MOD_NO=@MOD_NO
		END
END





GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_GetDetail] TO [ccms_sp_only]

GO





-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Get Total # of modification of clearing_branch table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_GetMaxMod]	
	@BANK_CODE		varchar(4),
	@BRANCH_CODE	varchar(4)	
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM CLEARING_BRANCH_HIST 
		WHERE BANK_CODE=@BANK_CODE 
		AND BRANCH_CODE=@BRANCH_CODE AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM CLEARING_BRANCH 
				WHERE BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_GetMaxMod] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	Remove record from clearing_branch table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_Remove]	
	@BANK_CODE		varchar(4),
	@BRANCH_CODE	varchar(4),
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@BRANCH_NAME	varchar(35),
			@ROUTING_NO		varchar(8),
			@LOCATION_CODE	varchar(4),
			@BRANCH_ADD1	varchar(35),
			@BRANCH_ADD2	varchar(35),
			@CLEARING_ZONE	varchar(4),			
			@NIKBRANCH_CODE	varchar(7),
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),			
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar		int; 

	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT BRANCH_CODE from CLEARING_BRANCH 
			  WHERE BANK_CODE=@BANK_CODE AND
			  BRANCH_CODE = @BRANCH_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@BRANCH_NAME = BRANCH_NAME,
				@ROUTING_NO=ROUTING_NO,@LOCATION_CODE=LOCATION_CODE,
				@BRANCH_ADD1=BRANCH_ADD1,@BRANCH_ADD2=BRANCH_ADD2,
				@CLEARING_ZONE=CLEARING_ZONE,
				@NIKBRANCH_CODE=NIKBRANCH_CODE,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CLEARING_BRANCH 
				WHERE BANK_CODE=@BANK_CODE AND 
				BRANCH_CODE = @BRANCH_CODE AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CLEARING_BRANCH_HIST WHERE BANK_CODE=@BANK_CODE AND 
				BRANCH_CODE = @BRANCH_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CLEARING_BRANCH_HIST (BANK_CODE, BRANCH_CODE, BRANCH_NAME, ROUTING_NO,
				LOCATION_CODE,BRANCH_ADD1, BRANCH_ADD2,CLEARING_ZONE, 
				NIKBRANCH_CODE,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@BANK_CODE, @BRANCH_CODE, @BRANCH_NAME, @ROUTING_NO,
				@LOCATION_CODE,@BRANCH_ADD1, @BRANCH_ADD2, @CLEARING_ZONE,
				@NIKBRANCH_CODE,
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT BRANCH_CODE from CLEARING_BRANCH_HIST 
					  WHERE BANK_CODE=@BANK_CODE AND 
					  BRANCH_CODE=@BRANCH_CODE AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CLEARING_BRANCH_HIST
						WHERE BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE
						AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END

GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_Remove] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	update detail to clearing_branch table
-- =============================================

CREATE PROCEDURE [dbo].[CMS_ClearingBranch_Update]	
	@BANK_CODE		varchar(4),
	@BRANCH_CODE	varchar(4),
	@BRANCH_NAME	varchar(35),
	@ROUTING_NO		varchar(8),
	@LOCATION_CODE	varchar(4),
	@BRANCH_ADD1	varchar(35),
	@BRANCH_ADD2	varchar(35),
	@CLEARING_ZONE	varchar(4),	
	@NIKBRANCH_CODE	varchar(7),
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT BRANCH_CODE FROM CLEARING_BRANCH 
				WHERE BANK_CODE=@BANK_CODE AND 
				BRANCH_CODE=@BRANCH_CODE AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CLEARING_BRANCH_HIST WHERE BANK_CODE=@BANK_CODE AND
				BRANCH_CODE=@BRANCH_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CLEARING_BRANCH_HIST(BANK_CODE,BRANCH_CODE,BRANCH_NAME,ROUTING_NO,
				LOCATION_CODE,BRANCH_ADD1,BRANCH_ADD2,CLEARING_ZONE,
				NIKBRANCH_CODE,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@BANK_CODE, @BRANCH_CODE, @BRANCH_NAME, @ROUTING_NO,
				@LOCATION_CODE,@BRANCH_ADD1, @BRANCH_ADD2, @CLEARING_ZONE,
				@NIKBRANCH_CODE,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END				

			COMMIT TRANSACTION;
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT BRANCH_CODE from CLEARING_BRANCH_HIST 
						WHERE BANK_CODE=@BANK_CODE AND BRANCH_CODE=@BRANCH_CODE 
						AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CLEARING_BRANCH_HIST WHERE BANK_CODE=@BANK_CODE AND 
						BRANCH_CODE = @BRANCH_CODE AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					INSERT INTO CLEARING_BRANCH_HIST(BANK_CODE, BRANCH_CODE, BRANCH_NAME, ROUTING_NO,
						LOCATION_CODE,BRANCH_ADD1, BRANCH_ADD2, CLEARING_ZONE, 
						NIKBRANCH_CODE,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@BANK_CODE, @BRANCH_CODE, @BRANCH_NAME,@ROUTING_NO,
						@LOCATION_CODE,@BRANCH_ADD1, @BRANCH_ADD2, @CLEARING_ZONE,
						@NIKBRANCH_CODE,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;
					
					COMMIT TRANSACTION;
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END

		END
    
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_Update] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 1-Apr-13
-- Description:	get detail of clearing_branch table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_GetDetailList]		
	@DEL_FLAG	int	,
	@AUTH_FLAG	bit
AS
BEGIN	
		
	SET NOCOUNT ON;



	IF @AUTH_FLAG=0
		BEGIN						
			SELECT brh.*,CLEARING_BANK.BANK_NAME,
				CLEARING_LOCATION.LOCATION_NAME,
				CLEARING_ZONE.ZONE_NAME,'S' = 'U'				 
				FROM CLEARING_BRANCH_HIST brh
				LEFT OUTER JOIN CLEARING_BANK ON CLEARING_BANK.BANK_CODE=brh.BANK_CODE
				LEFT OUTER JOIN CLEARING_LOCATION ON CLEARING_LOCATION.LOCATION_CODE=brh.LOCATION_CODE
				LEFT OUTER JOIN CLEARING_ZONE ON CLEARING_ZONE.ZONE_CODE=brh.CLEARING_ZONE
				WHERE IS_AUTH=0
				ORDER BY BANK_CODE,BRANCH_CODE;			
		END;
	ELSE
		BEGIN
			IF @DEL_FLAG=0
				BEGIN
					SELECT br.*,1,CLEARING_BANK.BANK_NAME,
						CLEARING_LOCATION.LOCATION_NAME,
						CLEARING_ZONE.ZONE_NAME,'S' = 'A'				
						FROM CLEARING_BRANCH br
						LEFT OUTER JOIN CLEARING_BANK ON CLEARING_BANK.BANK_CODE=br.BANK_CODE
						LEFT OUTER JOIN CLEARING_LOCATION ON CLEARING_LOCATION.LOCATION_CODE=br.LOCATION_CODE
						LEFT OUTER JOIN CLEARING_ZONE ON CLEARING_ZONE.ZONE_CODE=br.CLEARING_ZONE
						WHERE br.STATUS ='L'					
						ORDER BY BANK_CODE,BRANCH_CODE
				END;
			ELSE
				BEGIN
					SELECT br.*,1,CLEARING_BANK.BANK_NAME,
						CLEARING_LOCATION.LOCATION_NAME,
						CLEARING_ZONE.ZONE_NAME,'S' = 
						CASE  
							WHEN br.STATUS = 'D' THEN 'D'                    
							ELSE 'A'
						END 
						FROM CLEARING_BRANCH br
						LEFT OUTER JOIN CLEARING_BANK ON CLEARING_BANK.BANK_CODE=br.BANK_CODE
						LEFT OUTER JOIN CLEARING_LOCATION ON CLEARING_LOCATION.LOCATION_CODE=br.LOCATION_CODE
						LEFT OUTER JOIN CLEARING_ZONE ON CLEARING_ZONE.ZONE_CODE=br.CLEARING_ZONE
						WHERE br.STATUS in ('L','D')					
						ORDER BY BANK_CODE,BRANCH_CODE
				END;
		END;	

	
	   
END



GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_GetDetailList] TO [ccms_sp_only]

GO



CREATE TABLE [dbo].[CLEARINGTAB](
	[OPR_DATE] [datetime] NOT NULL,
	[ISSUE_DATE] [datetime] NULL,	
	[NIKBRANCH_CODE] [varchar](7) NOT NULL,
	[PAYEE_NAME] [varchar](40) NULL,
	[CHECK_SERIES] [varchar](4) NULL,
	[CHECK_NUMBER] [varchar](15) NOT NULL,
	[CHECK_NO] [varchar](8) NULL,
	[BOOK_NO] [varchar](8) NULL,
	[CHECK_TYPE] [varchar](8) NULL,
	[ACC_NO] [varchar](15) NULL,
	[DEBIT_CREDIT] numeric(14,2) NOT NULL,	
	[REMARK] [varchar](15) NOT NULL,
	[BATCH_NO] [varchar](8) NULL,	
	[CHECK_REF] [varchar](40) NULL,
	[ENTRY_LOC] [varchar](3) NOT NULL,
	[DS_CODE] [varchar](8) NOT NULL,
	[RTN_STATUS] char(1) NULL,
	[RTN_CODE]	varchar(2) NULL,
	[RETURN_DATE] [datetime] NULL,	
	[CHECKED] [tinyint] NULL,	
	FLEX_FILENAME [varchar](15) NULL,
	[IS_PDC] [bit] NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	PRIMARY KEY
(
	[OPR_DATE] ,
	[NIKBRANCH_CODE],
	[CHECK_NUMBER],
	[DEBIT_CREDIT],
	[REMARK],
	[DS_CODE],[ENTRY_LOC]
))

GO

CREATE TABLE [dbo].[CLEARINGTAB_HIST](
	[OPR_DATE] [datetime] NOT NULL,
	[ISSUE_DATE] [datetime] NULL,	
	[NIKBRANCH_CODE] [varchar](7) NOT NULL,
	[PAYEE_NAME] [varchar](40) NULL,
	[CHECK_SERIES] [varchar](4) NULL,
	[CHECK_NUMBER] [varchar](15) NOT NULL,
	[CHECK_NO] [varchar](8) NULL,
	[BOOK_NO] [varchar](8) NULL,
	[CHECK_TYPE] [varchar](8) NULL,
	[ACC_NO] [varchar](15) NULL,
	[DEBIT_CREDIT] numeric(14,2) NOT NULL,	
	[REMARK] [varchar](15) NOT NULL,
	[BATCH_NO] [varchar](8) NULL,	
	[CHECK_REF] [varchar](40) NULL,
	[ENTRY_LOC] [varchar](3) NOT NULL,
	[DS_CODE] [varchar](8) NOT NULL,
	[RTN_STATUS] char(1) NULL,
	[RTN_CODE]	varchar(2) NULL,
	[RETURN_DATE] [datetime] NULL,	
	[CHECKED] [tinyint] NULL,	
	FLEX_FILENAME [varchar](15) NULL,
	[IS_PDC] [bit] NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	IS_AUTH bit NOT NULL,
	PRIMARY KEY
(
	[OPR_DATE] ,
	[NIKBRANCH_CODE],
	[CHECK_NUMBER],
	[DEBIT_CREDIT],
	[REMARK],
	[DS_CODE],[ENTRY_LOC],[MOD_NO]
))

GO


CREATE TABLE [dbo].[CHECKTOTAL](
	[DS_CODE] [varchar](8) NOT NULL,
	[TOTAL_CHKNO] [int] NULL,
	[TOTAL_CHKAMT] numeric(14,2) NULL,
	[OPR_DATE] [datetime] NOT NULL,
	[CUSTOMER_REF][varchar](50) NULL,		
	[ENTRY_LOC] [varchar](3) NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,	
  PRIMARY KEY(
	[DS_CODE] ,
	[OPR_DATE] ,
	[ENTRY_LOC]))

GO

CREATE TABLE [dbo].[CHECKTOTAL_HIST](
	[DS_CODE] [varchar](8) NOT NULL,
	[TOTAL_CHKNO] [int] NULL,
	[TOTAL_CHKAMT] numeric(14,2) NULL,
	[OPR_DATE] [datetime] NOT NULL,
	[CUSTOMER_REF][varchar](50) NULL,		
	[ENTRY_LOC] [varchar](3) NOT NULL,
	[INPUT_BY] [varchar](20) NULL,
	[INPUT_DATETIME] [datetime] NULL,
	[INPUT_FROM] [varchar](30) NULL,
	[AUTH_BY] [varchar](20) NULL,
	[AUTH_DATETIME] [datetime] NULL,
	[AUTH_FROM] [varchar](30) NULL,
	[MOD_NO] [numeric](3, 0) NOT NULL,
	[STATUS] [char](1) NOT NULL,	
	IS_AUTH bit NOT NULL,
  PRIMARY KEY(
	[DS_CODE] ,
	[OPR_DATE],[ENTRY_LOC],MOD_NO ))

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-14
-- Description:	get list records of Citibank Branch table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CitiBankBranch_GetList]	
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT BRANCH_CODE,BRANCH_NAME FROM CITIBANK_BRANCH WHERE STATUS='L'
	ORDER BY BRANCH_NAME;
	
	   
END

GO

GRANT EXECUTE ON [dbo].[CMS_CitiBankBranch_GetList] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	Get detail of Citibank branch table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CitiBankBranch_GetDetailByCode]	
	@BRANCH_CODE	varchar(3)
AS
BEGIN	
	
	SET NOCOUNT ON;
	
	SELECT * FROM CITIBANK_BRANCH
	WHERE BRANCH_CODE=@BRANCH_CODE
 
END

GO


GRANT EXECUTE ON [dbo].[CMS_CitiBankBranch_GetDetailByCode] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	get list records of clearing_client
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClient_GetList]	
AS
BEGIN		
	SET NOCOUNT ON;

	SELECT ACC_NO, ACC_NAME
	FROM CLEARING_CLIENT		
	WHERE STATUS='L'
	AND IS_DISABLE=0	
	ORDER BY ACC_NAME;
	   
END

GO


GRANT EXECUTE ON [dbo].[CMS_ClearingClient_GetList] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	get detail of clearing client table
--				by acc_no
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingClient_GetDetailByCode]	
	@ACC_NO	varchar(15)
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT *
		FROM CLEARING_CLIENT 		
		WHERE ACC_NO=@ACC_NO
		AND IS_DISABLE=0
	   
END


GO


GRANT EXECUTE ON [dbo].[CMS_ClearingClient_GetDetailByCode] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	Get detail of clearing_branch by NikBranch code
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_GetDetailByNikBranch]	
	@NIKBRANCH_CODE		varchar(7)
AS
BEGIN	
	
	SET NOCOUNT ON;
	
	SELECT * FROM CLEARING_BRANCH 
	WHERE NIKBRANCH_CODE=@NIKBRANCH_CODE
 
END


GO


GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_GetDetailByNikBranch] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	get list records of Clearing Branch  by bank
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingBranch_GetNikBranchListByBank]
	@BANK_CODE	varchar(4)
AS
BEGIN		
	SET NOCOUNT ON;

	SELECT NIKBRANCH_CODE,BRANCH_NAME
	FROM CLEARING_BRANCH		
	WHERE STATUS='L' 
	AND NIKBRANCH_CODE IS NOT NULL AND BANK_CODE=@BANK_CODE
	ORDER BY BRANCH_NAME;	
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingBranch_GetNikBranchListByBank] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	get list records of CheckType
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CheckType_GetList]	
AS
BEGIN		
	SET NOCOUNT ON;

	SELECT CHECKTYPE_CODE, CHECKTYPE_NAME
	FROM CHECKTYPE
	WHERE STATUS='L'	
	ORDER BY CHECKTYPE_NAME;
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_CheckType_GetList] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	get detail of CheckType table
--				by CheckType_Code
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CheckType_GetDetailByCode]	
	@CHECKTYPE_CODE	varchar(8)
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT *
		FROM CHECKTYPE
		WHERE CHECKTYPE_CODE=@CHECKTYPE_CODE;		
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_CheckType_GetDetailByCode] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 16-Apr-13
-- Description:	Add detail to CheckTotal
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CheckTotal_Add]		
	@DS_CODE		varchar(8), 
	@TOTAL_CHKNO	int, 
	@TOTAL_CHKAMT	numeric(14,2), 
	@OPR_DATE		datetime, 
	@CUSTOMER_REF	varchar(50), 
	@ENTRY_LOC		varchar(3)
AS
BEGIN	
	DECLARE @ErrorVar	int;
	
	SET NOCOUNT ON;
	
	IF EXISTS(SELECT DS_CODE FROM CHECKTOTAL
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC)
		BEGIN
			-- Duplicate Entry				
			RETURN 2	
		END
	
	DELETE CHECKTOTAL_HIST WHERE 
		DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
		AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
	
	INSERT INTO CHECKTOTAL_HIST(DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
		OPR_DATE, CUSTOMER_REF, ENTRY_LOC, 
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, 
		@OPR_DATE, @CUSTOMER_REF, @ENTRY_LOC, 
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END

	DELETE CLEARINGTAB_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
		AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;
	
	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END	

	RETURN 0;
	
   
END


GO

GRANT EXECUTE ON [dbo].[CMS_CheckTotal_Add] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	Add detail to ClearingTab
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingTab_Add]		
	@OPR_DATE		datetime, 
	@ISSUE_DATE		datetime, 
	@NIKBRANCH_CODE	varchar(7), 
	@PAYEE_NAME		varchar(40), 
	@CHECK_SERIES	varchar(4), 
	@CHECK_NUMBER	varchar(15), 
	@CHECK_NO		varchar(8), 
	@BOOK_NO		varchar(8), 
	@CHECK_TYPE		varchar(8), 
	@ACC_NO			varchar(15), 
	@DEBIT_CREDIT	numeric(14,2), 
	@REMARK			varchar(15), 
	@BATCH_NO		varchar(8), 
	@CHECK_REF		varchar(40), 
	@ENTRY_LOC		varchar(3), 
	@DS_CODE		varchar(8)
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARINGTAB_HIST(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, PAYEE_NAME, 
		CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, CHECK_TYPE, ACC_NO, 
		DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, ENTRY_LOC, DS_CODE, 
		RTN_STATUS, IS_PDC,
		MOD_NO,IS_AUTH)
		VALUES(@OPR_DATE, @ISSUE_DATE, @NIKBRANCH_CODE, @PAYEE_NAME, 
		@CHECK_SERIES, @CHECK_NUMBER, @CHECK_NO, @BOOK_NO, @CHECK_TYPE, @ACC_NO, 
		@DEBIT_CREDIT, @REMARK, @BATCH_NO, @CHECK_REF, @ENTRY_LOC, @DS_CODE, 
		'O', 0,
		1,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingTab_Add] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	update detail to ClearingTab
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingTab_Update]		
	@OPR_DATE		datetime, 
	@ISSUE_DATE		datetime, 
	@NIKBRANCH_CODE	varchar(7), 
	@PAYEE_NAME		varchar(40), 
	@CHECK_SERIES	varchar(4), 
	@CHECK_NUMBER	varchar(15), 
	@CHECK_NO		varchar(8), 
	@BOOK_NO		varchar(8), 
	@CHECK_TYPE		varchar(8), 
	@ACC_NO			varchar(15), 
	@DEBIT_CREDIT	numeric(14,2), 
	@REMARK			varchar(15), 
	@BATCH_NO		varchar(8), 
	@CHECK_REF		varchar(40), 
	@ENTRY_LOC		varchar(3), 
	@DS_CODE		varchar(8),
	@RTN_STATUS		char(1), 
	@RTN_CODE		varchar(2), 
	@RETURN_DATE	datetime, 
	@CHECKED		tinyint, 
	@FLEX_FILENAME	varchar(15), 
	@IS_PDC			bit, 
	@MOD_NO			numeric(3,0) 
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARINGTAB_HIST(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, PAYEE_NAME, 
		CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, CHECK_TYPE, ACC_NO, 
		DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, ENTRY_LOC, DS_CODE, 
		RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, FLEX_FILENAME, IS_PDC,
		MOD_NO,IS_AUTH)
		VALUES(@OPR_DATE, @ISSUE_DATE, @NIKBRANCH_CODE, @PAYEE_NAME, 
		@CHECK_SERIES, @CHECK_NUMBER, @CHECK_NO, @BOOK_NO, @CHECK_TYPE, @ACC_NO, 
		@DEBIT_CREDIT, @REMARK, @BATCH_NO, @CHECK_REF, @ENTRY_LOC, @DS_CODE, 
		@RTN_STATUS, @RTN_CODE, @RETURN_DATE, @CHECKED, @FLEX_FILENAME, @IS_PDC,
		@MOD_NO,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingTab_Update] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 17-Apr-13
-- Description:	update detail to CheckTotal
-- =============================================

CREATE PROCEDURE [dbo].[CMS_CheckTotal_Update]	
	@DS_CODE		varchar(8), 
	@TOTAL_CHKNO	int, 
	@TOTAL_CHKAMT	numeric(14,2), 
	@OPR_DATE		datetime, 
	@CUSTOMER_REF	varchar(50), 
	@ENTRY_LOC		varchar(3),
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	IF EXISTS(SELECT DS_CODE FROM CHECKTOTAL 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CHECKTOTAL_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN					
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CHECKTOTAL_HIST(DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
				OPR_DATE, CUSTOMER_REF, ENTRY_LOC, 
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, 
				@OPR_DATE, @CUSTOMER_REF, @ENTRY_LOC, 
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END				
			
			DELETE CLEARINGTAB_HIST
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT DS_CODE from CHECKTOTAL_HIST 
						WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CHECKTOTAL_HIST WHERE DS_CODE=@DS_CODE 
						AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END

					INSERT INTO CHECKTOTAL_HIST(DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, 
						OPR_DATE, CUSTOMER_REF, ENTRY_LOC, 
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, 
						@OPR_DATE, @CUSTOMER_REF, @ENTRY_LOC,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;

					DELETE CLEARINGTAB_HIST
						WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END			
					
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					
					RETURN 4;
				END

		END
    
END





GO

GRANT EXECUTE ON [dbo].[CMS_CheckTotal_Update] TO [ccms_sp_only]

GO





-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 18-Apr-13
-- Description:	Get detail of CHECKTOTAL
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CheckTotal_GetDetail]	
	@DS_CODE	varchar(8),
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3),
	@MOD_NO		int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT DS_CODE 
				FROM CHECKTOTAL 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
				FROM CHECKTOTAL 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
				FROM CHECKTOTAL_HIST
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO = @MOD_NO
		END
END


GO

GRANT EXECUTE ON [dbo].[CMS_CheckTotal_GetDetail] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 18-Apr-13
-- Description:	Get Total # of modification of CheckTotal
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CheckTotal_GetMaxMod]
	@DS_CODE	varchar(8),
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3)
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM CHECKTOTAL_HIST 
		WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM CHECKTOTAL
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END



GO

GRANT EXECUTE ON [dbo].[CMS_CheckTotal_GetMaxMod] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 18-Apr-13
-- Description:	Get detail of ClearingTab
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingTab_GetDetails]	
	@DS_CODE	varchar(8),
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3),
	@MOD_NO		int
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT DS_CODE 
			   FROM CLEARINGTAB WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT ct.*,'IS_AUTH'=1,
				cb.BRANCH_NAME AS 'ENTRY_LOC_NAME',br.BRANCH_NAME,
				b.BANK_CODE,b.BANK_NAME,cl.ACC_NAME, ctp.CHECKTYPE_NAME
			FROM CLEARINGTAB ct
				LEFT OUTER JOIN CITIBANK_BRANCH cb
				ON cb.BRANCH_CODE=ct.ENTRY_LOC				
				LEFT OUTER JOIN CLEARING_BRANCH br
				ON br.NIKBRANCH_CODE=ct.NIKBRANCH_CODE
				LEFT OUTER JOIN CLEARING_BANK b
				ON b.BANK_CODE=br.BANK_CODE
				LEFT OUTER JOIN CLEARING_CLIENT cl
				ON cl.ACC_NO=ct.REMARK
				LEFT OUTER JOIN CHECKTYPE ctp
				ON ctp.CHECKTYPE_CODE=ct.CHECK_TYPE
			WHERE ct.DS_CODE=@DS_CODE AND ct.OPR_DATE=@OPR_DATE
				AND ct.ENTRY_LOC=@ENTRY_LOC AND ct.MOD_NO = @MOD_NO			
		END	
	ELSE
		BEGIN
			SELECT cth.* ,
				cb.BRANCH_NAME AS 'ENTRY_LOC_NAME',br.BRANCH_NAME,
				b.BANK_CODE,b.BANK_NAME,cl.ACC_NAME, ctp.CHECKTYPE_NAME
			FROM CLEARINGTAB_HIST cth
				LEFT OUTER JOIN CITIBANK_BRANCH cb
				ON cb.BRANCH_CODE=cth.ENTRY_LOC				
				LEFT OUTER JOIN CLEARING_BRANCH br
				ON br.NIKBRANCH_CODE=cth.NIKBRANCH_CODE
				LEFT OUTER JOIN CLEARING_BANK b
				ON b.BANK_CODE=br.BANK_CODE
				LEFT OUTER JOIN CLEARING_CLIENT cl
				ON cl.ACC_NO=cth.REMARK
				LEFT OUTER JOIN CHECKTYPE ctp
				ON ctp.CHECKTYPE_CODE=cth.CHECK_TYPE
			WHERE cth.DS_CODE=@DS_CODE AND cth.OPR_DATE=@OPR_DATE
				AND cth.ENTRY_LOC=@ENTRY_LOC AND cth.MOD_NO = @MOD_NO			
		END
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingTab_GetDetails] TO [ccms_sp_only]

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Apr-13
-- Description:	Remove record from CheckTotal
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CheckTotal_Remove]
	@DS_CODE	varchar(8),
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3),
	@MOD_NO		int,	
	@RET_MOD_NO	int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_CHKNO	int, 
			@TOTAL_CHKAMT	numeric(14,2), 
			@CUSTOMER_REF	varchar(50),
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30);
	
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT DS_CODE from CHECKTOTAL
			  WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_CHKNO=TOTAL_CHKNO,@TOTAL_CHKAMT=TOTAL_CHKAMT,
				@CUSTOMER_REF=CUSTOMER_REF,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CHECKTOTAL
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CHECKTOTAL_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CHECKTOTAL_HIST (DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
				CUSTOMER_REF, ENTRY_LOC, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@DS_CODE, @TOTAL_CHKNO, @TOTAL_CHKAMT, @OPR_DATE, 
				@CUSTOMER_REF, @ENTRY_LOC, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


-----------

			DELETE CLEARINGTAB_HIST
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO CLEARINGTAB_HIST(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
				PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
				CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF,
				ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, 
				CHECKED, FLEX_FILENAME, IS_PDC, MOD_NO, IS_AUTH)
				SELECT OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
				PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
				CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF,
				ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, 
				CHECKED, FLEX_FILENAME, IS_PDC, @RET_MOD_NO, 0
				FROM CLEARINGTAB
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			
-----------
			

			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT DS_CODE from CHECKTOTAL_HIST 
						WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CHECKTOTAL_HIST
						WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE CLEARINGTAB_HIST 
						WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
						AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO AND IS_AUTH=0 ;
					
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
	
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END



GO

GRANT EXECUTE ON [dbo].[CMS_CheckTotal_Remove] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 20-Apr-13
-- Description:	Authorize record to CHECKTOTAL
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CheckTotal_Auth]	
	@DS_CODE	varchar(8),
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_CHKNO	int, 
			@TOTAL_CHKAMT	numeric(14,2), 
			@CUSTOMER_REF	varchar(50),		
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT DS_CODE from CHECKTOTAL_HIST 
			  WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_CHKNO=TOTAL_CHKNO, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT,@CUSTOMER_REF=CUSTOMER_REF,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CHECKTOTAL_HIST 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CHECKTOTAL_HIST 
				SELECT *,1 FROM CHECKTOTAL
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CHECKTOTAL_HIST
				SET [STATUS] = 'O' 
				WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CHECKTOTAL
				SET
				TOTAL_CHKNO=@TOTAL_CHKNO,
				TOTAL_CHKAMT=@TOTAL_CHKAMT,CUSTOMER_REF=@CUSTOMER_REF, 
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CHECKTOTAL_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN  
			INSERT INTO CHECKTOTAL
				SELECT DS_CODE, TOTAL_CHKNO, TOTAL_CHKAMT, OPR_DATE, 
					CUSTOMER_REF, ENTRY_LOC,
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CHECKTOTAL_HIST
					WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CHECKTOTAL_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update CLEARINGTAB

	INSERT INTO CLEARINGTAB_HIST(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO, IS_AUTH)
		SELECT OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO, 1
		FROM CLEARINGTAB
		WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CLEARINGTAB WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CLEARINGTAB(OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO)
		SELECT OPR_DATE, ISSUE_DATE, NIKBRANCH_CODE, 
		PAYEE_NAME, CHECK_SERIES, CHECK_NUMBER, CHECK_NO, BOOK_NO, 
		CHECK_TYPE, ACC_NO, DEBIT_CREDIT, REMARK, BATCH_NO, CHECK_REF, 
		ENTRY_LOC, DS_CODE, RTN_STATUS, RTN_CODE, RETURN_DATE, CHECKED, 
		FLEX_FILENAME, IS_PDC, MOD_NO
		FROM CLEARINGTAB_HIST 
		WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CLEARINGTAB_HIST WHERE DS_CODE=@DS_CODE AND OPR_DATE=@OPR_DATE
				AND ENTRY_LOC=@ENTRY_LOC AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END




GO

GRANT EXECUTE ON [dbo].[CMS_CheckTotal_Auth] TO [ccms_sp_only]

GO

ALTER TABLE dbo.CITIBANK_BRANCH ADD
	CLEARING_DEBIT_ACC varchar(20) NULL
GO

ALTER TABLE dbo.CITIBANK_BRANCH_HIST ADD
	CLEARING_DEBIT_ACC varchar(20) NULL
GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Jan-13
-- Description:	Get outstanding of ClearingTab
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingTab_GetOutstandings]		
	@OPR_DATE	datetime,
	@ENTRY_LOC	varchar(3)	
AS
BEGIN	
	
	SET NOCOUNT ON;

	SELECT * 
	FROM CLEARINGTAB 
	WHERE FLEX_FILENAME IS NULL
	AND OPR_DATE <=@OPR_DATE AND ENTRY_LOC=@ENTRY_LOC
	ORDER BY OPR_DATE,DS_CODE,CHECK_NUMBER
	
END


GO

GRANT EXECUTE ON [dbo].[CMS_ClearingTab_GetOutstandings] TO [ccms_sp_only]

GO

CREATE TABLE [dbo].[TMP_REVERSAL_CLEARING](	
	[AMOUNT] [numeric](18, 5) NULL,
	[VALUE_DATE] [datetime] NULL,
	[USERID] [varchar](20) NULL,	
	[FLEX_FILENAME] [varchar](15) NULL,
	[REV_DATE] [datetime] NULL,
	[CLIENT_CODE] [varchar](16) NULL,
	[REFACC_NO] [varchar](16) NULL,	
	[ACC_NO] [varchar](16) NULL,
	[ENTRY_LOC] [varchar](3) NULL,
	[CR_TYPE] [varchar](2) NULL,
	[DS_CODE] [varchar](16) NULL,
	[SEQ_NO] [numeric](5, 0) NULL,
	[CHECK_NUMBER] [varchar](30) NULL,
	[ADD_TEXT] [varchar](250) NULL
) ON [PRIMARY]

GO






-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Process for reversal deposit update
-- =============================================

CREATE PROCEDURE [dbo].[CMS_Process_ClearingRevGenerate]
	@REV_DATE	datetime,	
	@ENTRY_LOC	varchar(3),
	@REFACC_NO	varchar(16)
AS
BEGIN	
	
	DELETE FROM TMP_REVERSAL_CLEARING 
		WHERE REV_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC;


	INSERT INTO TMP_REVERSAL_CLEARING( CR_TYPE,VALUE_DATE,ENTRY_LOC,REV_DATE,
		ACC_NO,REFACC_NO,CLIENT_CODE,AMOUNT,
		DS_CODE,
		CHECK_NUMBER,
		SEQ_NO,ADD_TEXT)
                          
------By Total                                  
	SELECT c.SPEED_CR_TYPE,a.OPR_DATE VALUE_DATE, a.ENTRY_LOC,a.OPR_DATE,
		c.ACC_NO,@REFACC_NO AS REFACC_NO,a.REMARK,sum(a.DEBIT_CREDIT) as total,
		substring(CONVERT(varchar(12), OPR_DATE,112),3,8) as DS_CODE,
		substring(CONVERT(varchar(12), OPR_DATE,112),3,8) CHECK_NUMBER,
		COUNT(a.REMARK),'' ADD_TEXT                               
	FROM CLEARINGTAB a, CLEARING_CLIENT c                                  
	WHERE 
		a.DEBIT_CREDIT>0                                  
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.REMARK=c.ACC_NO
		AND a.FLEX_FILENAME IS NULL
		AND c.SPEED_CR_TYPE='T'
	GROUP BY 
		a.OPR_DATE,a.ENTRY_LOC,c.SPEED_CR_TYPE,                                  
		c.ACC_NO ,a.REMARK                

	UNION ALL
            
------By Deposit code
	SELECT c.SPEED_CR_TYPE,OPR_DATE valueDate,a.ENTRY_LOC,a.OPR_DATE,
		c.ACC_NO,@REFACC_NO AS REFACC_NO,a.REMARK,sum(a.DEBIT_CREDIT) as total,
		a.DS_CODE ,
		a.DS_CODE CHECK_NUMBER,
		count(a.REMARK),'' ADD_TEXT
	FROM CLEARINGTAB a, CLEARING_CLIENT c
	WHERE

		a.DEBIT_CREDIT>0 
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.REMARK=c.ACC_NO
		AND a.FLEX_FILENAME IS NULL
		AND c.SPEED_CR_TYPE='D'
	GROUP BY a.OPR_DATE,a.ENTRY_LOC,c.SPEED_CR_TYPE,
		c.ACC_NO ,a.REMARK,a.DS_CODE
	                                  
                                  
	UNION ALL
--\\\\\\\\\\\\\\\By Check\\\\\\\\                                  
                                
                                
	SELECT  c.SPEED_CR_TYPE,a.OPR_DATE,a.ENTRY_LOC,a.OPR_DATE,
		a.REMARK,@REFACC_NO REFACC_NO,a.REMARK,a.DEBIT_CREDIT,
		DS_CODE,
		a.CHECK_NUMBER,
		1  ,'' ADD_TEXT
	FROM CLEARINGTAB a,CLEARING_CLIENT c
	WHERE                    

		a.DEBIT_CREDIT>0
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.REMARK=c.ACC_NO
		AND a.FLEX_FILENAME IS NULL
		AND c.SPEED_CR_TYPE='C'
                      
	UNION ALL                
                
	SELECT  c.SPEED_CR_TYPE,a.OPR_DATE,a.ENTRY_LOC,a.OPR_DATE,
		a.REMARK,@REFACC_NO REFACC_NO,a.REMARK,a.DEBIT_CREDIT,
		b.CUSTOMER_REF , 
		a.CHECK_NUMBER,
		1 ,'' ADD_TEXT
		FROM CLEARINGTAB a, CHECKTOTAL b, CLEARING_CLIENT c
	WHERE 
		a.DS_CODE=b.DS_CODE AND a.ENTRY_LOC=b.ENTRY_LOC AND a.OPR_DATE=b.OPR_DATE
		AND a.DEBIT_CREDIT>0
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND c.ACC_NO=a.REMARK
		AND a.FLEX_FILENAME IS NULL
		AND c.SPEED_CR_TYPE='R'
        
	UNION ALL                
                
	SELECT  c.SPEED_CR_TYPE,a.OPR_DATE,a.ENTRY_LOC,a.OPR_DATE,
		a.REMARK,@REFACC_NO REFACC_NO,a.REMARK,a.DEBIT_CREDIT,
		b.CUSTOMER_REF , 
		a.DS_CODE ,
		1  ,'Chq:'+ a.CHECK_NUMBER +'  ' + e.BANK_NAME +space(2)+ ' ' + d.BRANCH_NAME ADD_TEXT
	FROM CLEARINGTAB a,CHECKTOTAL b, CLEARING_CLIENT c, CLEARING_BRANCH d ,CLEARING_BANK e                    
	WHERE
		a.DS_CODE=b.DS_CODE AND a.ENTRY_LOC=b.ENTRY_LOC AND a.OPR_DATE=b.OPR_DATE
		AND a.DEBIT_CREDIT>0
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC   
		AND c.ACC_NO=a.REMARK                        
		AND a.FLEX_FILENAME IS NULL                                  
		AND c.SPEED_CR_TYPE='B'        
		AND a.NIKBRANCH_CODE=d.NIKBRANCH_CODE        
		AND d.BANK_CODE=e.BANK_CODE 

	UNION ALL

------By DepositRef
	SELECT c.SPEED_CR_TYPE,a.OPR_DATE valueDate,a.ENTRY_LOC,a.OPR_DATE,
		c.ACC_NO ,@REFACC_NO REFACC_NO,a.REMARK,sum(a.DEBIT_CREDIT) as total,
		a.DS_CODE ,
		b.CUSTOMER_REF,
		count(a.REMARK),'' Add_text
	FROM CLEARINGTAB a, CLEARING_CLIENT c  , checktotal  b
	WHERE
		a.DS_CODE=b.DS_CODE AND a.ENTRY_LOC=b.ENTRY_LOC AND a.OPR_DATE=b.OPR_DATE
		AND a.DEBIT_CREDIT>0
		AND a.OPR_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
		AND a.REMARK=c.ACC_NO
		AND a.FLEX_FILENAME IS NULL		
		AND c.SPEED_CR_TYPE='DR'
	GROUP BY a.OPR_DATE,a.ENTRY_LOC,c.SPEED_CR_TYPE,
		c.ACC_NO ,a.REMARK,a.DS_CODE ,b.CUSTOMER_REF
         
END

GO

GRANT EXECUTE ON [dbo].[CMS_Process_ClearingRevGenerate] TO [ccms_sp_only]

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Process for making Clearing data checked
-- =============================================

CREATE PROCEDURE [dbo].[CMS_Process_ClearingDataChecked]
	@OPR_DATE	datetime,	
	@ENTRY_LOC	varchar(3)	
AS
BEGIN	
	
	UPDATE CLEARINGTAB
		SET CHECKED=1
		WHERE (CHECKED IS NULL OR CHECKED=0)
			AND OPR_DATE<=OPR_DATE AND ENTRY_LOC=@ENTRY_LOC
	         
END

GO

GRANT EXECUTE ON [dbo].[CMS_Process_ClearingDataChecked] TO [ccms_sp_only]

GO



CREATE TABLE [dbo].[REVERSAL_HIST_CLEARING](	
	[AMOUNT] [numeric](18, 5) NULL,
	[VALUE_DATE] [datetime] NULL,
	[USERID] [varchar](20) NULL,	
	[FLEX_FILENAME] [varchar](15) NULL,
	[REV_DATE] [datetime] NULL,
	[CLIENT_CODE] [varchar](16) NULL,
	[REFACC_NO] [varchar](16) NULL,	
	[ACC_NO] [varchar](16) NULL,
	[ENTRY_LOC] [varchar](3) NULL,
	[CR_TYPE] [varchar](2) NULL,
	[DS_CODE] [varchar](16) NULL,
	[SEQ_NO] [numeric](5, 0) NULL,
	[CHECK_NUMBER] [varchar](30) NULL,
	[ADD_TEXT] [varchar](250) NULL
) ON [PRIMARY]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Get detail of tmp_reversal_clearing
-- =============================================

CREATE PROCEDURE [dbo].[CMS_TmpReversalClearing_GetDetail]
	@REV_DATE	datetime,	
	@ENTRY_LOC	varchar(3)	
AS
BEGIN	
	
	SELECT a.*,ISNULL(b.CUSTOMER_REF,'') CUSTOMER_REF
	FROM TMP_REVERSAL_CLEARING a
	LEFT OUTER JOIN CHECKTOTAL b 
		ON a.DS_CODE=b.DS_CODE AND a.ENTRY_LOC=b.ENTRY_LOC
		AND a.REV_DATE=b.OPR_DATE
	Where a.REV_DATE<=@REV_DATE AND a.ENTRY_LOC=@ENTRY_LOC
	ORDER BY a.ACC_NO,a.DS_CODE asc

	         
END

GO

GRANT EXECUTE ON [dbo].[CMS_TmpReversalClearing_GetDetail] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Get detail for flex from tmp_reversal_clearing
-- =============================================

CREATE PROCEDURE [dbo].[CMS_TmpReversalClearing_GetFlexDetail]
	@REV_DATE	datetime,	
	@ENTRY_LOC	varchar(3)	
AS
BEGIN

	SELECT REV_DATE,SUM(AMOUNT)as CREDTOTAL,
		COUNT(REFACC_NO) TOTCHECK,REFACC_NO
	FROM TMP_REVERSAL_CLEARING 
	WHERE REV_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC
	GROUP BY REV_DATE, REFACC_NO
		         
END

GO

GRANT EXECUTE ON [dbo].[CMS_TmpReversalClearing_GetFlexDetail] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 21-Apr-13
-- Description: Update Clearing Data Final
-- =============================================

CREATE PROCEDURE [dbo].[CMS_Process_ClearingDataFinalUpdate]
	@REV_DATE		datetime,	
	@ENTRY_LOC		varchar(3),
	@FLEX_FILENAME	varchar(15)
AS
BEGIN

	UPDATE CLEARINGTAB 
		SET FLEX_FILENAME=@FLEX_FILENAME
	WHERE FLEX_FILENAME IS NULL 
		AND OPR_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC;

	UPDATE TMP_REVERSAL_CLEARING
		SET FLEX_FILENAME=@FLEX_FILENAME
	WHERE FLEX_FILENAME IS NULL 
		AND REV_DATE<=@REV_DATE AND ENTRY_LOC=@ENTRY_LOC;

	INSERT INTO REVERSAL_HIST_CLEARING
		SELECT * FROM TMP_REVERSAL_CLEARING;
        

	DELETE FROM TMP_REVERSAL_CLEARING;


END

GO

GRANT EXECUTE ON [dbo].[CMS_Process_ClearingDataFinalUpdate] TO [ccms_sp_only]

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 13-Nov-12
-- Description:	Add detail to Citibank_branch table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CitiBankBranch_GetDetailList]		
	@DEL_FLAG	int	
AS
BEGIN	
		
	SET NOCOUNT ON;

	IF @DEL_FLAG=0
		BEGIN	

			SELECT BRANCH_CODE, BRANCH_NAME, ADDRESS1, ADDRESS2,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, 
				AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], 
				IS_AUTH, CLEARING_DEBIT_ACC,'S' = 'U'				 
			FROM CITIBANK_BRANCH_HIST 
			WHERE IS_AUTH=0
			UNION
			SELECT BRANCH_CODE, BRANCH_NAME, ADDRESS1, ADDRESS2, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, 
				AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], 
				1, CLEARING_DEBIT_ACC,'S' = 'A'				
			FROM CITIBANK_BRANCH
			WHERE STATUS ='L'					
			ORDER BY IS_AUTH,BRANCH_CODE

		END
	ELSE
		BEGIN	

			SELECT BRANCH_CODE, BRANCH_NAME, ADDRESS1, ADDRESS2,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, 
				AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], 
				IS_AUTH, CLEARING_DEBIT_ACC,'S' = 'U'				 
			FROM CITIBANK_BRANCH_HIST 
			WHERE IS_AUTH=0
			UNION
			SELECT BRANCH_CODE, BRANCH_NAME, ADDRESS1, ADDRESS2, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, 
				AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], 
				1, CLEARING_DEBIT_ACC,'S' = 
				CASE  
					WHEN STATUS = 'D' THEN 'D'                    
					ELSE 'A'
                END 
			FROM CITIBANK_BRANCH
			WHERE STATUS in ('L','D')					
			ORDER BY IS_AUTH,BRANCH_CODE

		END
	
	   
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 13-Nov-12
-- Description:	Add detail to Citibank_branch table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CitiBankBranch_Add]	
	@BRANCH_CODE	varchar(3),
	@BRANCH_NAME 	varchar(35),
	@ADDRESS1 		varchar(35),
	@ADDRESS2 		varchar(35),	
	@CLEARING_DEBIT_ACC varchar(20)
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT BRANCH_CODE from CITIBANK_BRANCH WHERE BRANCH_CODE=@BRANCH_CODE)
		BEGIN
			-- Duplicate Entry
			ROLLBACK TRANSACTION;		
			RETURN 2	
		END
	
	DELETE CITIBANK_BRANCH_HIST WHERE 
		BRANCH_CODE=@BRANCH_CODE AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	ELSE

	INSERT INTO CITIBANK_BRANCH_HIST(BRANCH_CODE, BRANCH_NAME,	
		ADDRESS1,ADDRESS2,CLEARING_DEBIT_ACC,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
		VALUES(@BRANCH_CODE, @BRANCH_NAME,
		@ADDRESS1,@ADDRESS2,@CLEARING_DEBIT_ACC,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
	RETURN 0;
	   
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 13-Nov-12
-- Description:	update detail to Citibank_branch table
-- =============================================

ALTER PROCEDURE [dbo].[CMS_CitiBankBranch_Update]	
	@BRANCH_CODE		varchar(3),
	@BRANCH_NAME 		varchar(35),
	@ADDRESS1 			varchar(35),
	@ADDRESS2 			varchar(35),	
	@CLEARING_DEBIT_ACC varchar(20),
	@MOD_NO				int,
	@RET_MOD_NO			int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT BRANCH_CODE FROM CITIBANK_BRANCH 
				WHERE BRANCH_CODE=@BRANCH_CODE AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CITIBANK_BRANCH_HIST WHERE BRANCH_CODE=@BRANCH_CODE AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CITIBANK_BRANCH_HIST(BRANCH_CODE, BRANCH_NAME,	
				ADDRESS1,ADDRESS2,CLEARING_DEBIT_ACC,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@BRANCH_CODE, @BRANCH_NAME,
				@ADDRESS1,@ADDRESS2,@CLEARING_DEBIT_ACC,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END				

			COMMIT TRANSACTION;
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT BRANCH_CODE from CITIBANK_BRANCH_HIST 
						WHERE BRANCH_CODE=@BRANCH_CODE AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CITIBANK_BRANCH_HIST WHERE BRANCH_CODE=@BRANCH_CODE AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					INSERT INTO CITIBANK_BRANCH_HIST(BRANCH_CODE, BRANCH_NAME,	
						ADDRESS1,ADDRESS2,CLEARING_DEBIT_ACC,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@BRANCH_CODE, @BRANCH_NAME,
						@ADDRESS1,@ADDRESS2,@CLEARING_DEBIT_ACC,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;
					
					COMMIT TRANSACTION;
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END

		END
    
END

GO



