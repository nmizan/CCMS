USE [CCMS]
GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Jan-13
-- Description:	update detail to CCHECK
-- =============================================

ALTER PROCEDURE [dbo].[CMS_CCheck_Update]
	@SLNO				numeric(3,0),
	@D_CODE				varchar(12), 
	@CLIENT_CODE		varchar(6), 
	@DLOCATION_CODE		varchar(4), 
	@CUSTOMER_REF		varchar(15), 
	@SLIP_DATE			datetime, 
	@VALUE_DATE			datetime, 
	@CHECK_NO			varchar(15), 
	@AMOUNT				numeric(12,2), 
	@CHECK_DATE			datetime, 
	@CHECK_TYPE			varchar(7),
	@DRAWER				varchar(50),
	@DRAWEE_BANK_CODE	varchar(4),
	@LOCATION_CODE		varchar(4),
	@BRANCH_CODE		varchar(4),
	@CHECK_REF			varchar(14),
	@MOD_NO				int,
	@RTN_STATUS			char(1), 
	@NONZONE_REF		varchar(7), 
	@REMINDER_DATE		datetime, 
	@REMINDER_NO		numeric(3,0), 
	@RTN_CODE			varchar(2),
	@FILENAME			varchar(15),
	@FILE_USER_ID		varchar(20),
	@FLEXGEN_DATE		datetime	
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, 
		LOCATION_CODE, BRANCH_CODE, CHECK_REF,
		MOD_NO, IS_AUTH,RTN_STATUS, NONZONE_REF, REMINDER_DATE, 
		REMINDER_NO, RTN_CODE,[FILENAME],FILE_USER_ID,FLEXGEN_DATE)
		VALUES(@SLNO, @D_CODE, @CLIENT_CODE, @DLOCATION_CODE, 
		@CUSTOMER_REF, @SLIP_DATE, @VALUE_DATE, @CHECK_NO, @AMOUNT, 
		@CHECK_DATE, @CHECK_TYPE, @DRAWER, @DRAWEE_BANK_CODE, 
		@LOCATION_CODE, @BRANCH_CODE, @CHECK_REF,
		@MOD_NO, 0, @RTN_STATUS, @NONZONE_REF, @REMINDER_DATE, 
		@REMINDER_NO, @RTN_CODE,@FILENAME,@FILE_USER_ID,@FLEXGEN_DATE)

	SELECT @ErrorVar = @@ERROR;

	IF @ErrorVar <> 0
		BEGIN
			RETURN 1;
		END	
	
	RETURN 0;			
	    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Jan-13
-- Description:	Authorize record to CCHECKTOTAL
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CCheckTotal_Auth]	
	@D_CODE		varchar(12),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_CHKNO	numeric(4,0), 
			@TOTAL_CHKAMT	numeric(12,2), 			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT D_CODE from CCHECKTOTAL_HIST 
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_CHKNO=TOTAL_CHKNO, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CCHECKTOTAL_HIST 
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CCHECKTOTAL_HIST 
				SELECT *,1 FROM CCHECKTOTAL
				WHERE D_CODE=@D_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CCHECKTOTAL_HIST
				SET [STATUS] = 'O' 
				WHERE D_CODE=@D_CODE
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE CCHECKTOTAL
				SET
				TOTAL_CHKNO=@TOTAL_CHKNO,
				TOTAL_CHKAMT=@TOTAL_CHKAMT, 
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE D_CODE=@D_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CCHECKTOTAL_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CCHECKTOTAL
				SELECT D_CODE,TOTAL_CHKNO, TOTAL_CHKAMT, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CCHECKTOTAL_HIST
					WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CCHECKTOTAL_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update CCHECK

	INSERT INTO CCHECK_HIST(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, 
		BRANCH_CODE, CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, IS_AUTH,
		REMINDER_DATE, REMINDER_NO, RTN_CODE,[FILENAME],FILE_USER_ID,FLEXGEN_DATE)
		SELECT SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, 
		BRANCH_CODE, CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, 1,
		REMINDER_DATE, REMINDER_NO, RTN_CODE,[FILENAME],FILE_USER_ID,FLEXGEN_DATE
		FROM CCHECK
		WHERE D_CODE=@D_CODE;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CCHECK WHERE D_CODE=@D_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CCHECK(SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, 
		BRANCH_CODE, CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, 
		REMINDER_DATE, REMINDER_NO, RTN_CODE,[FILENAME],FILE_USER_ID,FLEXGEN_DATE)
		SELECT SLNO, D_CODE, CLIENT_CODE, DLOCATION_CODE, 
		CUSTOMER_REF, SLIP_DATE, VALUE_DATE, CHECK_NO, AMOUNT, 
		CHECK_DATE, CHECK_TYPE, DRAWER, DRAWEE_BANK_CODE, LOCATION_CODE, 
		BRANCH_CODE, CHECK_REF, RTN_STATUS, NONZONE_REF, MOD_NO, 
		REMINDER_DATE, REMINDER_NO, RTN_CODE,[FILENAME],FILE_USER_ID,FLEXGEN_DATE
		FROM CCHECK_HIST 
		WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CCHECK_HIST WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO



ALTER VIEW [dbo].[V_ANY_DEPOSIT]
as
(
	SELECT cc.*,cl.ACC_NO,cl.ACC_NAME,cl.MAIL_ADD,l.LOCATION_NAME,b.BANK_NAME AS DRAWEE_BANK
		FROM CCHECK cc
		LEFT OUTER JOIN CLIENT cl
		ON cc.CLIENT_CODE=cl.CLIENT_CODE
		LEFT OUTER JOIN LOCATION l
		ON l.LOCATION_CODE=cc.DLOCATION_CODE
		LEFT OUTER JOIN BANK b
		ON b.BANK_CODE=cc.DRAWEE_BANK_CODE
)

GO


ALTER VIEW [dbo].[V_ANY_FUNDING]
as
(
	SELECT cc.*,nc.AMOUNT as COLLECTED_AMT, nc.VAT, nc.COMMISION, nc.POSTAGE_CHARGE, nc.INSTRUMENT_EXP, 
	cl.ACC_NO,cl.ACC_NAME,cl.MAIL_ADD,cl.CITIANY_CHARGE,cl.CITIANY_STD_CHARGE,cl.CITIANY_VAT,l.LOCATION_NAME,
	b.BANK_NAME AS DRAWEE_BANK,br.BRANCH_NAME as DRAWEE_BRANCH
	FROM CCHECK cc
	INNER JOIN NCOLLECTION nc
	ON nc.NONZONE_REF=cc.NONZONE_REF
	LEFT OUTER JOIN CLIENT cl
	ON cc.CLIENT_CODE=cl.CLIENT_CODE
	LEFT OUTER JOIN LOCATION l
	ON l.LOCATION_CODE=cc.DLOCATION_CODE
	LEFT OUTER JOIN BANK b
	ON b.BANK_CODE=cc.DRAWEE_BANK_CODE
	LEFT OUTER JOIN BRANCH br
	ON br.BRANCH_CODE=cc.BRANCH_CODE AND br.BANK_CODE=cc.DRAWEE_BANK_CODE
	WHERE cc.RTN_STATUS='P'
)

GO


ALTER VIEW [dbo].[V_ANY_OUTSTANDING]
as
(
	SELECT cc.*,
		cl.ACC_NO,cl.ACC_NAME,cl.MAIL_ADD,l.LOCATION_NAME,
		b.BANK_NAME AS DRAWEE_BANK,br.BRANCH_NAME as DRAWEE_BRANCH,DATEDIFF(d,CC.SLIP_DATE,getdate()) as DAYS_OUTSTANDING
		FROM CCHECK cc 
		LEFT OUTER JOIN CLIENT cl
		ON cc.CLIENT_CODE=cl.CLIENT_CODE
		LEFT OUTER JOIN LOCATION l
		ON l.LOCATION_CODE=cc.DLOCATION_CODE
		LEFT OUTER JOIN BANK b
		ON b.BANK_CODE=cc.DRAWEE_BANK_CODE
		LEFT OUTER JOIN BRANCH br
		ON br.BRANCH_CODE=cc.BRANCH_CODE AND br.BANK_CODE=cc.DRAWEE_BANK_CODE
		WHERE NONZONE_REF IS NOT NULL AND cc.RTN_STATUS = 'O'
)

GO



ALTER VIEW [dbo].[V_SPEEDCASH_DAYZERO]
as
(
	SELECT dc.ENTRY_DATE,ds.*, cl.ACC_NO,cl.ACC_NAME,l.LOCATION_NAME
		FROM DCOLLECTED dc 
		INNER JOIN DSCHEDULE ds
		ON dc.DS_CODE=ds.DS_CODE
		LEFT OUTER JOIN CLIENT cl
		ON ds.CLIENT_CODE=cl.CLIENT_CODE
		LEFT OUTER JOIN LOCATION l
		ON l.LOCATION_CODE=ds.LOCATION_CODE
		WHERE (cl.CASH_DAYS=0 AND ds.DEPOSIT_TYPE='Cash') 
		OR (cl.SPEED_DAYS=0 AND ds.DEPOSIT_TYPE='Check')
)

GO



























