
INSERT INTO CLEARING_CHARGE_SET_MAS(MID, CITI_INC_ACC, CITI_EXP_ACC, CITI_VAT_ACC, BBK_ACC, 
INPUT_BY, INPUT_DATETIME, MOD_NO, [STATUS])
VALUES (1,'','','','',substring(suser_name(),charindex('\',suser_name())+1,20),GETDATE(),1,'L');


INSERT INTO CLEARING_CHARGE_SET_DET(MID, SLNO, VALUE_TYPE, MIN_AMOUNT, MAX_AMOUNT, 
BBK_AMOUNT,CITI_INC_AMOUNT, CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, 
MOD_NO, [STATUS])
VALUES (1,1,1,50000,499999,
8,1.7,0.3,9.7,10,
1,'L');

INSERT INTO CLEARING_CHARGE_SET_DET(MID, SLNO, VALUE_TYPE, MIN_AMOUNT, MAX_AMOUNT, 
BBK_AMOUNT,CITI_INC_AMOUNT, CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, 
MOD_NO, [STATUS])
VALUES (1,2,2,500000,9999999999,
50,8.5,1.5,58.5,60,
1,'L');

INSERT INTO CLEARING_CHARGE_SET_DET(MID, SLNO, VALUE_TYPE, MIN_AMOUNT, MAX_AMOUNT, 
BBK_AMOUNT,CITI_INC_AMOUNT, CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, 
MOD_NO, [STATUS])
VALUES (1,3,1,500000,9999999999,
20,4.25,0.75,24.25,25,
1,'L');

GO







-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Dec-14
-- Description:	Get Total # of modification of CLEARING_CHARGE_SET_MAS table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingChargeSetMas_GetMaxMod]	
	@MID	numeric(1,0)	
AS
BEGIN	

	DECLARE @Max1	int,
			@Max2	int;

	SET NOCOUNT ON;
	
	SELECT @Max1=0,@Max2=0;

	SELECT @Max1=ISNULL(MAX(MOD_NO),0) FROM CLEARING_CHARGE_SET_MAS_HIST 
		WHERE MID=@MID AND IS_AUTH=0;
		
	IF @Max1=0
		BEGIN
			SELECT @Max2=ISNULL(MAX(MOD_NO),0) FROM CLEARING_CHARGE_SET_MAS 
				WHERE MID=@MID;
			SELECT @Max2;
			RETURN 0;			
		END
	
	SELECT @Max1;
	RETURN 0;

END


GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Dec-14
-- Description:	Get detail of Clearing_Charge_SET_MAS table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingChargeSetMas_GetDetail]	
	@MID	numeric(1,0),	
	@MOD_NO	int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT MID
			   FROM CLEARING_CHARGE_SET_MAS WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
			FROM CLEARING_CHARGE_SET_MAS 
			WHERE MID=@MID AND MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT * 
			FROM CLEARING_CHARGE_SET_MAS_HIST
			WHERE MID=@MID AND MOD_NO = @MOD_NO
		END
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Dec-14
-- Description:	Get detail of CLEARING_CHARGE_SET_DET table
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingChargeSetDet_GetDetails]	
	@MID	numeric(1,0),	
	@MOD_NO	int	
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT MID
			   FROM CLEARING_CHARGE_SET_DET WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT *,'IS_AUTH'=1 
			FROM CLEARING_CHARGE_SET_DET 
			WHERE MID=@MID AND MOD_NO = @MOD_NO
			ORDER BY SLNO;
		END	
	ELSE
		BEGIN
			SELECT * 
			FROM CLEARING_CHARGE_SET_DET_HIST
			WHERE MID=@MID AND MOD_NO = @MOD_NO
			ORDER BY SLNO;
		END
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 11-Dec-14
-- Description:	update detail to 
-- =============================================

CREATE PROCEDURE [dbo].[CMS_ClearingChargeSetMas_Update]
	@MID			numeric(1,0),
	@BBK_ACC		varchar(16),
	@CITI_INC_ACC	varchar(16),
	@CITI_EXP_ACC	varchar(16),
	@CITI_VAT_ACC	varchar(16),
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @ErrorVar INT;	
	
	SET NOCOUNT ON;

	IF EXISTS(SELECT MID FROM CLEARING_CHARGE_SET_MAS  
				WHERE  MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			
			DELETE CLEARING_CHARGE_SET_MAS_HIST WHERE MID=@MID AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN					
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CLEARING_CHARGE_SET_MAS_HIST(MID, CITI_INC_ACC, CITI_EXP_ACC, 
				CITI_VAT_ACC, BBK_ACC, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, [STATUS],IS_AUTH)
				VALUES(@MID,@CITI_INC_ACC, @CITI_EXP_ACC, 
				@CITI_VAT_ACC, @BBK_ACC, 
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END				
			
			DELETE CLEARING_CHARGE_SET_DET_HIST
				WHERE MID=@MID AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT MID from CLEARING_CHARGE_SET_MAS_HIST 
						WHERE MID=@MID AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CLEARING_CHARGE_SET_MAS_HIST WHERE 
						MID=@MID AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END

					INSERT INTO CLEARING_CHARGE_SET_MAS_HIST(MID, CITI_INC_ACC, CITI_EXP_ACC, 
						CITI_VAT_ACC, BBK_ACC, 
						INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, [STATUS],IS_AUTH)
						VALUES(@MID,@CITI_INC_ACC, @CITI_EXP_ACC, 
						@CITI_VAT_ACC, @BBK_ACC, 
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;

					DELETE CLEARING_CHARGE_SET_DET_HIST
						WHERE MID=@MID AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END			
					
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					
					RETURN 4;
				END

		END
    
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Dec-14
-- Description:	update detail to dbo.CLEARING_CHARGE_SET_DET
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingChargeSetDet_Update]
	@MID				numeric(1,0),
	@SLNO				numeric(2,0),
	@VALUE_TYPE			numeric(1,0),	
	@MIN_AMOUNT			numeric(14,2), 
	@MAX_AMOUNT			numeric(14,2), 	
	@BBK_AMOUNT			numeric(14,2), 
	@CITI_INC_AMOUNT	numeric(14,2), 
	@CITI_VAT_AMOUNT	numeric(14,2), 
	@CLIENT_DR_AMOUNT	numeric(14,2), 
	@CHARGEABLE_AMOUNT	numeric(14,2),	
	@MOD_NO				numeric(3,0)
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARING_CHARGE_SET_DET_HIST(MID, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, CITI_VAT_AMOUNT, 
		CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, IS_AUTH)
		VALUES(@MID, @SLNO, @VALUE_TYPE, 
		@MIN_AMOUNT, @MAX_AMOUNT, @BBK_AMOUNT, @CITI_INC_AMOUNT, @CITI_VAT_AMOUNT, 
		@CLIENT_DR_AMOUNT, @CHARGEABLE_AMOUNT, 
		@MOD_NO,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END


GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Dec-14
-- Description:	Authorize record to CLEARING_CHARGE_SET_MAS
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingChargeSet_Auth]	
	@MID			numeric(1,0),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@BBK_ACC		varchar(16),
			@CITI_INC_ACC	varchar(16),
			@CITI_EXP_ACC	varchar(16),
			@CITI_VAT_ACC	varchar(16),		
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT MID from CLEARING_CHARGE_SET_MAS_HIST  
			  WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@BBK_ACC=BBK_ACC,@CITI_INC_ACC=CITI_INC_ACC,
				@CITI_EXP_ACC=CITI_EXP_ACC,@CITI_VAT_ACC=CITI_VAT_ACC, 				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLEARING_CHARGE_SET_MAS_HIST 
				WHERE MID=@MID AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @STATUS='U'
		BEGIN
			SELECT @STATUS='L';
		END
		
	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLEARING_CHARGE_SET_MAS_HIST(MID, CITI_INC_ACC, CITI_EXP_ACC, 
				CITI_VAT_ACC, BBK_ACC, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, AUTH_DATETIME, AUTH_FROM, 
				MOD_NO, [STATUS], IS_AUTH)			
				SELECT MID, CITI_INC_ACC, CITI_EXP_ACC, 
				CITI_VAT_ACC, BBK_ACC, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, AUTH_DATETIME, AUTH_FROM, 
				MOD_NO, [STATUS], 1				
				FROM CLEARING_CHARGE_SET_MAS
				WHERE MID=@MID;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLEARING_CHARGE_SET_MAS_HIST
				SET [STATUS] = 'O' 
				WHERE MID=@MID
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			--IF @STATUS='U'
			--	BEGIN
			--		SELECT @STATUS='L';
			--	END

			UPDATE CLEARING_CHARGE_SET_MAS
				SET
				BBK_ACC=@BBK_ACC,CITI_INC_ACC=@CITI_INC_ACC,
				CITI_EXP_ACC=@CITI_EXP_ACC,CITI_VAT_ACC=@CITI_VAT_ACC,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE MID=@MID;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLEARING_CHARGE_SET_MAS_HIST WHERE MID=@MID
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	
	
	-- Now update CLEARING_CHARGE_SET_DET

	INSERT INTO CLEARING_CHARGE_SET_DET_HIST(MID, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
		CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, IS_AUTH)
		SELECT MID, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
		CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, 1		
		FROM CLEARING_CHARGE_SET_DET
		WHERE MID=@MID;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CLEARING_CHARGE_SET_DET WHERE MID=@MID;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CLEARING_CHARGE_SET_DET(MID, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
		CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, [STATUS])
		SELECT MID, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
		CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, @STATUS
		FROM CLEARING_CHARGE_SET_DET_HIST 
		WHERE MID=@MID AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CLEARING_CHARGE_SET_DET_HIST WHERE MID=@MID AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-Dec-14
-- Description:	Remove record from ClearingChargeSet
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingChargeSet_Remove]
	@MID		numeric(1,0),
	@MOD_NO		int,	
	@RET_MOD_NO	int output
AS
BEGIN	
		
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;	

	BEGIN TRANSACTION

	IF EXISTS(SELECT MID from CLEARING_CHARGE_SET_MAS
			  WHERE MID=@MID AND MOD_NO=@MOD_NO)
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT MID from CLEARING_CHARGE_SET_MAS_HIST 
						WHERE MID=@MID AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CLEARING_CHARGE_SET_MAS_HIST
						WHERE MID=@MID AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE CLEARING_CHARGE_SET_DET_HIST 
						WHERE MID=@MID AND MOD_NO=@MOD_NO AND IS_AUTH=0 ;
					
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
	
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END

GO




ALTER TABLE CLEARING_CLIENT
ADD IS_GOV bit NULL; 
GO

ALTER TABLE CLEARING_CLIENT
ADD INSUFF_FUND bit NULL;
GO

ALTER TABLE CLEARING_CLIENT_HIST
ADD IS_GOV bit NULL; 
GO

ALTER TABLE CLEARING_CLIENT_HIST
ADD INSUFF_FUND bit NULL;
GO

DROP TABLE CLEARING_CLIENT_CHARGE;
GO

DROP TABLE CLEARING_CLIENT_CHARGE_HIST;
GO

CREATE TABLE CLEARING_CLIENT_CHARGE(
	ACC_NO	varchar(15) NOT NULL,
	SLNO numeric(2, 0) NOT NULL,
	VALUE_TYPE numeric(1, 0) NOT NULL,
	MIN_AMOUNT numeric(14, 2) NOT NULL,
	MAX_AMOUNT numeric(14, 2) NOT NULL,	
	BBK_AMOUNT numeric(14, 2) NOT NULL,
	CITI_INC_AMOUNT numeric(14, 2) NOT NULL,
	CITI_VAT_AMOUNT numeric(14, 2) NOT NULL,
	CLIENT_DR_AMOUNT numeric(14, 2) NOT NULL,
	CHARGEABLE_AMOUNT numeric(14, 2) NOT NULL,	
	MOD_NO numeric(3, 0) NOT NULL,
	[STATUS] char(1) NOT NULL,
	PRIMARY KEY(ACC_NO,MOD_NO,SLNO))
 
 GO


CREATE TABLE CLEARING_CLIENT_CHARGE_HIST(
	ACC_NO	varchar(15) NOT NULL,
	SLNO numeric(2, 0) NOT NULL,
	VALUE_TYPE numeric(1, 0) NOT NULL,
	MIN_AMOUNT numeric(14, 2) NOT NULL,
	MAX_AMOUNT numeric(14, 2) NOT NULL,	
	BBK_AMOUNT numeric(14, 2) NOT NULL,
	CITI_INC_AMOUNT numeric(14, 2) NOT NULL,
	CITI_VAT_AMOUNT numeric(14, 2) NOT NULL,
	CLIENT_DR_AMOUNT numeric(14, 2) NOT NULL,
	CHARGEABLE_AMOUNT numeric(14, 2) NOT NULL,	
	MOD_NO numeric(3, 0) NOT NULL,	
	IS_AUTH bit NOT NULL,
	PRIMARY KEY(ACC_NO,MOD_NO,SLNO))
 
 GO





-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Apr-13
-- Description:	Get detail of ClearingClientCharge
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingClientCharge_GetDetails]	
	@ACC_NO		varchar(15),	
	@MOD_NO		int
AS
BEGIN	
	
	SET NOCOUNT ON;

	IF EXISTS( SELECT ACC_NO
			   FROM CLEARING_CLIENT_CHARGE 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT cc.*
			FROM CLEARING_CLIENT_CHARGE cc
			WHERE cc.ACC_NO=@ACC_NO AND cc.MOD_NO = @MOD_NO
		END	
	ELSE
		BEGIN
			SELECT cch.* 
			FROM CLEARING_CLIENT_CHARGE_HIST cch
			WHERE cch.ACC_NO=@ACC_NO  AND cch.MOD_NO = @MOD_NO
		END
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Add detail to ClearingClient table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingClient_Add]		
	@ACC_NO				varchar(15),  
	@ACC_NAME			varchar(50),
	@MAIL_ADD			varchar(256), 
	@CONTACT			varchar(50), 		
	@SPEED_CR_TYPE		varchar(25),	
	@IS_DISABLE			bit,
	@IS_GOV				bit,
	@INSUFF_FUND		bit
	
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	

	IF EXISTS(SELECT ACC_NO FROM CLEARING_CLIENT WHERE ACC_NO=@ACC_NO)
		BEGIN
			-- Duplicate Entry				
			RETURN 2	
		END
	
	DELETE CLEARING_CLIENT_HIST WHERE 
		ACC_NO=@ACC_NO AND IS_AUTH=0;

	SELECT @ErrorVar = @@ERROR;
		
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
	ELSE

	INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME,MAIL_ADD,
		CONTACT, SPEED_CR_TYPE,IS_DISABLE,
		INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH,
		IS_GOV,INSUFF_FUND)
		VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
		@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE,
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0,
		@IS_GOV,@INSUFF_FUND);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END

	DELETE CLEARING_CLIENT_CHARGE_HIST 
		WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;
	
	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END	
	
	RETURN 0;
	   
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Apr-13
-- Description:	Add detail to ClearingClientCharge
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingClientCharge_Add]		
	@ACC_NO				varchar(15),
	@SLNO				numeric(2,0),
	@VALUE_TYPE			numeric(1,0), 
	@MIN_AMOUNT			numeric(14,2), 
	@MAX_AMOUNT			numeric(14,2), 
	@BBK_AMOUNT			numeric(14,2), 
	@CITI_INC_AMOUNT	numeric(14,2), 
	@CITI_VAT_AMOUNT	numeric(14,2), 
	@CLIENT_DR_AMOUNT	numeric(14,2), 
	@CHARGEABLE_AMOUNT	numeric(14,2)
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARING_CLIENT_CHARGE_HIST(ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, 
		BBK_AMOUNT, CITI_INC_AMOUNT, CITI_VAT_AMOUNT, 
		CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO,IS_AUTH)
		VALUES(@ACC_NO, @SLNO, @VALUE_TYPE, 
		@MIN_AMOUNT, @MAX_AMOUNT, 
		@BBK_AMOUNT, @CITI_INC_AMOUNT, @CITI_VAT_AMOUNT, 
		@CLIENT_DR_AMOUNT, @CHARGEABLE_AMOUNT, 1,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	update detail to Clearing_client table
-- =============================================

ALTER PROCEDURE [dbo].[CMS_ClearingClient_Update]		
	@ACC_NO				varchar(15),  
	@ACC_NAME			varchar(50),
	@MAIL_ADD			varchar(256), 
	@CONTACT			varchar(50), 	
	@SPEED_CR_TYPE		varchar(25),	
	@IS_DISABLE			bit,
	@IS_GOV				bit,
	@INSUFF_FUND		bit,
	@MOD_NO				int,
	@RET_MOD_NO			int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	IF EXISTS(SELECT ACC_NO FROM CLEARING_CLIENT 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME, MAIL_ADD,
				CONTACT, SPEED_CR_TYPE, IS_DISABLE,IS_GOV,INSUFF_FUND,
				INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
				VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
				@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE, @IS_GOV, @INSUFF_FUND,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),@RET_MOD_NO,'U',0);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN					
					RETURN 1;
				END

			DELETE CLEARING_CLIENT_CHARGE_HIST 
				WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					RETURN 1;
				END
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT_HIST 
						WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END

					INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME,MAIL_ADD,
						CONTACT, SPEED_CR_TYPE, IS_DISABLE,IS_GOV,INSUFF_FUND,
						INPUT_BY,INPUT_DATETIME,INPUT_FROM,MOD_NO,[STATUS],IS_AUTH)
						VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
						@CONTACT, @SPEED_CR_TYPE, @IS_DISABLE,@IS_GOV,@INSUFF_FUND,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),@MOD_NO,'U',0);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN							
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;	

					DELETE CLEARING_CLIENT_CHARGE_HIST 
						WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;

					IF @ErrorVar <> 0
						BEGIN
							RETURN 1;
						END
					
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist					
					RETURN 4;
				END

		END
    
END

GO





-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Apr-13
-- Description:	update detail to ClearingClientCharge
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingClientCharge_Update]
	@ACC_NO				varchar(15),
	@SLNO				numeric(2,0),
	@VALUE_TYPE			numeric(1,0), 
	@MIN_AMOUNT			numeric(14,2), 
	@MAX_AMOUNT			numeric(14,2), 
	@BBK_AMOUNT			numeric(14,2), 
	@CITI_INC_AMOUNT	numeric(14,2), 
	@CITI_VAT_AMOUNT	numeric(14,2), 
	@CLIENT_DR_AMOUNT	numeric(14,2), 
	@CHARGEABLE_AMOUNT	numeric(14,2),
	@MOD_NO				numeric(3,0)
AS
BEGIN	

	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO CLEARING_CLIENT_CHARGE_HIST(ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, 
		BBK_AMOUNT, CITI_INC_AMOUNT, CITI_VAT_AMOUNT, 
		CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO,IS_AUTH)
		VALUES(@ACC_NO, @SLNO, @VALUE_TYPE, 
		@MIN_AMOUNT, @MAX_AMOUNT, 
		@BBK_AMOUNT, @CITI_INC_AMOUNT, @CITI_VAT_AMOUNT, 
		@CLIENT_DR_AMOUNT, @CHARGEABLE_AMOUNT, @MOD_NO,0);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Remove record from Clearing_Client table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingClient_Remove]	
	@ACC_NO		varchar(15),	
	@MOD_NO		int,
	@RET_MOD_NO	int output
AS
BEGIN	
	DECLARE @STATUS				char(1),			
			@ACC_NAME			varchar(50),
			@MAIL_ADD			varchar(256), 
			@CONTACT			varchar(50), 			
			@SPEED_CR_TYPE		varchar(25),			
			@IS_DISABLE			bit,
			@IS_GOV				bit,
			@INSUFF_FUND		bit,
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),			
			@IS_AUTH			bit;			
	
	DECLARE @ErrorVar		int; 
			
	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT 
			  WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@ACC_NAME=ACC_NAME,@MAIL_ADD=MAIL_ADD,@CONTACT=CONTACT,
				@SPEED_CR_TYPE=SPEED_CR_TYPE,@IS_DISABLE=IS_DISABLE,
				@IS_GOV=IS_GOV,@INSUFF_FUND = INSUFF_FUND,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM
				FROM CLEARING_CLIENT 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				CLEARING_CLIENT_HIST (ACC_NO, ACC_NAME,MAIL_ADD,
				CONTACT, SPEED_CR_TYPE, IS_DISABLE, IS_GOV, INSUFF_FUND,
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH)
				VALUES(@ACC_NO, @ACC_NAME,@MAIL_ADD,
				@CONTACT, @SPEED_CR_TYPE,@IS_DISABLE, @IS_GOV, @INSUFF_FUND,
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
						
			DELETE CLEARING_CLIENT_CHARGE_HIST
				WHERE ACC_NO=@ACC_NO AND IS_AUTH=0 ;

			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			INSERT INTO CLEARING_CLIENT_CHARGE_HIST(ACC_NO, SLNO, VALUE_TYPE, 
				MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
				CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, IS_AUTH)
				SELECT ACC_NO, SLNO, VALUE_TYPE, 
				MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
				CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, @RET_MOD_NO, 0				
				FROM CLEARING_CLIENT_CHARGE
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar = @@error;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END					
			
			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT_HIST 
					  WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE CLEARING_CLIENT_HIST
						WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					DELETE CLEARING_CLIENT_CHARGE_HIST 
						WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO AND IS_AUTH=0 ;
					
					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 31-Mar-13
-- Description:	Authorize record to Clearing_Client table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ClearingClient_Auth]	
	@ACC_NO			varchar(15),
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),			
			@ACC_NAME			varchar(50),
			@MAIL_ADD			varchar(256), 
			@CONTACT			varchar(50), 			
			@SPEED_CR_TYPE		varchar(25),			
			@IS_DISABLE			bit,
			@IS_GOV				bit,
			@INSUFF_FUND		bit,
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),
			@IS_AUTH			bit;			
	
	DECLARE @ErrorVar1		int; 
	
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT ACC_NO from CLEARING_CLIENT_HIST 
			  WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS], 
				@ACC_NAME=ACC_NAME,@MAIL_ADD=MAIL_ADD,@CONTACT=CONTACT,
				@SPEED_CR_TYPE=SPEED_CR_TYPE,@IS_DISABLE=IS_DISABLE,
				@IS_GOV=IS_GOV,@INSUFF_FUND = INSUFF_FUND,
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CLEARING_CLIENT_HIST 
				WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;
		
	IF @STATUS='U'
		BEGIN
			SELECT @STATUS='L';
		END

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CLEARING_CLIENT_HIST(ACC_NO, ACC_NAME, 
				MAIL_ADD, CONTACT, SPEED_CR_TYPE, IS_DISABLE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], IS_AUTH, 
				IS_GOV, INSUFF_FUND) 
				SELECT ACC_NO, ACC_NAME, 
				MAIL_ADD, CONTACT, SPEED_CR_TYPE, IS_DISABLE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], 1,
				IS_GOV, INSUFF_FUND
				FROM CLEARING_CLIENT
				WHERE ACC_NO=@ACC_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CLEARING_CLIENT_HIST
				SET [STATUS] = 'O' 
				WHERE ACC_NO=@ACC_NO 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END		

			UPDATE CLEARING_CLIENT
				SET ACC_NAME=@ACC_NAME,MAIL_ADD=@MAIL_ADD,CONTACT=@CONTACT,
				SPEED_CR_TYPE=@SPEED_CR_TYPE, IS_DISABLE=@IS_DISABLE,
				IS_GOV=@IS_GOV,INSUFF_FUND = @INSUFF_FUND,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE ACC_NO=@ACC_NO;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO CLEARING_CLIENT(ACC_NO, ACC_NAME, MAIL_ADD, 
				CONTACT, SPEED_CR_TYPE, IS_DISABLE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], 
				IS_GOV, INSUFF_FUND)
				SELECT ACC_NO, ACC_NAME,MAIL_ADD,
					CONTACT, SPEED_CR_TYPE,IS_DISABLE, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM,
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L',
					IS_GOV, INSUFF_FUND
					FROM CLEARING_CLIENT_HIST
					WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CLEARING_CLIENT_HIST WHERE ACC_NO=@ACC_NO
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

	-- Now update CLEARING_CLIENT_CHARGE

	INSERT INTO CLEARING_CLIENT_CHARGE_HIST(ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
		CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, IS_AUTH)
		SELECT ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
		CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, 1
		FROM CLEARING_CLIENT_CHARGE
		WHERE ACC_NO=@ACC_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CLEARING_CLIENT_CHARGE WHERE ACC_NO=@ACC_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CLEARING_CLIENT_CHARGE(ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
		CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, [STATUS])
		SELECT ACC_NO, SLNO, VALUE_TYPE, 
		MIN_AMOUNT, MAX_AMOUNT, BBK_AMOUNT, CITI_INC_AMOUNT, 
		CITI_VAT_AMOUNT, CLIENT_DR_AMOUNT, CHARGEABLE_AMOUNT, MOD_NO, @STATUS 
		FROM CLEARING_CLIENT_CHARGE_HIST 
		WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CLEARING_CLIENT_CHARGE_HIST WHERE ACC_NO=@ACC_NO AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO





CREATE TABLE [dbo].[TMP_CHARGE_CLEARING](	
	OPR_DATE [datetime] NOT NULL,			
	CHECK_NUMBER [varchar](15) NOT NULL,	
	ACC_NO [varchar](15) NOT NULL,
	AMOUNT [numeric](14, 2) NOT NULL,		
	FLEX_FILENAME [varchar](15) NULL,
	USERID varchar(20) NOT NULL,
	VALUE_TYPE numeric(1, 0) NOT NULL,
	CHARGEABLE_AMT numeric(14,2) NOT NULL,
	CHARGED_AMT numeric(14,2) NOT NULL,
	BBK_CHARGE numeric(14,2) NOT NULL,
	CITI_INCOME numeric(14,2) NOT NULL,
	CITI_VAT numeric(14,2) NOT NULL,
	INSUFF_FUND bit NOT NULL
)
	

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Dec-14
-- Description: Process for clearing charge 
-- =============================================

CREATE PROCEDURE [dbo].[CMS_Process_ClearingChargeGenerate]
	@OPR_DATE_FROM	datetime,
	@OPR_DATE_TO	datetime,
	@VALUE_TYPE		numeric(1,0)	
AS
BEGIN	
	
	DECLARE 	
		@vOPR_DATE			date,
		@vCHECK_NUMBER		varchar(15),
		@vDEBIT_CREDIT		numeric(14,2),
		@vREMARK			varchar(15),
		@vVALUE_TYPE		numeric(1,0),
		@vACC_NO			varchar(15),
		@vBBK_AMOUNT		numeric(14,2), 
		@vCITI_INC_AMOUNT	numeric(14,2), 
		@vCITI_VAT_AMOUNT	numeric(14,2), 
		@vCLIENT_DR_AMOUNT	numeric(14,2), 
		@vCHARGEABLE_AMOUNT	numeric(14,2),
		@vINSUFF_FUND		bit,
		@vIS_GOV			bit;
	DECLARE
		@ErrorVar		int,
		@vMinAmount numeric(14,2);
		
	SET NOCOUNT ON;
			
	SELECT @vMinAmount=MIN(MIN_AMOUNT) FROM dbo.CLEARING_CHARGE_SET_DET
		WHERE VALUE_TYPE=@VALUE_TYPE;
	
	DELETE FROM dbo.TMP_CHARGE_CLEARING 
		WHERE OPR_DATE>=@OPR_DATE_FROM AND OPR_DATE <= @OPR_DATE_TO
		AND VALUE_TYPE=@VALUE_TYPE;
	
	DECLARE curChqs CURSOR FOR
		SELECT OPR_DATE,CHECK_NUMBER,DEBIT_CREDIT,REMARK,VALUE_TYPE 
			FROM dbo.CLEARINGTAB 
			WHERE [STATUS]='L' AND ISNULL(GOV_CHQ,0)=0 AND ISNULL(IQA_FAILED,0)=0
			AND OPR_DATE>=@OPR_DATE_FROM AND OPR_DATE <= @OPR_DATE_TO
			AND VALUE_TYPE=@VALUE_TYPE
			AND DEBIT_CREDIT>=@vMinAmount;
		
	OPEN curChqs;
	FETCH NEXT FROM curChqs 
        INTO @vOPR_DATE,@vCHECK_NUMBER,@vDEBIT_CREDIT,@vREMARK,@vVALUE_TYPE;

	WHILE @@FETCH_STATUS=0 
 	BEGIN
 		SELECT @vACC_NO=null; 		
 		
 		SELECT @vACC_NO=ACC_NO, @vBBK_AMOUNT=BBK_AMOUNT, 
 			@vCITI_INC_AMOUNT=CITI_INC_AMOUNT, @vCITI_VAT_AMOUNT=CITI_VAT_AMOUNT, 
 			@vCLIENT_DR_AMOUNT = CLIENT_DR_AMOUNT, @vCHARGEABLE_AMOUNT=CHARGEABLE_AMOUNT 
 			FROM dbo.CLEARING_CLIENT_CHARGE
			WHERE ACC_NO = @vREMARK AND [STATUS]='L' 
			AND  MIN_AMOUNT<=@vDEBIT_CREDIT AND MAX_AMOUNT>=@vDEBIT_CREDIT
			AND VALUE_TYPE=@vVALUE_TYPE ;
 		
 		IF @vACC_NO is null
 		BEGIN 		
 			
 			SELECT @vBBK_AMOUNT=BBK_AMOUNT, 
 				@vCITI_INC_AMOUNT=CITI_INC_AMOUNT, @vCITI_VAT_AMOUNT=CITI_VAT_AMOUNT, 
 				@vCLIENT_DR_AMOUNT = CLIENT_DR_AMOUNT, @vCHARGEABLE_AMOUNT=CHARGEABLE_AMOUNT 
 				FROM CLEARING_CHARGE_SET_DET
				WHERE MIN_AMOUNT<=@vDEBIT_CREDIT AND MAX_AMOUNT>=@vDEBIT_CREDIT
				AND VALUE_TYPE=@vVALUE_TYPE;
				
 		END
 		
 		SELECT @vINSUFF_FUND = NULL; 		
 		
 		SELECT @vINSUFF_FUND = ISNULL(INSUFF_FUND,0),@vIS_GOV= ISNULL(IS_GOV,0)  FROM CLEARING_CLIENT
			WHERE ACC_NO=@vREMARK AND [STATUS]='L';
 		
 		IF @vINSUFF_FUND IS NULL
 		BEGIN
 			RETURN 4;
 		END
 		
 		IF @vIS_GOV=0
 		BEGIN
 			INSERT INTO dbo.TMP_CHARGE_CLEARING(OPR_DATE, CHECK_NUMBER, ACC_NO, AMOUNT, 
 				USERID, 
 				VALUE_TYPE, CHARGEABLE_AMT, CHARGED_AMT, 
 				BBK_CHARGE, CITI_INCOME, CITI_VAT, INSUFF_FUND)
 				VALUES(@vOPR_DATE,@vCHECK_NUMBER,@vREMARK,@vDEBIT_CREDIT,
 				substring(suser_name(),charindex('\',suser_name())+1,20),
 				@vVALUE_TYPE,@vCHARGEABLE_AMOUNT,@vCLIENT_DR_AMOUNT,
 				@vBBK_AMOUNT,@vCITI_INC_AMOUNT,@vCITI_VAT_AMOUNT,@vINSUFF_FUND)
 		END

		SELECT @ErrorVar = @@error;			

		IF @ErrorVar <> 0
			BEGIN				
				RETURN 1;
			END
 	
 		FETCH NEXT FROM curChqs 
			INTO @vOPR_DATE,@vCHECK_NUMBER,@vDEBIT_CREDIT,@vREMARK,@vVALUE_TYPE;
	END

	CLOSE curChqs;
	DEALLOCATE curChqs;

	RETURN 0;	
         
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 23-Dec-14
-- Description:	get detail of ClearingChargeSetMas table
--				by MID
-- =============================================
CREATE PROCEDURE [dbo].[CMS_ClearingChargeSetMas_GetDetailByCode]	
	@MID	numeric(1,0)
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT *
		FROM dbo.CLEARING_CHARGE_SET_MAS  		
		WHERE MID=@MID		
	   
END


GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Dec-14
-- Description:	Get Client Charge records from TMP_CHARGE_CLEARING
-- =============================================
CREATE PROCEDURE [dbo].[CMS_TmpChargeClearing_GetClientCharge]		
	@OPR_DATE_FROM	datetime,
	@OPR_DATE_TO	datetime,
	@VALUE_TYPE		numeric(1,0)
AS
BEGIN	
	
	SET NOCOUNT ON;

	SELECT ACC_NO,CHARGEABLE_AMT,VALUE_TYPE, COUNT(1) VOLUME, SUM(CHARGED_AMT) CHARGED
		FROM dbo.TMP_CHARGE_CLEARING
		WHERE INSUFF_FUND=0 AND VALUE_TYPE=@VALUE_TYPE
		AND OPR_DATE>=@OPR_DATE_FROM AND OPR_DATE<=@OPR_DATE_TO 
		GROUP BY ACC_NO, CHARGEABLE_AMT,VALUE_TYPE 
	
	
END

GO





-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Dec-14
-- Description:	Get Citi Expense records from TMP_CHARGE_CLEARING
-- =============================================
CREATE PROCEDURE [dbo].[CMS_TmpChargeClearing_GetCitiExp]		
	@OPR_DATE_FROM	datetime,
	@OPR_DATE_TO	datetime,
	@VALUE_TYPE		numeric(1,0)
AS
BEGIN	
	
	SET NOCOUNT ON;
	
	SELECT OPR_DATE,VALUE_TYPE,COUNT(1) VOLUME,SUM(BBK_CHARGE+CITI_INCOME+CITI_VAT-CHARGED_AMT) CITIEXP 
		FROM dbo.TMP_CHARGE_CLEARING
		WHERE INSUFF_FUND=0 AND VALUE_TYPE=@VALUE_TYPE
		AND OPR_DATE>=@OPR_DATE_FROM AND OPR_DATE<=@OPR_DATE_TO
		GROUP BY OPR_DATE,VALUE_TYPE
	
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Dec-14
-- Description:	Get BBK Charge records from TMP_CHARGE_CLEARING
-- =============================================
CREATE PROCEDURE [dbo].[CMS_TmpChargeClearing_GetBBKCharge]		
	@OPR_DATE_FROM	datetime,
	@OPR_DATE_TO	datetime,
	@VALUE_TYPE		numeric(1,0)
AS
BEGIN	
	
	SET NOCOUNT ON;
		
	SELECT OPR_DATE, VALUE_TYPE, BBK_CHARGE, COUNT(1) VOLUME,SUM(BBK_CHARGE) TOTBBKCHARGE
		FROM dbo.TMP_CHARGE_CLEARING
		WHERE INSUFF_FUND=0 AND VALUE_TYPE=@VALUE_TYPE
		AND OPR_DATE>=@OPR_DATE_FROM AND OPR_DATE<=@OPR_DATE_TO
		GROUP BY OPR_DATE,VALUE_TYPE,BBK_CHARGE
	
END

GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Dec-14
-- Description:	Get Citi VAT Charge records from TMP_CHARGE_CLEARING
-- =============================================
CREATE PROCEDURE [dbo].[CMS_TmpChargeClearing_GetCitiVAT]		
	@OPR_DATE_FROM	datetime,
	@OPR_DATE_TO	datetime,
	@VALUE_TYPE		numeric(1,0)
AS
BEGIN	
	
	SET NOCOUNT ON;
	
	SELECT OPR_DATE, VALUE_TYPE, COUNT(1) VOLUME,SUM(CITI_VAT) CITIVAT
		FROM dbo.TMP_CHARGE_CLEARING
		WHERE INSUFF_FUND=0 AND VALUE_TYPE=@VALUE_TYPE
		AND OPR_DATE>=@OPR_DATE_FROM AND OPR_DATE<=@OPR_DATE_TO
		GROUP BY OPR_DATE,VALUE_TYPE
	
END

GO





-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 24-Dec-14
-- Description:	Get Citi Income records from TMP_CHARGE_CLEARING
-- =============================================
CREATE PROCEDURE [dbo].[CMS_TmpChargeClearing_GetCitiIncome]		
	@OPR_DATE_FROM	datetime,
	@OPR_DATE_TO	datetime,
	@VALUE_TYPE		numeric(1,0)
AS
BEGIN	
	
	SET NOCOUNT ON;
	
	SELECT OPR_DATE, VALUE_TYPE, COUNT(1) VOLUME,SUM(CITI_INCOME) CITIINCOME FROM dbo.TMP_CHARGE_CLEARING
		WHERE INSUFF_FUND=0 AND VALUE_TYPE=@VALUE_TYPE
		AND OPR_DATE>=@OPR_DATE_FROM AND OPR_DATE<=@OPR_DATE_TO
		GROUP BY OPR_DATE,VALUE_TYPE
	
END

GO
















