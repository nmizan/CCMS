ALTER TABLE dbo.DSCHEDULE
ADD [STATUS] char (1) NULL; 
GO


UPDATE dbo.DSCHEDULE SET [STATUS]=dc.STATUS 
FROM dbo.DCOLLECTED dc INNER JOIN dbo.DSCHEDULE ds
ON dc.DS_CODE=ds.DS_CODE 


GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 03-Jan-13
-- Description:	Authorize record to DCollected
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DCollected_Auth]	
	@DS_CODE		varchar(12),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@TOTAL_NOCHK	numeric(4,0), 
			@TOTAL_CHKAMT	numeric(12,2), 
			@TOTAL_CASHAMT	numeric(12,2),			
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit,
			@vSlipDate		datetime,
			@vDCode			varchar(12);			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT DS_CODE from DCOLLECTED_HIST 
			  WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],
				@TOTAL_NOCHK=TOTAL_NOCHK, 
				@TOTAL_CHKAMT=TOTAL_CHKAMT, @TOTAL_CASHAMT=TOTAL_CASHAMT,	
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM DCOLLECTED_HIST 
				WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @STATUS='U'
		BEGIN
			SELECT @STATUS='L';
		END

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO DCOLLECTED_HIST(DS_CODE, TOTAL_NOCHK, TOTAL_CHKAMT, 
				TOTAL_CASHAMT, INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, 
				AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], IS_AUTH, ENTRY_DATE) 
				SELECT DS_CODE, TOTAL_NOCHK, TOTAL_CHKAMT, 
					TOTAL_CASHAMT, INPUT_BY, INPUT_DATETIME, INPUT_FROM, AUTH_BY, 
					AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], 1,ENTRY_DATE 
					FROM DCOLLECTED
					WHERE DS_CODE=@DS_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE DCOLLECTED_HIST
				SET [STATUS] = 'O' 
				WHERE DS_CODE=@DS_CODE
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			--IF @STATUS='U'
			--	BEGIN
			--		SELECT @STATUS='L';
			--	END

			UPDATE DCOLLECTED
				SET
				TOTAL_NOCHK=@TOTAL_NOCHK,
				TOTAL_CHKAMT=@TOTAL_CHKAMT, TOTAL_CASHAMT=@TOTAL_CASHAMT,
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE DS_CODE=@DS_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE DCOLLECTED_HIST WHERE DS_CODE=@DS_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO DCOLLECTED
				SELECT DS_CODE,TOTAL_NOCHK, TOTAL_CHKAMT, TOTAL_CASHAMT, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L', ENTRY_DATE 
					FROM DCOLLECTED_HIST
					WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE DCOLLECTED_HIST WHERE DS_CODE=@DS_CODE
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update DSCHEDULE

	INSERT INTO DSCHEDULE_HIST(DS_CODE, D_CODE, DEPOSIT_TYPE, 
		CITICASH_AMOUNT, CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, 
		CLIENT_CODE, LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, 
		MOD_NO, IS_AUTH, [FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, 
		CHECKED, FLEXGEN_DATE,
		SLNO,IS_ROW_CHG)
		SELECT DS_CODE, D_CODE, DEPOSIT_TYPE, 
		CITICASH_AMOUNT, CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, 
		CLIENT_CODE, LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, 
		MOD_NO, 1, [FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, 
		CHECKED, FLEXGEN_DATE,
		SLNO,IS_ROW_CHG
		FROM DSCHEDULE
		WHERE DS_CODE=@DS_CODE;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE DSCHEDULE WHERE DS_CODE=@DS_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO DSCHEDULE(DS_CODE, D_CODE, DEPOSIT_TYPE, CITICASH_AMOUNT, 
		CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, CLIENT_CODE, 
		LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, MOD_NO, 
		[FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, CHECKED, 
		FLEXGEN_DATE, SLNO, IS_ROW_CHG, [STATUS])
		SELECT DS_CODE, D_CODE, DEPOSIT_TYPE, CITICASH_AMOUNT, 
		CITICHECK_AMOUNT, SCHEDULE_DATE, NO_CHECK, CLIENT_CODE, 
		LOCATION_CODE, CORR_BANK_CODE, CORR_BRANCH_CODE, MOD_NO, 
		[FILENAME], REF_NO, FILE_USER_ID, SEQ_NO, CHECKED, 
		FLEXGEN_DATE, SLNO, IS_ROW_CHG, @STATUS
		FROM DSCHEDULE_HIST 
		WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE DSCHEDULE_HIST WHERE DS_CODE=@DS_CODE AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	---------------- update slip_date of ccash and csd_det -----------

	DECLARE tmpCursor1 CURSOR FOR
		SELECT D_CODE,SCHEDULE_DATE
        FROM DSCHEDULE WHERE DS_CODE=@DS_CODE ;

	OPEN tmpCursor1;
	FETCH NEXT FROM tmpCursor1 
        INTO @vDCode,@vSlipDate;
	
	WHILE @@FETCH_STATUS=0 
 	BEGIN
		UPDATE CCASH SET SLIP_DATE=@vSlipDate
			WHERE D_CODE=@vDCode;
		
		UPDATE CCASH_HIST SET SLIP_DATE=@vSlipDate
			WHERE D_CODE=@vDCode AND IS_AUTH=0;

		UPDATE CSD_DET SET SLIP_DATE=@vSlipDate
			WHERE D_CODE=@vDCode;
		
		UPDATE CSD_DET_HIST SET SLIP_DATE=@vSlipDate
			WHERE D_CODE=@vDCode AND IS_AUTH=0;
		
		FETCH NEXT FROM tmpCursor1 
			INTO @vDCode,@vSlipDate;

	END

	CLOSE tmpCursor1;
	DEALLOCATE tmpCursor1;

	-------------------------------
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 14-May-13
-- Description:	Get dschedule for missing citicash/citispeed entry
-- =============================================
ALTER PROCEDURE [dbo].[CMS_DSchedule_GetMissingDetail]			
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT ds.* FROM DSCHEDULE ds			
		LEFT OUTER JOIN CCASH cc ON ds.D_CODE=cc.D_CODE
		WHERE ds.[STATUS]='L' AND ds.[FILENAME] IS NULL AND ds.DEPOSIT_TYPE='Cash' and cc.D_CODE IS NULL
	UNION ALL
	SELECT ds.* FROM DSCHEDULE ds
		LEFT OUTER JOIN CSD_DET cs ON ds.D_CODE=cs.D_CODE
		WHERE ds.[STATUS]='L' AND ds.[FILENAME] IS NULL AND ds.DEPOSIT_TYPE='Check' and cs.D_CODE IS NULL
			
	   
END

GO


ALTER TABLE dbo.CSD_DET
ADD [STATUS] char (1) NULL; 
GO


UPDATE dbo.CSD_DET SET [STATUS]=a.STATUS 
FROM dbo.CSD a INNER JOIN dbo.CSD_DET b
ON a.D_CODE=b.D_CODE 


GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 09-Jan-13
-- Description:	Authorize record to CSD
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CSD_Auth]	
	@D_CODE			varchar(12),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),		
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),
			@LAST_MOD_NO		int,
			@IS_AUTH			bit;			
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT D_CODE from CSD_HIST 
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],	
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH
				FROM CSD_HIST 
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @STATUS='U'
		BEGIN
			SELECT @STATUS='L';
		END

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CSD_HIST 
				SELECT *,1 FROM CSD
				WHERE D_CODE=@D_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CSD_HIST
				SET [STATUS] = 'O' 
				WHERE D_CODE=@D_CODE
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			--IF @STATUS='U'
			--	BEGIN
			--		SELECT @STATUS='L';
			--	END

			UPDATE CSD
				SET				
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS
			WHERE D_CODE=@D_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CSD_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN

			IF NOT EXISTS(SELECT D_CODE FROM DSCHEDULE
				WHERE D_CODE=@D_CODE)
			BEGIN
				-- parent not exist
				ROLLBACK TRANSACTION;
				RETURN 11;
			END
			
			INSERT INTO CSD
				SELECT D_CODE, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L' 
					FROM CSD_HIST
					WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CSD_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update CSD_DET

	INSERT INTO CSD_DET_HIST(D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, IS_AUTH, RTN_CODE)
		SELECT D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, 1, RTN_CODE
		FROM CSD_DET
		WHERE D_CODE=@D_CODE;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CSD_DET WHERE D_CODE=@D_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CSD_DET(D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, RTN_CODE, [STATUS])
		SELECT D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, RTN_CODE, @STATUS
		FROM CSD_DET_HIST 
		WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CSD_DET_HIST WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

GO



-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 10-Jan-15
-- Description:	Get CSD for mismatch total check no/check amount Faster
-- =============================================
CREATE PROCEDURE [dbo].[CMS_CSD_GetMismatchDetailF]			
AS
BEGIN	
		
	SET NOCOUNT ON;

	SELECT ds.DS_CODE,ds.D_CODE,ds.CITICHECK_AMOUNT,ds.NO_CHECK ,
		COUNT(cdt.D_CODE) AS TOTCHECK, SUM(cdt.AMOUNT) TOTAMOUNT
		FROM DSCHEDULE ds 
		INNER JOIN CSD_DET cdt on cdt.D_CODE=ds.D_CODE
		WHERE ds.FILENAME IS NULL AND (DS.CHECKED=0 OR DS.CHECKED IS NULL) AND
		ds.DEPOSIT_TYPE='Check' AND ds.[STATUS]='L'
		GROUP BY ds.DS_CODE,ds.D_CODE,ds.CITICHECK_AMOUNT,ds.NO_CHECK
		HAVING COUNT(cdt.D_CODE)<>ds.NO_CHECK OR SUM(cdt.AMOUNT)<>ds.CITICHECK_AMOUNT;
	   
END

GO

