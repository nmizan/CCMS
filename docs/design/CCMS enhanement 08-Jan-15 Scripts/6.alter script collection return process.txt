
ALTER TABLE RETURN_CSD ADD RTN_DATE datetime null

GO

ALTER TABLE RETURN_CSD_HIST ADD RTN_DATE datetime null

GO


ALTER TABLE RETURN_CSD ADD RTN_FILENAME varchar(15) null

GO

ALTER TABLE RETURN_CSD_HIST ADD RTN_FILENAME varchar(15) null

GO


ALTER TABLE RETURN_CSD ADD RTN_FILE_USERID varchar(15) null

GO

ALTER TABLE RETURN_CSD_HIST ADD RTN_FILE_USERID varchar(20) null

GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 27-Aug-13
-- Description:	Add detail to RETURN_CSD
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ReturnCSD_Add]	
	@D_CODE				varchar(12), 
	@SLNO				numeric(3,0), 
	@RTN_STATUS			char(1), 
	@RTN_CODE			varchar(2),
	@RTN_DATE           datetime
AS
BEGIN	
	DECLARE @ErrorVar	int;
		
	SET NOCOUNT ON;
			
	INSERT INTO RETURN_CSD_HIST(D_CODE, SLNO, RTN_STATUS, RTN_CODE, 
		INPUT_BY, 
		INPUT_DATETIME, INPUT_FROM, MOD_NO, [STATUS], IS_AUTH, RTN_DATE)
		VALUES(@D_CODE, @SLNO, @RTN_STATUS, @RTN_CODE, 
		substring(suser_name(),charindex('\',suser_name())+1,20),
		GETDATE(),HOST_NAME(),1,'U',0,@RTN_DATE);

	SELECT @ErrorVar = @@ERROR;
	
	IF @ErrorVar <> 0
		BEGIN			
			RETURN 1;
		END
		
	RETURN 0;
	   
END

GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 27-Aug-13
-- Description:	Authorize record to RETURN_CSD table
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ReturnCSD_Auth]	
	@D_CODE				varchar(12), 
	@SLNO				numeric(3,0),
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@RTN_STATUS 	char(1),
			@RTN_CODE 		varchar(2),
			@RTN_DATE           datetime,
			@INPUT_BY		varchar(20),
			@INPUT_DATETIME datetime,
			@INPUT_FROM		varchar(30),
			@AUTH_BY		varchar(20),
			@AUTH_DATETIME	datetime,
			@AUTH_FROM		varchar(30),
			@LAST_MOD_NO	int,
			@IS_AUTH		bit;			
	
	DECLARE @ErrorVar1		int; 
			

	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT D_CODE from RETURN_CSD_HIST 
			  WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@RTN_STATUS=RTN_STATUS,@RTN_CODE=RTN_CODE,				
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH,@RTN_DATE=RTN_DATE
				FROM RETURN_CSD_HIST 
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO RETURN_CSD_HIST(D_CODE, SLNO, RTN_STATUS, RTN_CODE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS], IS_AUTH,RTN_DATE)
				SELECT D_CODE, SLNO, RTN_STATUS, RTN_CODE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS],1 ,RTN_DATE
				FROM RETURN_CSD
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE RETURN_CSD_HIST
				SET [STATUS] = 'O' 
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO 
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			IF @STATUS='U'
				BEGIN
					SELECT @STATUS='L';
				END

			UPDATE RETURN_CSD
				SET RTN_STATUS=@RTN_STATUS,RTN_CODE=@RTN_CODE,			
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS , RTN_DATE=@RTN_DATE
			WHERE D_CODE=@D_CODE AND SLNO=@SLNO;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE RETURN_CSD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN
			INSERT INTO RETURN_CSD(D_CODE, SLNO, RTN_STATUS, RTN_CODE, 
				INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
				AUTH_BY, AUTH_DATETIME, AUTH_FROM, MOD_NO, [STATUS],RTN_DATE)
				SELECT D_CODE, SLNO, RTN_STATUS, RTN_CODE, 					 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L',RTN_DATE 
					FROM RETURN_CSD_HIST
					WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE RETURN_CSD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END

	DELETE CSD_HIST WHERE D_CODE=@D_CODE AND IS_AUTH=0;
	DELETE CSD_DET_HIST WHERE D_CODE=@D_CODE AND IS_AUTH=0;

	UPDATE CSD_DET SET RTN_STATUS=@RTN_STATUS,RTN_CODE=@RTN_CODE
		WHERE D_CODE=@D_CODE AND SLNO=@SLNO;

	COMMIT TRANSACTION
	
	SELECT @ErrorVar1 = @@error;
	
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END


GO

-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 27-Aug-13
-- Description:	Remove record from RETURN_CSD
-- =============================================
ALTER PROCEDURE [dbo].[CMS_ReturnCSD_Remove]	
	@D_CODE				varchar(12), 
	@SLNO				numeric(3,0),
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @STATUS			char(1),
			@RTN_STATUS 	char(1),
			@RTN_CODE 		varchar(2),
			@RTN_DATE       datetime;			
	
	DECLARE @ErrorVar		int; 
			

	SET NOCOUNT ON;

	SET @STATUS = '';

	BEGIN TRANSACTION

	IF EXISTS(SELECT D_CODE from RETURN_CSD 
			  WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],@RTN_STATUS=RTN_STATUS,
				@RTN_CODE=RTN_CODE, @RTN_DATE=RTN_DATE
				FROM RETURN_CSD 
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO;
			
			IF (@STATUS = 'D')
				BEGIN
					-- already deleted
					ROLLBACK TRANSACTION;
					RETURN 6;
				END;

			DELETE RETURN_CSD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			SELECT @RET_MOD_NO = @MOD_NO + 1;

			INSERT INTO 
				RETURN_CSD_HIST (D_CODE, SLNO, RTN_STATUS, RTN_CODE, 
				INPUT_BY, 
				INPUT_DATETIME, INPUT_FROM, MOD_NO, 
				[STATUS], IS_AUTH, RTN_DATE)
				VALUES(@D_CODE, @SLNO, @RTN_STATUS, @RTN_CODE, 
				substring(suser_name(),charindex('\',suser_name())+1,20), 
				GETDATE(), HOST_NAME(), @RET_MOD_NO, 
				'D', 0, @RTN_DATE)

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0				
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			COMMIT TRANSACTION;
			RETURN 0;
				
		END;
	ELSE 
		BEGIN			
			-- item might exist in hist table
			IF EXISTS(SELECT D_CODE from RETURN_CSD_HIST 
					  WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO )
				BEGIN
					DELETE RETURN_CSD_HIST
						WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0				
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO = @MOD_NO-1;

					COMMIT TRANSACTION;
					RETURN 0;			


				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END
			
		END		
    
END


GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 27-Aug-13
-- Description:	update detail to Return_CSD table
-- =============================================

ALTER PROCEDURE [dbo].[CMS_ReturnCSD_Update]	
	@D_CODE				varchar(12), 
	@SLNO				numeric(3,0), 
	@RTN_STATUS			char(1), 
	@RTN_CODE			varchar(2),
	@RTN_DATE       datetime,
	@MOD_NO			int,
	@RET_MOD_NO		int output
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;

	BEGIN TRANSACTION;

	IF EXISTS(SELECT D_CODE FROM RETURN_CSD 
				WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO)
		BEGIN

			DELETE RETURN_CSD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

			SELECT @ErrorVar = @@ERROR;		

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			SELECT @RET_MOD_NO = @MOD_NO +1;
			
			INSERT INTO RETURN_CSD_HIST(D_CODE, SLNO, RTN_STATUS, RTN_CODE, 
				INPUT_BY, 
				INPUT_DATETIME,INPUT_FROM,  
				MOD_NO, [STATUS], IS_AUTH, RTN_DATE)
				VALUES(@D_CODE, @SLNO, @RTN_STATUS, @RTN_CODE,
				substring(suser_name(),charindex('\',suser_name())+1,20),
				GETDATE(),HOST_NAME(),
				@RET_MOD_NO,'U',0, @RTN_DATE);

			SELECT @ErrorVar = @@ERROR;

			IF @ErrorVar <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END				

			COMMIT TRANSACTION;
			
			RETURN 0;

				
		END
	ELSE -- might be in hist table
		BEGIN

			IF EXISTS(SELECT D_CODE from RETURN_CSD_HIST 
						WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND MOD_NO=@MOD_NO AND IS_AUTH=0)
				BEGIN

					DELETE RETURN_CSD_HIST WHERE D_CODE=@D_CODE AND SLNO=@SLNO AND IS_AUTH=0;

					SELECT @ErrorVar = @@ERROR;		

					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END

					INSERT INTO RETURN_CSD_HIST(D_CODE, SLNO, RTN_STATUS, RTN_CODE, 
						INPUT_BY, 
						INPUT_DATETIME,INPUT_FROM,  
						MOD_NO, [STATUS], IS_AUTH, RTN_DATE)
						VALUES(@D_CODE, @SLNO, @RTN_STATUS, @RTN_CODE,
						substring(suser_name(),charindex('\',suser_name())+1,20),
						GETDATE(),HOST_NAME(),
						@MOD_NO,'U',0, @RTN_DATE);

					SELECT @ErrorVar = @@ERROR;
		
					IF @ErrorVar <> 0
						BEGIN
							ROLLBACK TRANSACTION;
							RETURN 1;
						END
					
					SELECT @RET_MOD_NO=@MOD_NO;
					
					COMMIT TRANSACTION;
					RETURN 0;
			
				END
			ELSE
				BEGIN
					-- not exist
					ROLLBACK TRANSACTION;
					RETURN 4;
				END

		END
    
END

GO


-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 26-Feb-12
-- Description:	get reversal outstanding items
-- =============================================
ALTER PROCEDURE [dbo].[CMS_Reversal_Outstanding]	
	@STATUS_ID		tinyint,
	@REV_DATE		datetime,
	@AUTHORIZE		tinyint,
	@DEPOSIT_TYPE   varchar(5)		
AS
BEGIN	
	DECLARE @ErrorVar INT;
	
	SET NOCOUNT ON;
	
	if @STATUS_ID=1
		BEGIN
			if @AUTHORIZE=1 AND @DEPOSIT_TYPE is NULL
				BEGIN
						select * from 
					( select c.cash_cr_type,a.ref_no,a.value_Date,b.location_code,a.Rev_Date,
					a.Acc_No,a.RefAcc_No, b.client_code,b.citicash_amount,
					b.citicheck_amount,b.deposit_type,a.d_code ,a.status_id,
					a.remarks ,b.ds_code ,c.Acc_Name,d.Status_Name,a.Authorize,
					a.USERID,a.AUTHORIZER_ID  
					 from CCMSREF_TAB a  
					left outer join tran_status d on  a.status_id=d.status_id  ,dschedule b,client c  
					 Where 
					 A.d_code = B.d_code 
					 and b.client_code=c.client_code 
					and a.filename is null 
					and b.ds_code not in
					(select ds_code from cschedule) and rev_date <=@REV_DATE
					and a.status_id=1 and (a.AUTHORIZE IS NULL OR a.AUTHORIZE=1)) a
					--where a.value_date <> a.rev_date 
					order by a.ds_code,a.rev_date,a.acc_name asc;
				END;
				
			ELSE if @AUTHORIZE=1 AND @DEPOSIT_TYPE is NOT NULL
				BEGIN
						select * from 
					( select c.cash_cr_type,a.ref_no,a.value_Date,b.location_code,a.Rev_Date,
					a.Acc_No,a.RefAcc_No, b.client_code,b.citicash_amount,
					b.citicheck_amount,b.deposit_type,a.d_code ,a.status_id,
					a.remarks ,b.ds_code ,c.Acc_Name,d.Status_Name,a.Authorize,
					a.USERID,a.AUTHORIZER_ID  
					 from CCMSREF_TAB a  
					left outer join tran_status d on  a.status_id=d.status_id  ,dschedule b,client c  
					 Where 
					 A.d_code = B.d_code 
					 and b.client_code=c.client_code 
					and a.filename is null 
					and b.ds_code not in
					(select ds_code from cschedule) and rev_date <=@REV_DATE and b.DEPOSIT_TYPE =@DEPOSIT_TYPE 
					and a.status_id=1 and (a.AUTHORIZE IS NULL OR a.AUTHORIZE=1)) a
					--where a.value_date <> a.rev_date 
					order by a.ds_code,a.rev_date,a.acc_name asc;
				END;	
				
			ELSE IF @AUTHORIZE=0 AND @DEPOSIT_TYPE is NULL
			
				BEGIN
					select * from 
					( select c.cash_cr_type,a.ref_no,a.value_Date,b.location_code,a.Rev_Date,
					a.Acc_No,a.RefAcc_No, b.client_code,b.citicash_amount,
					b.citicheck_amount,b.deposit_type,a.d_code ,a.status_id,
					a.remarks ,b.ds_code ,c.Acc_Name,d.Status_Name,a.Authorize,
					a.USERID,a.AUTHORIZER_ID  
					 from CCMSREF_TAB a  
					left outer join tran_status d on  a.status_id=d.status_id  ,dschedule b,client c  
					 Where 
					 A.d_code = B.d_code 
					 and b.client_code=c.client_code 
					and a.filename is null 
					and b.ds_code not in
					(select ds_code from cschedule) and rev_date <=@REV_DATE
					and a.status_id=1 and a.AUTHORIZE=0) a
					--where a.value_date <> a.rev_date 
					order by a.ds_code,a.rev_date,a.acc_name asc;
				END ;	
				
			ELSE
				BEGIN
					select * from 
					( select c.cash_cr_type,a.ref_no,a.value_Date,b.location_code,a.Rev_Date,
					a.Acc_No,a.RefAcc_No, b.client_code,b.citicash_amount,
					b.citicheck_amount,b.deposit_type,a.d_code ,a.status_id,
					a.remarks ,b.ds_code ,c.Acc_Name,d.Status_Name,a.Authorize,
					a.USERID,a.AUTHORIZER_ID  
					 from CCMSREF_TAB a  
					left outer join tran_status d on  a.status_id=d.status_id  ,dschedule b,client c  
					 Where 
					 A.d_code = B.d_code 
					 and b.client_code=c.client_code 
					and a.filename is null 
					and b.ds_code not in
					(select ds_code from cschedule) and rev_date <=@REV_DATE and b.DEPOSIT_TYPE =@DEPOSIT_TYPE 
					and a.status_id=1 and a.AUTHORIZE=0) a
					--where a.value_date <> a.rev_date 
					order by a.ds_code,a.rev_date,a.acc_name asc;
				END ;
		END;
	ELSE
		BEGIN
			if @AUTHORIZE=1 AND @DEPOSIT_TYPE is NULL
				BEGIN
						select * from 
					( select c.cash_cr_type,a.ref_no,a.value_Date,b.location_code,a.Rev_Date,
					a.Acc_No,a.RefAcc_No, b.client_code,b.citicash_amount,
					b.citicheck_amount,b.deposit_type,a.d_code ,a.status_id,
					a.remarks ,b.ds_code ,c.Acc_Name,d.Status_Name,a.Authorize,
					a.USERID,a.AUTHORIZER_ID  
					 from CCMSREF_TAB a  
					left outer join tran_status d on  a.status_id=d.status_id  ,dschedule b,client c  
					 Where 
					 A.d_code = B.d_code 
					 and b.client_code=c.client_code 
					and a.filename is null 
					and b.ds_code not in
					(select ds_code from cschedule) and rev_date <=@REV_DATE
					and (a.status_id is null or a.status_id=2) 
					and (a.AUTHORIZE IS NULL OR a.AUTHORIZE=1) ) a
					--where a.value_date <> a.rev_date 
					order by a.ds_code,a.rev_date,a.acc_name asc ;
				END;
				
			ELSE if @AUTHORIZE=1 AND @DEPOSIT_TYPE is NOT NULL
				BEGIN
						select * from 
					( select c.cash_cr_type,a.ref_no,a.value_Date,b.location_code,a.Rev_Date,
					a.Acc_No,a.RefAcc_No, b.client_code,b.citicash_amount,
					b.citicheck_amount,b.deposit_type,a.d_code ,a.status_id,
					a.remarks ,b.ds_code ,c.Acc_Name,d.Status_Name,a.Authorize,
					a.USERID,a.AUTHORIZER_ID  
					 from CCMSREF_TAB a  
					left outer join tran_status d on  a.status_id=d.status_id  ,dschedule b,client c  
					 Where 
					 A.d_code = B.d_code 
					 and b.client_code=c.client_code 
					and a.filename is null 
					and b.ds_code not in
					(select ds_code from cschedule) and rev_date <=@REV_DATE and b.DEPOSIT_TYPE =@DEPOSIT_TYPE 
					and (a.status_id is null or a.status_id=2) 
					and (a.AUTHORIZE IS NULL OR a.AUTHORIZE=1) ) a
					--where a.value_date <> a.rev_date 
					order by a.ds_code,a.rev_date,a.acc_name asc ;
				END;
				
		   ELSE if @AUTHORIZE=0 AND @DEPOSIT_TYPE is NOT NULL
				BEGIN
					select * from 
					( select c.cash_cr_type,a.ref_no,a.value_Date,b.location_code,a.Rev_Date,
					a.Acc_No,a.RefAcc_No, b.client_code,b.citicash_amount,
					b.citicheck_amount,b.deposit_type,a.d_code ,a.status_id,
					a.remarks ,b.ds_code ,c.Acc_Name,d.Status_Name,a.Authorize ,
					a.USERID,a.AUTHORIZER_ID 
					 from CCMSREF_TAB a  
					left outer join tran_status d on  a.status_id=d.status_id  ,dschedule b,client c  
					 Where 
					 A.d_code = B.d_code 
					 and b.client_code=c.client_code 
					and a.filename is null 
					and b.ds_code not in
					(select ds_code from cschedule) and rev_date <=@REV_DATE and b.DEPOSIT_TYPE =@DEPOSIT_TYPE 
					and (a.status_id is null or a.status_id=2) 
					and a.AUTHORIZE=0 ) a
					--where a.value_date <> a.rev_date 
					order by a.ds_code,a.rev_date,a.acc_name asc ;
				END;
				
			ELSE
				BEGIN
					select * from 
					( select c.cash_cr_type,a.ref_no,a.value_Date,b.location_code,a.Rev_Date,
					a.Acc_No,a.RefAcc_No, b.client_code,b.citicash_amount,
					b.citicheck_amount,b.deposit_type,a.d_code ,a.status_id,
					a.remarks ,b.ds_code ,c.Acc_Name,d.Status_Name,a.Authorize ,
					a.USERID,a.AUTHORIZER_ID 
					 from CCMSREF_TAB a  
					left outer join tran_status d on  a.status_id=d.status_id  ,dschedule b,client c  
					 Where 
					 A.d_code = B.d_code 
					 and b.client_code=c.client_code 
					and a.filename is null 
					and b.ds_code not in
					(select ds_code from cschedule) and rev_date <=@REV_DATE
					and (a.status_id is null or a.status_id=2) 
					and a.AUTHORIZE=0 ) a
					--where a.value_date <> a.rev_date 
					order by a.ds_code,a.rev_date,a.acc_name asc ;

				END;

		END;
	   
END

GO

