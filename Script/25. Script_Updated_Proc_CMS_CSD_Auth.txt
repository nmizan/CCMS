USE [CCMS]
GO
/****** Object:  StoredProcedure [dbo].[CMS_CSD_Auth]    Script Date: 02/09/2015 12:23:50 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Iftekharul Alam Khan Lodi
-- Create date: 09-Jan-13
-- Modified by: Mohammad Yasir Arafat
-- Modify date: 02 Sept 15
-- Description:	Authorize record to CSD
-- =============================================
ALTER PROCEDURE [dbo].[CMS_CSD_Auth]	
	@D_CODE			varchar(12),	
	@MOD_NO			int,
	@MOD_DATETIME	datetime
AS
BEGIN	
	DECLARE @STATUS				char(1),		
			@INPUT_BY			varchar(20),
			@INPUT_DATETIME		datetime,
			@INPUT_FROM			varchar(30),
			@LAST_MOD_NO		int,
			@IS_AUTH			bit,
			@AddSlipText varchar(150);					
	
	DECLARE @ErrorVar1		int; 
			
	SET NOCOUNT ON;

	SELECT @STATUS = '';

	BEGIN TRANSACTION;

	IF EXISTS(SELECT D_CODE from CSD_HIST 
			  WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO)
		BEGIN
			SELECT @STATUS=[STATUS],	
				@INPUT_BY=INPUT_BY,	@INPUT_DATETIME=INPUT_DATETIME,
				@INPUT_FROM=INPUT_FROM,@IS_AUTH=IS_AUTH, @AddSlipText=AddSlipText
				FROM CSD_HIST 
				WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			IF (@IS_AUTH = 1)
				BEGIN
					-- already authorized
					ROLLBACK TRANSACTION;
					RETURN 3;
				END;
			IF (@INPUT_BY = substring(suser_name(),charindex('\',suser_name())+1,20))
				BEGIN
					-- maker and checker same person
					ROLLBACK TRANSACTION;
					RETURN 5;
				END;
			IF (@INPUT_DATETIME <> @MOD_DATETIME)
				BEGIN
					-- Data hase been changed. Need notification
					ROLLBACK TRANSACTION;
					RETURN 7;
				END;			
		END;
	ELSE
		BEGIN			
			-- not exist
			ROLLBACK TRANSACTION;
			RETURN 4;
		END	;

	IF @STATUS='U'
		BEGIN
			SELECT @STATUS='L';
		END

	IF @MOD_NO > 1
		BEGIN	
		
			INSERT INTO CSD_HIST(D_CODE,INPUT_BY,INPUT_DATETIME,Input_From,Auth_By,Auth_DateTime,Auth_From,MOD_NO,Status,IS_Auth,Customer_Ref,AddSlipText) 
				SELECT D_CODE,INPUT_BY,INPUT_DATETIME,Input_From,Auth_By,Auth_DateTime,Auth_From,MOD_NO,Status,1,Customer_Ref,AddSlipText FROM CSD
				WHERE D_CODE=@D_CODE;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END


			UPDATE CSD_HIST
				SET [STATUS] = 'O' 
				WHERE D_CODE=@D_CODE
				AND [STATUS] = 'L';

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			--IF @STATUS='U'
			--	BEGIN
			--		SELECT @STATUS='L';
			--	END

			UPDATE CSD
				SET				
				INPUT_BY=@INPUT_BY,	INPUT_DATETIME=@INPUT_DATETIME,
				INPUT_FROM=@INPUT_FROM,
				AUTH_BY=substring(suser_name(),charindex('\',suser_name())+1,20),
				AUTH_DATETIME=GETDATE(),AUTH_FROM=HOST_NAME(),
				MOD_NO=@MOD_NO,[STATUS]=@STATUS, AddSlipText=@AddSlipText
			WHERE D_CODE=@D_CODE;

			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END
			
			DELETE CSD_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END	

		END
	ELSE -- first record
		BEGIN

			IF NOT EXISTS(SELECT D_CODE FROM DSCHEDULE
				WHERE D_CODE=@D_CODE)
			BEGIN
				-- parent not exist
				ROLLBACK TRANSACTION;
				RETURN 11;
			END
			
			INSERT INTO CSD
				SELECT D_CODE, 
					INPUT_BY, INPUT_DATETIME, INPUT_FROM, 
					substring(suser_name(),charindex('\',suser_name())+1,20), 
					GETDATE(), HOST_NAME(), MOD_NO, 'L',Customer_Ref,AddSlipText 
					FROM CSD_HIST
					WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END

			DELETE CSD_HIST WHERE D_CODE=@D_CODE
				AND IS_AUTH=0;
			
			SELECT @ErrorVar1 = @@error;

			IF @ErrorVar1 <> 0
				BEGIN
					ROLLBACK TRANSACTION;
					RETURN 1;
				END			
					
		END
	
	-- Now update CSD_DET

	INSERT INTO CSD_DET_HIST(D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, IS_AUTH, RTN_CODE,AddCheckText)
		SELECT D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, 1, RTN_CODE,  AddCheckText
		FROM CSD_DET
		WHERE D_CODE=@D_CODE;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	DELETE CSD_DET WHERE D_CODE=@D_CODE;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END

	INSERT INTO CSD_DET(D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, RTN_CODE, [STATUS],AddCheckText)
		SELECT D_CODE, SLNO, CHECK_NO, DRAWER, DRAWEE_BANK_CODE, 
		AMOUNT, CUSTOMER_REF, SLIP_DATE, CHECK_DATE, DRAWEE_BRANCH, CHECK_REF, 
		RTN_STATUS, MOD_NO, RTN_CODE, @STATUS,AddCheckText
		FROM CSD_DET_HIST 
		WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;
	
	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END	

	DELETE CSD_DET_HIST WHERE D_CODE=@D_CODE AND MOD_NO=@MOD_NO;

	SELECT @ErrorVar1 = @@error;

	IF @ErrorVar1 <> 0
		BEGIN
			ROLLBACK TRANSACTION;
			RETURN 1;
		END
	
	COMMIT TRANSACTION;
		
	SELECT @ErrorVar1 = @@error;
		
	IF @ErrorVar1 = 0
		BEGIN		
			RETURN 0;
		END
	ELSE
		BEGIN
			RETURN 1;
		END

    
END

